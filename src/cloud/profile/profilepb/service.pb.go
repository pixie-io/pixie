// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/profile/profilepb/service.proto

package profilepb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserInfo struct {
	ID               *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgID            *uuidpb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Username         string       `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	FirstName        string       `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName         string       `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email            string       `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	ProfilePicture   string       `protobuf:"bytes,7,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	IsApproved       bool         `protobuf:"varint,8,opt,name=is_approved,json=isApproved,proto3" json:"is_approved,omitempty"`
	IdentityProvider string       `protobuf:"bytes,9,opt,name=identity_provider,json=identityProvider,proto3" json:"identity_provider,omitempty"`
	AuthProviderID   string       `protobuf:"bytes,10,opt,name=auth_provider_id,json=authProviderId,proto3" json:"auth_provider_id,omitempty"`
}

func (m *UserInfo) Reset()      { *m = UserInfo{} }
func (*UserInfo) ProtoMessage() {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{0}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *UserInfo) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetProfilePicture() string {
	if m != nil {
		return m.ProfilePicture
	}
	return ""
}

func (m *UserInfo) GetIsApproved() bool {
	if m != nil {
		return m.IsApproved
	}
	return false
}

func (m *UserInfo) GetIdentityProvider() string {
	if m != nil {
		return m.IdentityProvider
	}
	return ""
}

func (m *UserInfo) GetAuthProviderID() string {
	if m != nil {
		return m.AuthProviderID
	}
	return ""
}

type GetUserByEmailRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *GetUserByEmailRequest) Reset()      { *m = GetUserByEmailRequest{} }
func (*GetUserByEmailRequest) ProtoMessage() {}
func (*GetUserByEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{1}
}
func (m *GetUserByEmailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserByEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserByEmailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserByEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByEmailRequest.Merge(m, src)
}
func (m *GetUserByEmailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserByEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByEmailRequest proto.InternalMessageInfo

func (m *GetUserByEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type GetUserByAuthProviderIDRequest struct {
	AuthProviderID string `protobuf:"bytes,1,opt,name=auth_provider_id,json=authProviderId,proto3" json:"auth_provider_id,omitempty"`
}

func (m *GetUserByAuthProviderIDRequest) Reset()      { *m = GetUserByAuthProviderIDRequest{} }
func (*GetUserByAuthProviderIDRequest) ProtoMessage() {}
func (*GetUserByAuthProviderIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{2}
}
func (m *GetUserByAuthProviderIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserByAuthProviderIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserByAuthProviderIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserByAuthProviderIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByAuthProviderIDRequest.Merge(m, src)
}
func (m *GetUserByAuthProviderIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserByAuthProviderIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByAuthProviderIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByAuthProviderIDRequest proto.InternalMessageInfo

func (m *GetUserByAuthProviderIDRequest) GetAuthProviderID() string {
	if m != nil {
		return m.AuthProviderID
	}
	return ""
}

type OrgInfo struct {
	ID              *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgName         string       `protobuf:"bytes,2,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	DomainName      string       `protobuf:"bytes,3,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	EnableApprovals bool         `protobuf:"varint,4,opt,name=enable_approvals,json=enableApprovals,proto3" json:"enable_approvals,omitempty"`
}

func (m *OrgInfo) Reset()      { *m = OrgInfo{} }
func (*OrgInfo) ProtoMessage() {}
func (*OrgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{3}
}
func (m *OrgInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrgInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrgInfo.Merge(m, src)
}
func (m *OrgInfo) XXX_Size() int {
	return m.Size()
}
func (m *OrgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrgInfo proto.InternalMessageInfo

func (m *OrgInfo) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *OrgInfo) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *OrgInfo) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *OrgInfo) GetEnableApprovals() bool {
	if m != nil {
		return m.EnableApprovals
	}
	return false
}

type CreateUserRequest struct {
	OrgID            *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Username         string       `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FirstName        string       `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName         string       `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email            string       `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	IdentityProvider string       `protobuf:"bytes,6,opt,name=identity_provider,json=identityProvider,proto3" json:"identity_provider,omitempty"`
	AuthProviderID   string       `protobuf:"bytes,7,opt,name=auth_provider_id,json=authProviderId,proto3" json:"auth_provider_id,omitempty"`
}

func (m *CreateUserRequest) Reset()      { *m = CreateUserRequest{} }
func (*CreateUserRequest) ProtoMessage() {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{4}
}
func (m *CreateUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserRequest.Merge(m, src)
}
func (m *CreateUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserRequest proto.InternalMessageInfo

func (m *CreateUserRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *CreateUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateUserRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreateUserRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetIdentityProvider() string {
	if m != nil {
		return m.IdentityProvider
	}
	return ""
}

func (m *CreateUserRequest) GetAuthProviderID() string {
	if m != nil {
		return m.AuthProviderID
	}
	return ""
}

type CreateOrgAndUserRequest struct {
	Org  *CreateOrgAndUserRequest_Org  `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	User *CreateOrgAndUserRequest_User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *CreateOrgAndUserRequest) Reset()      { *m = CreateOrgAndUserRequest{} }
func (*CreateOrgAndUserRequest) ProtoMessage() {}
func (*CreateOrgAndUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{5}
}
func (m *CreateOrgAndUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrgAndUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrgAndUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrgAndUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrgAndUserRequest.Merge(m, src)
}
func (m *CreateOrgAndUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrgAndUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrgAndUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrgAndUserRequest proto.InternalMessageInfo

func (m *CreateOrgAndUserRequest) GetOrg() *CreateOrgAndUserRequest_Org {
	if m != nil {
		return m.Org
	}
	return nil
}

func (m *CreateOrgAndUserRequest) GetUser() *CreateOrgAndUserRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

type CreateOrgAndUserRequest_Org struct {
	OrgName    string `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	DomainName string `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (m *CreateOrgAndUserRequest_Org) Reset()      { *m = CreateOrgAndUserRequest_Org{} }
func (*CreateOrgAndUserRequest_Org) ProtoMessage() {}
func (*CreateOrgAndUserRequest_Org) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{5, 0}
}
func (m *CreateOrgAndUserRequest_Org) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrgAndUserRequest_Org) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrgAndUserRequest_Org.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrgAndUserRequest_Org) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrgAndUserRequest_Org.Merge(m, src)
}
func (m *CreateOrgAndUserRequest_Org) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrgAndUserRequest_Org) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrgAndUserRequest_Org.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrgAndUserRequest_Org proto.InternalMessageInfo

func (m *CreateOrgAndUserRequest_Org) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *CreateOrgAndUserRequest_Org) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type CreateOrgAndUserRequest_User struct {
	Username         string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	FirstName        string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName         string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email            string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	IdentityProvider string `protobuf:"bytes,5,opt,name=identity_provider,json=identityProvider,proto3" json:"identity_provider,omitempty"`
	AuthProviderID   string `protobuf:"bytes,6,opt,name=auth_provider_id,json=authProviderId,proto3" json:"auth_provider_id,omitempty"`
}

func (m *CreateOrgAndUserRequest_User) Reset()      { *m = CreateOrgAndUserRequest_User{} }
func (*CreateOrgAndUserRequest_User) ProtoMessage() {}
func (*CreateOrgAndUserRequest_User) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{5, 1}
}
func (m *CreateOrgAndUserRequest_User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrgAndUserRequest_User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrgAndUserRequest_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrgAndUserRequest_User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrgAndUserRequest_User.Merge(m, src)
}
func (m *CreateOrgAndUserRequest_User) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrgAndUserRequest_User) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrgAndUserRequest_User.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrgAndUserRequest_User proto.InternalMessageInfo

func (m *CreateOrgAndUserRequest_User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateOrgAndUserRequest_User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreateOrgAndUserRequest_User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreateOrgAndUserRequest_User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateOrgAndUserRequest_User) GetIdentityProvider() string {
	if m != nil {
		return m.IdentityProvider
	}
	return ""
}

func (m *CreateOrgAndUserRequest_User) GetAuthProviderID() string {
	if m != nil {
		return m.AuthProviderID
	}
	return ""
}

type CreateOrgAndUserResponse struct {
	OrgID  *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserID *uuidpb.UUID `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *CreateOrgAndUserResponse) Reset()      { *m = CreateOrgAndUserResponse{} }
func (*CreateOrgAndUserResponse) ProtoMessage() {}
func (*CreateOrgAndUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{6}
}
func (m *CreateOrgAndUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrgAndUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrgAndUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrgAndUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrgAndUserResponse.Merge(m, src)
}
func (m *CreateOrgAndUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrgAndUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrgAndUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrgAndUserResponse proto.InternalMessageInfo

func (m *CreateOrgAndUserResponse) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *CreateOrgAndUserResponse) GetUserID() *uuidpb.UUID {
	if m != nil {
		return m.UserID
	}
	return nil
}

type CreateOrgRequest struct {
	OrgName    string             `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	DomainName *types.StringValue `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (m *CreateOrgRequest) Reset()      { *m = CreateOrgRequest{} }
func (*CreateOrgRequest) ProtoMessage() {}
func (*CreateOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{7}
}
func (m *CreateOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrgRequest.Merge(m, src)
}
func (m *CreateOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrgRequest proto.InternalMessageInfo

func (m *CreateOrgRequest) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *CreateOrgRequest) GetDomainName() *types.StringValue {
	if m != nil {
		return m.DomainName
	}
	return nil
}

type GetOrgByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetOrgByNameRequest) Reset()      { *m = GetOrgByNameRequest{} }
func (*GetOrgByNameRequest) ProtoMessage() {}
func (*GetOrgByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{8}
}
func (m *GetOrgByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgByNameRequest.Merge(m, src)
}
func (m *GetOrgByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgByNameRequest proto.InternalMessageInfo

func (m *GetOrgByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetOrgByDomainRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (m *GetOrgByDomainRequest) Reset()      { *m = GetOrgByDomainRequest{} }
func (*GetOrgByDomainRequest) ProtoMessage() {}
func (*GetOrgByDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{9}
}
func (m *GetOrgByDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgByDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgByDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgByDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgByDomainRequest.Merge(m, src)
}
func (m *GetOrgByDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgByDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgByDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgByDomainRequest proto.InternalMessageInfo

func (m *GetOrgByDomainRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type GetOrgsRequest struct {
}

func (m *GetOrgsRequest) Reset()      { *m = GetOrgsRequest{} }
func (*GetOrgsRequest) ProtoMessage() {}
func (*GetOrgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{10}
}
func (m *GetOrgsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgsRequest.Merge(m, src)
}
func (m *GetOrgsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgsRequest proto.InternalMessageInfo

type GetOrgsResponse struct {
	Orgs []*OrgInfo `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
}

func (m *GetOrgsResponse) Reset()      { *m = GetOrgsResponse{} }
func (*GetOrgsResponse) ProtoMessage() {}
func (*GetOrgsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{11}
}
func (m *GetOrgsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgsResponse.Merge(m, src)
}
func (m *GetOrgsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgsResponse proto.InternalMessageInfo

func (m *GetOrgsResponse) GetOrgs() []*OrgInfo {
	if m != nil {
		return m.Orgs
	}
	return nil
}

type UpdateUserRequest struct {
	ID             *uuidpb.UUID       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayPicture *types.StringValue `protobuf:"bytes,3,opt,name=display_picture,json=displayPicture,proto3" json:"display_picture,omitempty"`
	IsApproved     *types.BoolValue   `protobuf:"bytes,4,opt,name=is_approved,json=isApproved,proto3" json:"is_approved,omitempty"`
}

func (m *UpdateUserRequest) Reset()      { *m = UpdateUserRequest{} }
func (*UpdateUserRequest) ProtoMessage() {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{12}
}
func (m *UpdateUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserRequest.Merge(m, src)
}
func (m *UpdateUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserRequest proto.InternalMessageInfo

func (m *UpdateUserRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *UpdateUserRequest) GetDisplayPicture() *types.StringValue {
	if m != nil {
		return m.DisplayPicture
	}
	return nil
}

func (m *UpdateUserRequest) GetIsApproved() *types.BoolValue {
	if m != nil {
		return m.IsApproved
	}
	return nil
}

type UpdateOrgRequest struct {
	ID              *uuidpb.UUID       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnableApprovals *types.BoolValue   `protobuf:"bytes,2,opt,name=enable_approvals,json=enableApprovals,proto3" json:"enable_approvals,omitempty"`
	DomainName      *types.StringValue `protobuf:"bytes,3,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (m *UpdateOrgRequest) Reset()      { *m = UpdateOrgRequest{} }
func (*UpdateOrgRequest) ProtoMessage() {}
func (*UpdateOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{13}
}
func (m *UpdateOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrgRequest.Merge(m, src)
}
func (m *UpdateOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrgRequest proto.InternalMessageInfo

func (m *UpdateOrgRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *UpdateOrgRequest) GetEnableApprovals() *types.BoolValue {
	if m != nil {
		return m.EnableApprovals
	}
	return nil
}

func (m *UpdateOrgRequest) GetDomainName() *types.StringValue {
	if m != nil {
		return m.DomainName
	}
	return nil
}

type GetUserSettingsRequest struct {
	ID *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetUserSettingsRequest) Reset()      { *m = GetUserSettingsRequest{} }
func (*GetUserSettingsRequest) ProtoMessage() {}
func (*GetUserSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{14}
}
func (m *GetUserSettingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserSettingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserSettingsRequest.Merge(m, src)
}
func (m *GetUserSettingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserSettingsRequest proto.InternalMessageInfo

func (m *GetUserSettingsRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetUserSettingsResponse struct {
	AnalyticsOptout bool `protobuf:"varint,3,opt,name=analytics_optout,json=analyticsOptout,proto3" json:"analytics_optout,omitempty"`
}

func (m *GetUserSettingsResponse) Reset()      { *m = GetUserSettingsResponse{} }
func (*GetUserSettingsResponse) ProtoMessage() {}
func (*GetUserSettingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{15}
}
func (m *GetUserSettingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserSettingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserSettingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserSettingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserSettingsResponse.Merge(m, src)
}
func (m *GetUserSettingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserSettingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserSettingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserSettingsResponse proto.InternalMessageInfo

func (m *GetUserSettingsResponse) GetAnalyticsOptout() bool {
	if m != nil {
		return m.AnalyticsOptout
	}
	return false
}

type UpdateUserSettingsRequest struct {
	ID              *uuidpb.UUID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AnalyticsOptout *types.BoolValue `protobuf:"bytes,4,opt,name=analytics_optout,json=analyticsOptout,proto3" json:"analytics_optout,omitempty"`
}

func (m *UpdateUserSettingsRequest) Reset()      { *m = UpdateUserSettingsRequest{} }
func (*UpdateUserSettingsRequest) ProtoMessage() {}
func (*UpdateUserSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{16}
}
func (m *UpdateUserSettingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserSettingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserSettingsRequest.Merge(m, src)
}
func (m *UpdateUserSettingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserSettingsRequest proto.InternalMessageInfo

func (m *UpdateUserSettingsRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *UpdateUserSettingsRequest) GetAnalyticsOptout() *types.BoolValue {
	if m != nil {
		return m.AnalyticsOptout
	}
	return nil
}

type UpdateUserSettingsResponse struct {
	OK bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *UpdateUserSettingsResponse) Reset()      { *m = UpdateUserSettingsResponse{} }
func (*UpdateUserSettingsResponse) ProtoMessage() {}
func (*UpdateUserSettingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{17}
}
func (m *UpdateUserSettingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserSettingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserSettingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserSettingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserSettingsResponse.Merge(m, src)
}
func (m *UpdateUserSettingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserSettingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserSettingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserSettingsResponse proto.InternalMessageInfo

func (m *UpdateUserSettingsResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

type GetUserAttributesRequest struct {
	ID *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetUserAttributesRequest) Reset()      { *m = GetUserAttributesRequest{} }
func (*GetUserAttributesRequest) ProtoMessage() {}
func (*GetUserAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{18}
}
func (m *GetUserAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserAttributesRequest.Merge(m, src)
}
func (m *GetUserAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserAttributesRequest proto.InternalMessageInfo

func (m *GetUserAttributesRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetUserAttributesResponse struct {
	TourSeen bool `protobuf:"varint,1,opt,name=tour_seen,json=tourSeen,proto3" json:"tour_seen,omitempty"`
}

func (m *GetUserAttributesResponse) Reset()      { *m = GetUserAttributesResponse{} }
func (*GetUserAttributesResponse) ProtoMessage() {}
func (*GetUserAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{19}
}
func (m *GetUserAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserAttributesResponse.Merge(m, src)
}
func (m *GetUserAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserAttributesResponse proto.InternalMessageInfo

func (m *GetUserAttributesResponse) GetTourSeen() bool {
	if m != nil {
		return m.TourSeen
	}
	return false
}

type SetUserAttributesRequest struct {
	ID       *uuidpb.UUID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TourSeen *types.BoolValue `protobuf:"bytes,2,opt,name=tour_seen,json=tourSeen,proto3" json:"tour_seen,omitempty"`
}

func (m *SetUserAttributesRequest) Reset()      { *m = SetUserAttributesRequest{} }
func (*SetUserAttributesRequest) ProtoMessage() {}
func (*SetUserAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{20}
}
func (m *SetUserAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUserAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUserAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUserAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserAttributesRequest.Merge(m, src)
}
func (m *SetUserAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetUserAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserAttributesRequest proto.InternalMessageInfo

func (m *SetUserAttributesRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *SetUserAttributesRequest) GetTourSeen() *types.BoolValue {
	if m != nil {
		return m.TourSeen
	}
	return nil
}

type SetUserAttributesResponse struct {
}

func (m *SetUserAttributesResponse) Reset()      { *m = SetUserAttributesResponse{} }
func (*SetUserAttributesResponse) ProtoMessage() {}
func (*SetUserAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{21}
}
func (m *SetUserAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUserAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUserAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUserAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserAttributesResponse.Merge(m, src)
}
func (m *SetUserAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetUserAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserAttributesResponse proto.InternalMessageInfo

type GetUsersInOrgRequest struct {
	OrgID *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *GetUsersInOrgRequest) Reset()      { *m = GetUsersInOrgRequest{} }
func (*GetUsersInOrgRequest) ProtoMessage() {}
func (*GetUsersInOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{22}
}
func (m *GetUsersInOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersInOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersInOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersInOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersInOrgRequest.Merge(m, src)
}
func (m *GetUsersInOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersInOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersInOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersInOrgRequest proto.InternalMessageInfo

func (m *GetUsersInOrgRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetUsersInOrgResponse struct {
	Users []*UserInfo `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *GetUsersInOrgResponse) Reset()      { *m = GetUsersInOrgResponse{} }
func (*GetUsersInOrgResponse) ProtoMessage() {}
func (*GetUsersInOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{23}
}
func (m *GetUsersInOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersInOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersInOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersInOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersInOrgResponse.Merge(m, src)
}
func (m *GetUsersInOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersInOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersInOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersInOrgResponse proto.InternalMessageInfo

func (m *GetUsersInOrgResponse) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

type IDEConfig struct {
	IDEName string `protobuf:"bytes,1,opt,name=ide_name,json=ideName,proto3" json:"ide_name,omitempty"`
	Path    string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *IDEConfig) Reset()      { *m = IDEConfig{} }
func (*IDEConfig) ProtoMessage() {}
func (*IDEConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{24}
}
func (m *IDEConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDEConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDEConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDEConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDEConfig.Merge(m, src)
}
func (m *IDEConfig) XXX_Size() int {
	return m.Size()
}
func (m *IDEConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IDEConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IDEConfig proto.InternalMessageInfo

func (m *IDEConfig) GetIDEName() string {
	if m != nil {
		return m.IDEName
	}
	return ""
}

func (m *IDEConfig) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type AddOrgIDEConfigRequest struct {
	OrgID  *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Config *IDEConfig   `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *AddOrgIDEConfigRequest) Reset()      { *m = AddOrgIDEConfigRequest{} }
func (*AddOrgIDEConfigRequest) ProtoMessage() {}
func (*AddOrgIDEConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{25}
}
func (m *AddOrgIDEConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddOrgIDEConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddOrgIDEConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddOrgIDEConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddOrgIDEConfigRequest.Merge(m, src)
}
func (m *AddOrgIDEConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddOrgIDEConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddOrgIDEConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddOrgIDEConfigRequest proto.InternalMessageInfo

func (m *AddOrgIDEConfigRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *AddOrgIDEConfigRequest) GetConfig() *IDEConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type AddOrgIDEConfigResponse struct {
	Config *IDEConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *AddOrgIDEConfigResponse) Reset()      { *m = AddOrgIDEConfigResponse{} }
func (*AddOrgIDEConfigResponse) ProtoMessage() {}
func (*AddOrgIDEConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{26}
}
func (m *AddOrgIDEConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddOrgIDEConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddOrgIDEConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddOrgIDEConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddOrgIDEConfigResponse.Merge(m, src)
}
func (m *AddOrgIDEConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddOrgIDEConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddOrgIDEConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddOrgIDEConfigResponse proto.InternalMessageInfo

func (m *AddOrgIDEConfigResponse) GetConfig() *IDEConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type DeleteOrgIDEConfigRequest struct {
	OrgID   *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	IDEName string       `protobuf:"bytes,2,opt,name=ide_name,json=ideName,proto3" json:"ide_name,omitempty"`
}

func (m *DeleteOrgIDEConfigRequest) Reset()      { *m = DeleteOrgIDEConfigRequest{} }
func (*DeleteOrgIDEConfigRequest) ProtoMessage() {}
func (*DeleteOrgIDEConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{27}
}
func (m *DeleteOrgIDEConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOrgIDEConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOrgIDEConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOrgIDEConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOrgIDEConfigRequest.Merge(m, src)
}
func (m *DeleteOrgIDEConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOrgIDEConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOrgIDEConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOrgIDEConfigRequest proto.InternalMessageInfo

func (m *DeleteOrgIDEConfigRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *DeleteOrgIDEConfigRequest) GetIDEName() string {
	if m != nil {
		return m.IDEName
	}
	return ""
}

type DeleteOrgIDEConfigResponse struct {
}

func (m *DeleteOrgIDEConfigResponse) Reset()      { *m = DeleteOrgIDEConfigResponse{} }
func (*DeleteOrgIDEConfigResponse) ProtoMessage() {}
func (*DeleteOrgIDEConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{28}
}
func (m *DeleteOrgIDEConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOrgIDEConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOrgIDEConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOrgIDEConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOrgIDEConfigResponse.Merge(m, src)
}
func (m *DeleteOrgIDEConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOrgIDEConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOrgIDEConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOrgIDEConfigResponse proto.InternalMessageInfo

type GetOrgIDEConfigsRequest struct {
	OrgID   *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	IDEName string       `protobuf:"bytes,2,opt,name=ide_name,json=ideName,proto3" json:"ide_name,omitempty"`
}

func (m *GetOrgIDEConfigsRequest) Reset()      { *m = GetOrgIDEConfigsRequest{} }
func (*GetOrgIDEConfigsRequest) ProtoMessage() {}
func (*GetOrgIDEConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{29}
}
func (m *GetOrgIDEConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgIDEConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgIDEConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgIDEConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgIDEConfigsRequest.Merge(m, src)
}
func (m *GetOrgIDEConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgIDEConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgIDEConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgIDEConfigsRequest proto.InternalMessageInfo

func (m *GetOrgIDEConfigsRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *GetOrgIDEConfigsRequest) GetIDEName() string {
	if m != nil {
		return m.IDEName
	}
	return ""
}

type GetOrgIDEConfigsResponse struct {
	Configs []*IDEConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (m *GetOrgIDEConfigsResponse) Reset()      { *m = GetOrgIDEConfigsResponse{} }
func (*GetOrgIDEConfigsResponse) ProtoMessage() {}
func (*GetOrgIDEConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b1fc6e171c8059b, []int{30}
}
func (m *GetOrgIDEConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgIDEConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgIDEConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgIDEConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgIDEConfigsResponse.Merge(m, src)
}
func (m *GetOrgIDEConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgIDEConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgIDEConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgIDEConfigsResponse proto.InternalMessageInfo

func (m *GetOrgIDEConfigsResponse) GetConfigs() []*IDEConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "px.services.UserInfo")
	proto.RegisterType((*GetUserByEmailRequest)(nil), "px.services.GetUserByEmailRequest")
	proto.RegisterType((*GetUserByAuthProviderIDRequest)(nil), "px.services.GetUserByAuthProviderIDRequest")
	proto.RegisterType((*OrgInfo)(nil), "px.services.OrgInfo")
	proto.RegisterType((*CreateUserRequest)(nil), "px.services.CreateUserRequest")
	proto.RegisterType((*CreateOrgAndUserRequest)(nil), "px.services.CreateOrgAndUserRequest")
	proto.RegisterType((*CreateOrgAndUserRequest_Org)(nil), "px.services.CreateOrgAndUserRequest.Org")
	proto.RegisterType((*CreateOrgAndUserRequest_User)(nil), "px.services.CreateOrgAndUserRequest.User")
	proto.RegisterType((*CreateOrgAndUserResponse)(nil), "px.services.CreateOrgAndUserResponse")
	proto.RegisterType((*CreateOrgRequest)(nil), "px.services.CreateOrgRequest")
	proto.RegisterType((*GetOrgByNameRequest)(nil), "px.services.GetOrgByNameRequest")
	proto.RegisterType((*GetOrgByDomainRequest)(nil), "px.services.GetOrgByDomainRequest")
	proto.RegisterType((*GetOrgsRequest)(nil), "px.services.GetOrgsRequest")
	proto.RegisterType((*GetOrgsResponse)(nil), "px.services.GetOrgsResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "px.services.UpdateUserRequest")
	proto.RegisterType((*UpdateOrgRequest)(nil), "px.services.UpdateOrgRequest")
	proto.RegisterType((*GetUserSettingsRequest)(nil), "px.services.GetUserSettingsRequest")
	proto.RegisterType((*GetUserSettingsResponse)(nil), "px.services.GetUserSettingsResponse")
	proto.RegisterType((*UpdateUserSettingsRequest)(nil), "px.services.UpdateUserSettingsRequest")
	proto.RegisterType((*UpdateUserSettingsResponse)(nil), "px.services.UpdateUserSettingsResponse")
	proto.RegisterType((*GetUserAttributesRequest)(nil), "px.services.GetUserAttributesRequest")
	proto.RegisterType((*GetUserAttributesResponse)(nil), "px.services.GetUserAttributesResponse")
	proto.RegisterType((*SetUserAttributesRequest)(nil), "px.services.SetUserAttributesRequest")
	proto.RegisterType((*SetUserAttributesResponse)(nil), "px.services.SetUserAttributesResponse")
	proto.RegisterType((*GetUsersInOrgRequest)(nil), "px.services.GetUsersInOrgRequest")
	proto.RegisterType((*GetUsersInOrgResponse)(nil), "px.services.GetUsersInOrgResponse")
	proto.RegisterType((*IDEConfig)(nil), "px.services.IDEConfig")
	proto.RegisterType((*AddOrgIDEConfigRequest)(nil), "px.services.AddOrgIDEConfigRequest")
	proto.RegisterType((*AddOrgIDEConfigResponse)(nil), "px.services.AddOrgIDEConfigResponse")
	proto.RegisterType((*DeleteOrgIDEConfigRequest)(nil), "px.services.DeleteOrgIDEConfigRequest")
	proto.RegisterType((*DeleteOrgIDEConfigResponse)(nil), "px.services.DeleteOrgIDEConfigResponse")
	proto.RegisterType((*GetOrgIDEConfigsRequest)(nil), "px.services.GetOrgIDEConfigsRequest")
	proto.RegisterType((*GetOrgIDEConfigsResponse)(nil), "px.services.GetOrgIDEConfigsResponse")
}

func init() {
	proto.RegisterFile("src/cloud/profile/profilepb/service.proto", fileDescriptor_7b1fc6e171c8059b)
}

var fileDescriptor_7b1fc6e171c8059b = []byte{
	// 1578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x6f, 0x1b, 0xd5,
	0x17, 0xcf, 0x8c, 0x1d, 0x3f, 0x4e, 0xfe, 0xff, 0xc4, 0xb9, 0xb4, 0xa9, 0x33, 0x69, 0xc7, 0x61,
	0xe8, 0x23, 0x51, 0x55, 0x87, 0x86, 0x4a, 0x54, 0x94, 0x0a, 0xec, 0x38, 0x44, 0x4e, 0x11, 0x8e,
	0xc6, 0x4a, 0x17, 0xa8, 0x60, 0x8d, 0x3d, 0x37, 0x93, 0x51, 0x9d, 0x99, 0x61, 0x1e, 0xa5, 0x11,
	0x2c, 0x90, 0x58, 0xb1, 0x63, 0x81, 0x84, 0x58, 0xb1, 0xe5, 0x2b, 0xb0, 0x64, 0x83, 0x58, 0x76,
	0xd9, 0x55, 0x20, 0xee, 0x86, 0x65, 0x3f, 0x02, 0x9a, 0x3b, 0x77, 0xc6, 0xe3, 0x79, 0xf8, 0xd1,
	0x22, 0x56, 0xf1, 0xdc, 0x7b, 0xee, 0x79, 0xfe, 0xee, 0xf9, 0x9d, 0x1b, 0xd8, 0xb4, 0xcc, 0xde,
	0x56, 0xaf, 0xaf, 0x3b, 0xf2, 0x96, 0x61, 0xea, 0x47, 0x6a, 0x1f, 0xfb, 0x7f, 0x8d, 0xee, 0x96,
	0x85, 0xcd, 0x27, 0x6a, 0x0f, 0x57, 0x0d, 0x53, 0xb7, 0x75, 0xb4, 0x60, 0x3c, 0xad, 0xd2, 0x15,
	0x8b, 0xbb, 0xa5, 0xa8, 0xf6, 0xb1, 0xd3, 0xad, 0xf6, 0xf4, 0x93, 0x2d, 0x45, 0x57, 0xf4, 0x2d,
	0x22, 0xd3, 0x75, 0x8e, 0xc8, 0x17, 0xf9, 0x20, 0xbf, 0xbc, 0xb3, 0x1c, 0xaf, 0xe8, 0xba, 0xe2,
	0xe9, 0xf6, 0xa4, 0xbe, 0x34, 0x25, 0xc3, 0xc0, 0xa6, 0x45, 0xf7, 0x2b, 0xae, 0x1b, 0x92, 0xa1,
	0x7a, 0x02, 0x5b, 0x8e, 0xa3, 0xca, 0x46, 0x97, 0xfc, 0xf1, 0x04, 0x84, 0xef, 0x32, 0x50, 0x38,
	0xb4, 0xb0, 0xd9, 0xd4, 0x8e, 0x74, 0x74, 0x03, 0x58, 0x55, 0x2e, 0x33, 0xeb, 0xcc, 0xc6, 0xc2,
	0xf6, 0x52, 0xd5, 0x78, 0x5a, 0xf5, 0xe4, 0xab, 0x87, 0x87, 0xcd, 0x46, 0x3d, 0x37, 0x38, 0xab,
	0xb0, 0xcd, 0x86, 0xc8, 0xaa, 0x32, 0xba, 0x0d, 0x39, 0xdd, 0x54, 0x3a, 0xaa, 0x5c, 0x66, 0x93,
	0x85, 0x8b, 0x83, 0xb3, 0xca, 0x7c, 0xcb, 0x54, 0x9a, 0x0d, 0x71, 0x5e, 0x37, 0x95, 0xa6, 0x8c,
	0x38, 0x28, 0x38, 0x16, 0x36, 0x35, 0xe9, 0x04, 0x97, 0x33, 0xeb, 0xcc, 0x46, 0x51, 0x0c, 0xbe,
	0xd1, 0x15, 0x80, 0x23, 0xd5, 0xb4, 0xec, 0x0e, 0xd9, 0xcd, 0x92, 0xdd, 0x22, 0x59, 0xf9, 0xc4,
	0xdd, 0x5e, 0x83, 0x62, 0x5f, 0xf2, 0x77, 0xe7, 0xbd, 0xb3, 0xee, 0x02, 0xd9, 0xbc, 0x00, 0xf3,
	0xf8, 0x44, 0x52, 0xfb, 0xe5, 0x1c, 0xd9, 0xf0, 0x3e, 0xd0, 0x0d, 0x58, 0xa2, 0xe9, 0xee, 0x18,
	0x6a, 0xcf, 0x76, 0x4c, 0x5c, 0xce, 0x93, 0xfd, 0x45, 0xba, 0x7c, 0xe0, 0xad, 0xa2, 0x0a, 0x2c,
	0xa8, 0x56, 0x47, 0x32, 0x0c, 0x53, 0x7f, 0x82, 0xe5, 0x72, 0x61, 0x9d, 0xd9, 0x28, 0x88, 0xa0,
	0x5a, 0x35, 0xba, 0x82, 0x6e, 0xc2, 0xb2, 0x2a, 0x63, 0xcd, 0x56, 0xed, 0xd3, 0x8e, 0xbb, 0xa4,
	0xca, 0xd8, 0x2c, 0x17, 0x89, 0xae, 0x92, 0xbf, 0x71, 0x40, 0xd7, 0xd1, 0xfb, 0x50, 0x92, 0x1c,
	0xfb, 0x38, 0x10, 0x74, 0x33, 0x04, 0xae, 0x6c, 0x1d, 0x0d, 0xce, 0x2a, 0x8b, 0x35, 0xc7, 0x3e,
	0xf6, 0x65, 0x9b, 0x0d, 0x71, 0x51, 0x0a, 0x7f, 0xcb, 0xc2, 0x2d, 0xb8, 0xb8, 0x87, 0x6d, 0xb7,
	0x1a, 0xf5, 0xd3, 0x5d, 0x37, 0x0c, 0x11, 0x7f, 0xe1, 0x60, 0xcb, 0x1e, 0xc6, 0xc8, 0x84, 0x62,
	0x14, 0x3e, 0x07, 0x3e, 0x10, 0x8f, 0x68, 0xa6, 0xe7, 0x92, 0xdc, 0x61, 0xa6, 0x76, 0xe7, 0x27,
	0x06, 0xf2, 0x6e, 0x09, 0x67, 0x42, 0xc6, 0x2a, 0x14, 0x5c, 0x64, 0x90, 0x52, 0xb1, 0xc4, 0xdb,
	0xbc, 0x6e, 0x2a, 0xa4, 0x52, 0x15, 0x58, 0x90, 0xf5, 0x13, 0x49, 0xd5, 0x3a, 0x21, 0x10, 0x80,
	0xb7, 0x44, 0x04, 0x36, 0xa1, 0x84, 0x35, 0xa9, 0xdb, 0xc7, 0xb4, 0x1e, 0x52, 0xdf, 0x22, 0x60,
	0x28, 0x88, 0x4b, 0xde, 0x7a, 0xcd, 0x5f, 0x16, 0x7e, 0x66, 0x61, 0x79, 0xc7, 0xc4, 0x92, 0x8d,
	0xdd, 0xf8, 0xfd, 0x78, 0x87, 0xb0, 0x64, 0x5e, 0x05, 0x96, 0xec, 0x58, 0x58, 0x66, 0xc6, 0xc2,
	0x32, 0x9b, 0x06, 0xcb, 0xf9, 0x30, 0x2c, 0x13, 0xc1, 0x94, 0x9b, 0x01, 0x4c, 0xf9, 0xa9, 0xab,
	0xf7, 0x6b, 0x06, 0x2e, 0x79, 0x19, 0x6a, 0x99, 0x4a, 0x4d, 0x93, 0xc3, 0x79, 0x7a, 0x0f, 0x32,
	0xba, 0xa9, 0xd0, 0x24, 0x6d, 0x54, 0x43, 0xfd, 0xa7, 0x9a, 0x72, 0xa4, 0xda, 0x32, 0x15, 0xd1,
	0x3d, 0x84, 0xee, 0x43, 0xd6, 0x4d, 0x10, 0xbd, 0xf8, 0x9b, 0x53, 0x1d, 0x26, 0xbf, 0xc9, 0x31,
	0xae, 0x06, 0x99, 0x96, 0xa9, 0x8c, 0xc0, 0x84, 0x19, 0x0b, 0x13, 0x36, 0x0a, 0x13, 0xee, 0x4f,
	0x06, 0xb2, 0xae, 0xc6, 0x91, 0xda, 0x31, 0x63, 0x6b, 0xc7, 0x8e, 0xad, 0x5d, 0x26, 0xad, 0x76,
	0xd9, 0x89, 0xb5, 0x9b, 0x9f, 0xa1, 0x76, 0xb9, 0xa9, 0x6b, 0xf7, 0x2d, 0x03, 0xe5, 0x78, 0x2e,
	0x2d, 0x43, 0xd7, 0x2c, 0xfc, 0x2a, 0x20, 0xbf, 0x03, 0x79, 0x37, 0x31, 0x63, 0xfa, 0x35, 0x0c,
	0xce, 0x2a, 0x39, 0xc2, 0x03, 0x0d, 0x31, 0xe7, 0xca, 0x36, 0x65, 0xa1, 0x0f, 0xa5, 0xc0, 0x09,
	0x1f, 0x39, 0x63, 0xea, 0x76, 0x3f, 0x5e, 0xb7, 0x85, 0xed, 0xcb, 0x55, 0x8f, 0xa0, 0xaa, 0x3e,
	0x41, 0x55, 0xdb, 0xb6, 0xa9, 0x6a, 0xca, 0x43, 0xa9, 0xef, 0xe0, 0x70, 0x55, 0x85, 0x4d, 0x78,
	0x63, 0x0f, 0xdb, 0x2d, 0x53, 0xa9, 0x9f, 0xba, 0xdf, 0xbe, 0x41, 0x04, 0xd9, 0x90, 0x31, 0xf2,
	0x5b, 0xb8, 0x4b, 0xfa, 0x24, 0x11, 0x6d, 0x10, 0x05, 0xbe, 0x70, 0x04, 0x3a, 0x4c, 0x14, 0x3a,
	0x42, 0x09, 0x16, 0xbd, 0x93, 0x16, 0x3d, 0x22, 0xdc, 0x83, 0xa5, 0x60, 0x85, 0x26, 0x78, 0x03,
	0xb2, 0xba, 0xa9, 0x58, 0x65, 0x66, 0x3d, 0xb3, 0xb1, 0xb0, 0x7d, 0x61, 0x04, 0xe1, 0xb4, 0x1f,
	0x8a, 0x44, 0x42, 0xf8, 0x9d, 0x81, 0xe5, 0x43, 0x43, 0x8e, 0x74, 0xa1, 0xa9, 0x7b, 0xe5, 0x2e,
	0x2c, 0xc9, 0xaa, 0x65, 0xf4, 0xa5, 0xd3, 0x80, 0xa4, 0x32, 0x53, 0x64, 0x6d, 0x91, 0x1e, 0xf2,
	0x29, 0xec, 0xde, 0x28, 0x85, 0x65, 0x89, 0x0a, 0x2e, 0xa6, 0xa2, 0xae, 0xeb, 0x7d, 0x9a, 0xf6,
	0x21, 0xbd, 0xed, 0x67, 0x0b, 0x6c, 0x29, 0x23, 0xfc, 0xc6, 0x40, 0xc9, 0x0b, 0x24, 0x54, 0xeb,
	0x19, 0xe2, 0x88, 0xf7, 0x6d, 0x76, 0xa2, 0x17, 0xd1, 0x9e, 0x1e, 0x05, 0x50, 0x66, 0x46, 0x00,
	0xed, 0xc1, 0x0a, 0xa5, 0xc3, 0x36, 0xb6, 0x6d, 0x55, 0x0b, 0x6a, 0x3c, 0x75, 0x20, 0x34, 0x19,
	0x07, 0x70, 0x29, 0xa6, 0x88, 0x42, 0x63, 0x13, 0x4a, 0x92, 0x26, 0xf5, 0x4f, 0x6d, 0xb5, 0x67,
	0x75, 0x74, 0xc3, 0xd6, 0x1d, 0x9b, 0xf8, 0x59, 0x10, 0x97, 0x82, 0xf5, 0x16, 0x59, 0xde, 0xcf,
	0x16, 0x98, 0x12, 0x4b, 0x35, 0xfe, 0xc8, 0xc0, 0xea, 0x10, 0x27, 0xaf, 0xea, 0x9e, 0x9b, 0xe7,
	0x98, 0xf5, 0xc9, 0xd5, 0x4e, 0xf0, 0x8c, 0x2d, 0x65, 0xf6, 0xb3, 0x85, 0x4c, 0x29, 0x2b, 0xdc,
	0x01, 0x2e, 0xc9, 0x31, 0x1a, 0xee, 0x0a, 0xb0, 0xfa, 0x63, 0xe2, 0x59, 0xc1, 0x73, 0xa4, 0xf5,
	0x40, 0x64, 0xf5, 0xc7, 0xc2, 0x0e, 0x94, 0x69, 0x86, 0x6a, 0xb6, 0x6d, 0xaa, 0x5d, 0xc7, 0xc6,
	0x33, 0x47, 0x23, 0xdc, 0x85, 0xd5, 0x04, 0x25, 0xd4, 0xf2, 0x1a, 0x14, 0x6d, 0xdd, 0x31, 0x3b,
	0x16, 0xc6, 0x9a, 0xe7, 0x80, 0x58, 0x70, 0x17, 0xda, 0x18, 0x6b, 0xc2, 0xd7, 0x50, 0x6e, 0xbf,
	0xae, 0x79, 0xf4, 0x6e, 0xd8, 0xc2, 0x64, 0xb4, 0x0e, 0xad, 0xaf, 0xc1, 0x6a, 0x3b, 0xcd, 0x6f,
	0xa1, 0x09, 0x17, 0x68, 0x50, 0x56, 0x53, 0x0b, 0xdd, 0xa5, 0xd9, 0x9b, 0xb6, 0xd0, 0x08, 0xa6,
	0x41, 0x5f, 0x15, 0xcd, 0xcd, 0x4d, 0x98, 0x77, 0x3b, 0xb4, 0xdf, 0xa0, 0x2e, 0x8e, 0x34, 0x28,
	0x7f, 0x96, 0x17, 0x3d, 0x19, 0x61, 0x0f, 0x8a, 0xcd, 0xc6, 0xee, 0x8e, 0xae, 0x1d, 0xa9, 0x0a,
	0xba, 0x0e, 0x05, 0x55, 0xc6, 0xa1, 0xe6, 0x58, 0x5f, 0x18, 0x9c, 0x55, 0xf2, 0xcd, 0xc6, 0x2e,
	0x69, 0xb9, 0x79, 0x55, 0xc6, 0xa4, 0x95, 0x23, 0xc8, 0x1a, 0x92, 0x7d, 0x4c, 0x69, 0x93, 0xfc,
	0x16, 0xbe, 0x82, 0x95, 0x9a, 0x2c, 0x13, 0x0f, 0xa9, 0xba, 0xd7, 0x98, 0xba, 0xaa, 0x90, 0xeb,
	0x11, 0x1d, 0x34, 0xf3, 0x2b, 0x23, 0x31, 0x0c, 0x2d, 0x50, 0x29, 0xa1, 0x09, 0x97, 0x62, 0xc6,
	0x69, 0x36, 0x86, 0xaa, 0x98, 0xa9, 0x54, 0x3d, 0x81, 0xd5, 0x06, 0xee, 0x63, 0xd2, 0xe9, 0xfe,
	0x8d, 0x50, 0xc2, 0x39, 0x65, 0xd3, 0x73, 0x2a, 0x5c, 0x06, 0x2e, 0xc9, 0x2e, 0xc5, 0x8d, 0x4d,
	0x7a, 0x4e, 0x78, 0xcb, 0xfa, 0x0f, 0x7c, 0xfa, 0x98, 0xdc, 0xe3, 0x88, 0x55, 0x9a, 0xd7, 0xb7,
	0x21, 0xef, 0x65, 0xcc, 0xc7, 0x59, 0x5a, 0x62, 0x7d, 0xb1, 0xed, 0xf3, 0x1c, 0x2c, 0x1e, 0x78,
	0xaf, 0xab, 0xb6, 0x27, 0x86, 0xee, 0x03, 0x0c, 0xa7, 0x74, 0xc4, 0x27, 0x0c, 0x8b, 0x21, 0xe2,
	0xe4, 0xa2, 0x91, 0xa1, 0xdb, 0x90, 0xa7, 0x57, 0x00, 0x45, 0xf7, 0xb8, 0x64, 0xd8, 0xa3, 0x07,
	0x84, 0xe1, 0x43, 0x6f, 0x28, 0x24, 0x8c, 0x08, 0x26, 0x3e, 0xb0, 0xd2, 0x94, 0x7d, 0x16, 0x30,
	0x41, 0xf4, 0x85, 0x85, 0x6e, 0x26, 0x6b, 0x4d, 0x7c, 0x87, 0xa5, 0xa9, 0xef, 0x84, 0x06, 0x2c,
	0x3a, 0xe5, 0xa1, 0xab, 0xd3, 0x0c, 0xd4, 0xdc, 0xb5, 0x09, 0x52, 0xb4, 0x86, 0x3b, 0x00, 0xc3,
	0xee, 0x1e, 0x49, 0x7f, 0x6c, 0x6e, 0x49, 0xf3, 0xf2, 0x11, 0x99, 0x90, 0xc2, 0xfc, 0x80, 0xde,
	0x4a, 0x0a, 0x3e, 0x42, 0x6b, 0xdc, 0xd5, 0xf1, 0x42, 0xd4, 0x45, 0x0c, 0x28, 0x4e, 0x40, 0xe8,
	0x7a, 0x8a, 0xab, 0x51, 0x1b, 0x37, 0x26, 0xca, 0x51, 0x33, 0x5d, 0x58, 0x8e, 0x91, 0x0d, 0xba,
	0x96, 0xe4, 0x61, 0x8c, 0x52, 0xb8, 0xeb, 0x93, 0xc4, 0x86, 0x36, 0xda, 0x13, 0x6c, 0xb4, 0xa7,
	0xb3, 0x91, 0xca, 0x2f, 0xdb, 0x3f, 0xe4, 0x00, 0x5a, 0xa6, 0xe2, 0xdf, 0xaf, 0x2d, 0xc8, 0x79,
	0x17, 0x38, 0x7e, 0x3f, 0x12, 0xe7, 0x56, 0xf4, 0x11, 0xfc, 0x2f, 0x3c, 0x65, 0xa3, 0xf5, 0x68,
	0x6c, 0xd1, 0x01, 0x3c, 0x45, 0xcf, 0xbe, 0x3f, 0x48, 0xfb, 0x23, 0x78, 0xfc, 0x9a, 0xc5, 0xe7,
	0xf3, 0x14, 0x5d, 0x1f, 0x42, 0x31, 0x98, 0x3d, 0xd1, 0x95, 0x84, 0x8a, 0x0e, 0x79, 0x34, 0x45,
	0xc3, 0x3d, 0x28, 0x06, 0x77, 0x20, 0xa2, 0x21, 0xfa, 0x82, 0x89, 0x37, 0x99, 0x06, 0x69, 0x32,
	0xee, 0x0b, 0x00, 0xad, 0x25, 0xc4, 0x10, 0x94, 0xe8, 0x72, 0xf2, 0x26, 0x2d, 0xfe, 0x43, 0xf8,
	0xff, 0x08, 0x5b, 0xa3, 0x37, 0x93, 0x50, 0x33, 0x32, 0x14, 0x70, 0xc2, 0x38, 0x11, 0xaa, 0xf7,
	0x11, 0x2c, 0x45, 0x98, 0x2f, 0x72, 0xfb, 0x92, 0x49, 0x39, 0x72, 0xfb, 0xd2, 0xc8, 0x13, 0x03,
	0x8a, 0x93, 0x52, 0xe4, 0xf6, 0xa5, 0xb2, 0x65, 0xe4, 0xf6, 0xa5, 0xb3, 0x9b, 0xdb, 0xe8, 0xa2,
	0x3c, 0x83, 0xae, 0x26, 0xa4, 0x33, 0x46, 0x7e, 0xdc, 0xb5, 0x09, 0x52, 0x9e, 0x81, 0xfa, 0x07,
	0xcf, 0xce, 0xf9, 0xb9, 0xe7, 0xe7, 0xfc, 0xdc, 0xcb, 0x73, 0x9e, 0xf9, 0x66, 0xc0, 0x33, 0xbf,
	0x0c, 0x78, 0xe6, 0x8f, 0x01, 0xcf, 0x3c, 0x1b, 0xf0, 0xcc, 0x5f, 0x03, 0x9e, 0xf9, 0x7b, 0xc0,
	0xcf, 0xbd, 0x1c, 0xf0, 0xcc, 0xf7, 0x2f, 0xf8, 0xb9, 0x67, 0x2f, 0xf8, 0xb9, 0xe7, 0x2f, 0xf8,
	0xb9, 0x4f, 0x8b, 0xc1, 0x7f, 0x64, 0xbb, 0x39, 0x32, 0xf2, 0xbd, 0xf3, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xcf, 0xf4, 0x7c, 0x77, 0xb7, 0x15, 0x00, 0x00,
}

func (this *UserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserInfo)
	if !ok {
		that2, ok := that.(UserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.ProfilePicture != that1.ProfilePicture {
		return false
	}
	if this.IsApproved != that1.IsApproved {
		return false
	}
	if this.IdentityProvider != that1.IdentityProvider {
		return false
	}
	if this.AuthProviderID != that1.AuthProviderID {
		return false
	}
	return true
}
func (this *GetUserByEmailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserByEmailRequest)
	if !ok {
		that2, ok := that.(GetUserByEmailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *GetUserByAuthProviderIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserByAuthProviderIDRequest)
	if !ok {
		that2, ok := that.(GetUserByAuthProviderIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthProviderID != that1.AuthProviderID {
		return false
	}
	return true
}
func (this *OrgInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrgInfo)
	if !ok {
		that2, ok := that.(OrgInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.OrgName != that1.OrgName {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	if this.EnableApprovals != that1.EnableApprovals {
		return false
	}
	return true
}
func (this *CreateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateUserRequest)
	if !ok {
		that2, ok := that.(CreateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.IdentityProvider != that1.IdentityProvider {
		return false
	}
	if this.AuthProviderID != that1.AuthProviderID {
		return false
	}
	return true
}
func (this *CreateOrgAndUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrgAndUserRequest)
	if !ok {
		that2, ok := that.(CreateOrgAndUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Org.Equal(that1.Org) {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *CreateOrgAndUserRequest_Org) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrgAndUserRequest_Org)
	if !ok {
		that2, ok := that.(CreateOrgAndUserRequest_Org)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgName != that1.OrgName {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	return true
}
func (this *CreateOrgAndUserRequest_User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrgAndUserRequest_User)
	if !ok {
		that2, ok := that.(CreateOrgAndUserRequest_User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.IdentityProvider != that1.IdentityProvider {
		return false
	}
	if this.AuthProviderID != that1.AuthProviderID {
		return false
	}
	return true
}
func (this *CreateOrgAndUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrgAndUserResponse)
	if !ok {
		that2, ok := that.(CreateOrgAndUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	return true
}
func (this *CreateOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrgRequest)
	if !ok {
		that2, ok := that.(CreateOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgName != that1.OrgName {
		return false
	}
	if !this.DomainName.Equal(that1.DomainName) {
		return false
	}
	return true
}
func (this *GetOrgByNameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgByNameRequest)
	if !ok {
		that2, ok := that.(GetOrgByNameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetOrgByDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgByDomainRequest)
	if !ok {
		that2, ok := that.(GetOrgByDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	return true
}
func (this *GetOrgsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgsRequest)
	if !ok {
		that2, ok := that.(GetOrgsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetOrgsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgsResponse)
	if !ok {
		that2, ok := that.(GetOrgsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Orgs) != len(that1.Orgs) {
		return false
	}
	for i := range this.Orgs {
		if !this.Orgs[i].Equal(that1.Orgs[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.DisplayPicture.Equal(that1.DisplayPicture) {
		return false
	}
	if !this.IsApproved.Equal(that1.IsApproved) {
		return false
	}
	return true
}
func (this *UpdateOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrgRequest)
	if !ok {
		that2, ok := that.(UpdateOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.EnableApprovals.Equal(that1.EnableApprovals) {
		return false
	}
	if !this.DomainName.Equal(that1.DomainName) {
		return false
	}
	return true
}
func (this *GetUserSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserSettingsRequest)
	if !ok {
		that2, ok := that.(GetUserSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetUserSettingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserSettingsResponse)
	if !ok {
		that2, ok := that.(GetUserSettingsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AnalyticsOptout != that1.AnalyticsOptout {
		return false
	}
	return true
}
func (this *UpdateUserSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserSettingsRequest)
	if !ok {
		that2, ok := that.(UpdateUserSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.AnalyticsOptout.Equal(that1.AnalyticsOptout) {
		return false
	}
	return true
}
func (this *UpdateUserSettingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserSettingsResponse)
	if !ok {
		that2, ok := that.(UpdateUserSettingsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OK != that1.OK {
		return false
	}
	return true
}
func (this *GetUserAttributesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserAttributesRequest)
	if !ok {
		that2, ok := that.(GetUserAttributesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetUserAttributesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserAttributesResponse)
	if !ok {
		that2, ok := that.(GetUserAttributesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TourSeen != that1.TourSeen {
		return false
	}
	return true
}
func (this *SetUserAttributesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetUserAttributesRequest)
	if !ok {
		that2, ok := that.(SetUserAttributesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.TourSeen.Equal(that1.TourSeen) {
		return false
	}
	return true
}
func (this *SetUserAttributesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetUserAttributesResponse)
	if !ok {
		that2, ok := that.(SetUserAttributesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetUsersInOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUsersInOrgRequest)
	if !ok {
		that2, ok := that.(GetUsersInOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetUsersInOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUsersInOrgResponse)
	if !ok {
		that2, ok := that.(GetUsersInOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *IDEConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IDEConfig)
	if !ok {
		that2, ok := that.(IDEConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDEName != that1.IDEName {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *AddOrgIDEConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddOrgIDEConfigRequest)
	if !ok {
		that2, ok := that.(AddOrgIDEConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *AddOrgIDEConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddOrgIDEConfigResponse)
	if !ok {
		that2, ok := that.(AddOrgIDEConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *DeleteOrgIDEConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteOrgIDEConfigRequest)
	if !ok {
		that2, ok := that.(DeleteOrgIDEConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.IDEName != that1.IDEName {
		return false
	}
	return true
}
func (this *DeleteOrgIDEConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteOrgIDEConfigResponse)
	if !ok {
		that2, ok := that.(DeleteOrgIDEConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetOrgIDEConfigsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgIDEConfigsRequest)
	if !ok {
		that2, ok := that.(GetOrgIDEConfigsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.IDEName != that1.IDEName {
		return false
	}
	return true
}
func (this *GetOrgIDEConfigsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgIDEConfigsResponse)
	if !ok {
		that2, ok := that.(GetOrgIDEConfigsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	return true
}
func (this *UserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&profilepb.UserInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "ProfilePicture: "+fmt.Sprintf("%#v", this.ProfilePicture)+",\n")
	s = append(s, "IsApproved: "+fmt.Sprintf("%#v", this.IsApproved)+",\n")
	s = append(s, "IdentityProvider: "+fmt.Sprintf("%#v", this.IdentityProvider)+",\n")
	s = append(s, "AuthProviderID: "+fmt.Sprintf("%#v", this.AuthProviderID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserByEmailRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetUserByEmailRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserByAuthProviderIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetUserByAuthProviderIDRequest{")
	s = append(s, "AuthProviderID: "+fmt.Sprintf("%#v", this.AuthProviderID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrgInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&profilepb.OrgInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "OrgName: "+fmt.Sprintf("%#v", this.OrgName)+",\n")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	s = append(s, "EnableApprovals: "+fmt.Sprintf("%#v", this.EnableApprovals)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&profilepb.CreateUserRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "IdentityProvider: "+fmt.Sprintf("%#v", this.IdentityProvider)+",\n")
	s = append(s, "AuthProviderID: "+fmt.Sprintf("%#v", this.AuthProviderID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrgAndUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.CreateOrgAndUserRequest{")
	if this.Org != nil {
		s = append(s, "Org: "+fmt.Sprintf("%#v", this.Org)+",\n")
	}
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrgAndUserRequest_Org) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.CreateOrgAndUserRequest_Org{")
	s = append(s, "OrgName: "+fmt.Sprintf("%#v", this.OrgName)+",\n")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrgAndUserRequest_User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&profilepb.CreateOrgAndUserRequest_User{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "IdentityProvider: "+fmt.Sprintf("%#v", this.IdentityProvider)+",\n")
	s = append(s, "AuthProviderID: "+fmt.Sprintf("%#v", this.AuthProviderID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrgAndUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.CreateOrgAndUserResponse{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	if this.UserID != nil {
		s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.CreateOrgRequest{")
	s = append(s, "OrgName: "+fmt.Sprintf("%#v", this.OrgName)+",\n")
	if this.DomainName != nil {
		s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgByNameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetOrgByNameRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgByDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetOrgByDomainRequest{")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&profilepb.GetOrgsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetOrgsResponse{")
	if this.Orgs != nil {
		s = append(s, "Orgs: "+fmt.Sprintf("%#v", this.Orgs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&profilepb.UpdateUserRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.DisplayPicture != nil {
		s = append(s, "DisplayPicture: "+fmt.Sprintf("%#v", this.DisplayPicture)+",\n")
	}
	if this.IsApproved != nil {
		s = append(s, "IsApproved: "+fmt.Sprintf("%#v", this.IsApproved)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&profilepb.UpdateOrgRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.EnableApprovals != nil {
		s = append(s, "EnableApprovals: "+fmt.Sprintf("%#v", this.EnableApprovals)+",\n")
	}
	if this.DomainName != nil {
		s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserSettingsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetUserSettingsRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserSettingsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetUserSettingsResponse{")
	s = append(s, "AnalyticsOptout: "+fmt.Sprintf("%#v", this.AnalyticsOptout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserSettingsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.UpdateUserSettingsRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.AnalyticsOptout != nil {
		s = append(s, "AnalyticsOptout: "+fmt.Sprintf("%#v", this.AnalyticsOptout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserSettingsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.UpdateUserSettingsResponse{")
	s = append(s, "OK: "+fmt.Sprintf("%#v", this.OK)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserAttributesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetUserAttributesRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserAttributesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetUserAttributesResponse{")
	s = append(s, "TourSeen: "+fmt.Sprintf("%#v", this.TourSeen)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetUserAttributesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.SetUserAttributesRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.TourSeen != nil {
		s = append(s, "TourSeen: "+fmt.Sprintf("%#v", this.TourSeen)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetUserAttributesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&profilepb.SetUserAttributesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUsersInOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetUsersInOrgRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUsersInOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetUsersInOrgResponse{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IDEConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.IDEConfig{")
	s = append(s, "IDEName: "+fmt.Sprintf("%#v", this.IDEName)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddOrgIDEConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.AddOrgIDEConfigRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddOrgIDEConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.AddOrgIDEConfigResponse{")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteOrgIDEConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.DeleteOrgIDEConfigRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "IDEName: "+fmt.Sprintf("%#v", this.IDEName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteOrgIDEConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&profilepb.DeleteOrgIDEConfigResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgIDEConfigsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&profilepb.GetOrgIDEConfigsRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "IDEName: "+fmt.Sprintf("%#v", this.IDEName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgIDEConfigsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&profilepb.GetOrgIDEConfigsResponse{")
	if this.Configs != nil {
		s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*uuidpb.UUID, error)
	GetUser(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserByAuthProviderID(ctx context.Context, in *GetUserByAuthProviderIDRequest, opts ...grpc.CallOption) (*UserInfo, error)
	CreateOrgAndUser(ctx context.Context, in *CreateOrgAndUserRequest, opts ...grpc.CallOption) (*CreateOrgAndUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserSettings(ctx context.Context, in *GetUserSettingsRequest, opts ...grpc.CallOption) (*GetUserSettingsResponse, error)
	UpdateUserSettings(ctx context.Context, in *UpdateUserSettingsRequest, opts ...grpc.CallOption) (*UpdateUserSettingsResponse, error)
	GetUserAttributes(ctx context.Context, in *GetUserAttributesRequest, opts ...grpc.CallOption) (*GetUserAttributesResponse, error)
	SetUserAttributes(ctx context.Context, in *SetUserAttributesRequest, opts ...grpc.CallOption) (*SetUserAttributesResponse, error)
}

type profileServiceClient struct {
	cc *grpc.ClientConn
}

func NewProfileServiceClient(cc *grpc.ClientConn) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*uuidpb.UUID, error) {
	out := new(uuidpb.UUID)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUser(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserByAuthProviderID(ctx context.Context, in *GetUserByAuthProviderIDRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/GetUserByAuthProviderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CreateOrgAndUser(ctx context.Context, in *CreateOrgAndUserRequest, opts ...grpc.CallOption) (*CreateOrgAndUserResponse, error) {
	out := new(CreateOrgAndUserResponse)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/CreateOrgAndUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserSettings(ctx context.Context, in *GetUserSettingsRequest, opts ...grpc.CallOption) (*GetUserSettingsResponse, error) {
	out := new(GetUserSettingsResponse)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/GetUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateUserSettings(ctx context.Context, in *UpdateUserSettingsRequest, opts ...grpc.CallOption) (*UpdateUserSettingsResponse, error) {
	out := new(UpdateUserSettingsResponse)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/UpdateUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserAttributes(ctx context.Context, in *GetUserAttributesRequest, opts ...grpc.CallOption) (*GetUserAttributesResponse, error) {
	out := new(GetUserAttributesResponse)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/GetUserAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetUserAttributes(ctx context.Context, in *SetUserAttributesRequest, opts ...grpc.CallOption) (*SetUserAttributesResponse, error) {
	out := new(SetUserAttributesResponse)
	err := c.cc.Invoke(ctx, "/px.services.ProfileService/SetUserAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
type ProfileServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*uuidpb.UUID, error)
	GetUser(context.Context, *uuidpb.UUID) (*UserInfo, error)
	GetUserByEmail(context.Context, *GetUserByEmailRequest) (*UserInfo, error)
	GetUserByAuthProviderID(context.Context, *GetUserByAuthProviderIDRequest) (*UserInfo, error)
	CreateOrgAndUser(context.Context, *CreateOrgAndUserRequest) (*CreateOrgAndUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserInfo, error)
	GetUserSettings(context.Context, *GetUserSettingsRequest) (*GetUserSettingsResponse, error)
	UpdateUserSettings(context.Context, *UpdateUserSettingsRequest) (*UpdateUserSettingsResponse, error)
	GetUserAttributes(context.Context, *GetUserAttributesRequest) (*GetUserAttributesResponse, error)
	SetUserAttributes(context.Context, *SetUserAttributesRequest) (*SetUserAttributesResponse, error)
}

// UnimplementedProfileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (*UnimplementedProfileServiceServer) CreateUser(ctx context.Context, req *CreateUserRequest) (*uuidpb.UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedProfileServiceServer) GetUser(ctx context.Context, req *uuidpb.UUID) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedProfileServiceServer) GetUserByEmail(ctx context.Context, req *GetUserByEmailRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (*UnimplementedProfileServiceServer) GetUserByAuthProviderID(ctx context.Context, req *GetUserByAuthProviderIDRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAuthProviderID not implemented")
}
func (*UnimplementedProfileServiceServer) CreateOrgAndUser(ctx context.Context, req *CreateOrgAndUserRequest) (*CreateOrgAndUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgAndUser not implemented")
}
func (*UnimplementedProfileServiceServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedProfileServiceServer) GetUserSettings(ctx context.Context, req *GetUserSettingsRequest) (*GetUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSettings not implemented")
}
func (*UnimplementedProfileServiceServer) UpdateUserSettings(ctx context.Context, req *UpdateUserSettingsRequest) (*UpdateUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSettings not implemented")
}
func (*UnimplementedProfileServiceServer) GetUserAttributes(ctx context.Context, req *GetUserAttributesRequest) (*GetUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAttributes not implemented")
}
func (*UnimplementedProfileServiceServer) SetUserAttributes(ctx context.Context, req *SetUserAttributesRequest) (*SetUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserAttributes not implemented")
}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uuidpb.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUser(ctx, req.(*uuidpb.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserByEmail(ctx, req.(*GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserByAuthProviderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByAuthProviderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserByAuthProviderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/GetUserByAuthProviderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserByAuthProviderID(ctx, req.(*GetUserByAuthProviderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CreateOrgAndUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgAndUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateOrgAndUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/CreateOrgAndUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateOrgAndUser(ctx, req.(*CreateOrgAndUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/GetUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserSettings(ctx, req.(*GetUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/UpdateUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateUserSettings(ctx, req.(*UpdateUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/GetUserAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserAttributes(ctx, req.(*GetUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ProfileService/SetUserAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetUserAttributes(ctx, req.(*SetUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.services.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _ProfileService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ProfileService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _ProfileService_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUserByAuthProviderID",
			Handler:    _ProfileService_GetUserByAuthProviderID_Handler,
		},
		{
			MethodName: "CreateOrgAndUser",
			Handler:    _ProfileService_CreateOrgAndUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ProfileService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUserSettings",
			Handler:    _ProfileService_GetUserSettings_Handler,
		},
		{
			MethodName: "UpdateUserSettings",
			Handler:    _ProfileService_UpdateUserSettings_Handler,
		},
		{
			MethodName: "GetUserAttributes",
			Handler:    _ProfileService_GetUserAttributes_Handler,
		},
		{
			MethodName: "SetUserAttributes",
			Handler:    _ProfileService_SetUserAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/profile/profilepb/service.proto",
}

// OrgServiceClient is the client API for OrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrgServiceClient interface {
	GetOrg(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*OrgInfo, error)
	GetOrgByName(ctx context.Context, in *GetOrgByNameRequest, opts ...grpc.CallOption) (*OrgInfo, error)
	GetOrgByDomain(ctx context.Context, in *GetOrgByDomainRequest, opts ...grpc.CallOption) (*OrgInfo, error)
	UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*OrgInfo, error)
	CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*uuidpb.UUID, error)
	GetOrgs(ctx context.Context, in *GetOrgsRequest, opts ...grpc.CallOption) (*GetOrgsResponse, error)
	GetUsersInOrg(ctx context.Context, in *GetUsersInOrgRequest, opts ...grpc.CallOption) (*GetUsersInOrgResponse, error)
	AddOrgIDEConfig(ctx context.Context, in *AddOrgIDEConfigRequest, opts ...grpc.CallOption) (*AddOrgIDEConfigResponse, error)
	DeleteOrgIDEConfig(ctx context.Context, in *DeleteOrgIDEConfigRequest, opts ...grpc.CallOption) (*DeleteOrgIDEConfigResponse, error)
	GetOrgIDEConfigs(ctx context.Context, in *GetOrgIDEConfigsRequest, opts ...grpc.CallOption) (*GetOrgIDEConfigsResponse, error)
}

type orgServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrgServiceClient(cc *grpc.ClientConn) OrgServiceClient {
	return &orgServiceClient{cc}
}

func (c *orgServiceClient) GetOrg(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*OrgInfo, error) {
	out := new(OrgInfo)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrgByName(ctx context.Context, in *GetOrgByNameRequest, opts ...grpc.CallOption) (*OrgInfo, error) {
	out := new(OrgInfo)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/GetOrgByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrgByDomain(ctx context.Context, in *GetOrgByDomainRequest, opts ...grpc.CallOption) (*OrgInfo, error) {
	out := new(OrgInfo)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/GetOrgByDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*OrgInfo, error) {
	out := new(OrgInfo)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*uuidpb.UUID, error) {
	out := new(uuidpb.UUID)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrgs(ctx context.Context, in *GetOrgsRequest, opts ...grpc.CallOption) (*GetOrgsResponse, error) {
	out := new(GetOrgsResponse)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/GetOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetUsersInOrg(ctx context.Context, in *GetUsersInOrgRequest, opts ...grpc.CallOption) (*GetUsersInOrgResponse, error) {
	out := new(GetUsersInOrgResponse)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/GetUsersInOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) AddOrgIDEConfig(ctx context.Context, in *AddOrgIDEConfigRequest, opts ...grpc.CallOption) (*AddOrgIDEConfigResponse, error) {
	out := new(AddOrgIDEConfigResponse)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/AddOrgIDEConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) DeleteOrgIDEConfig(ctx context.Context, in *DeleteOrgIDEConfigRequest, opts ...grpc.CallOption) (*DeleteOrgIDEConfigResponse, error) {
	out := new(DeleteOrgIDEConfigResponse)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/DeleteOrgIDEConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrgIDEConfigs(ctx context.Context, in *GetOrgIDEConfigsRequest, opts ...grpc.CallOption) (*GetOrgIDEConfigsResponse, error) {
	out := new(GetOrgIDEConfigsResponse)
	err := c.cc.Invoke(ctx, "/px.services.OrgService/GetOrgIDEConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServiceServer is the server API for OrgService service.
type OrgServiceServer interface {
	GetOrg(context.Context, *uuidpb.UUID) (*OrgInfo, error)
	GetOrgByName(context.Context, *GetOrgByNameRequest) (*OrgInfo, error)
	GetOrgByDomain(context.Context, *GetOrgByDomainRequest) (*OrgInfo, error)
	UpdateOrg(context.Context, *UpdateOrgRequest) (*OrgInfo, error)
	CreateOrg(context.Context, *CreateOrgRequest) (*uuidpb.UUID, error)
	GetOrgs(context.Context, *GetOrgsRequest) (*GetOrgsResponse, error)
	GetUsersInOrg(context.Context, *GetUsersInOrgRequest) (*GetUsersInOrgResponse, error)
	AddOrgIDEConfig(context.Context, *AddOrgIDEConfigRequest) (*AddOrgIDEConfigResponse, error)
	DeleteOrgIDEConfig(context.Context, *DeleteOrgIDEConfigRequest) (*DeleteOrgIDEConfigResponse, error)
	GetOrgIDEConfigs(context.Context, *GetOrgIDEConfigsRequest) (*GetOrgIDEConfigsResponse, error)
}

// UnimplementedOrgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrgServiceServer struct {
}

func (*UnimplementedOrgServiceServer) GetOrg(ctx context.Context, req *uuidpb.UUID) (*OrgInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (*UnimplementedOrgServiceServer) GetOrgByName(ctx context.Context, req *GetOrgByNameRequest) (*OrgInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByName not implemented")
}
func (*UnimplementedOrgServiceServer) GetOrgByDomain(ctx context.Context, req *GetOrgByDomainRequest) (*OrgInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByDomain not implemented")
}
func (*UnimplementedOrgServiceServer) UpdateOrg(ctx context.Context, req *UpdateOrgRequest) (*OrgInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (*UnimplementedOrgServiceServer) CreateOrg(ctx context.Context, req *CreateOrgRequest) (*uuidpb.UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (*UnimplementedOrgServiceServer) GetOrgs(ctx context.Context, req *GetOrgsRequest) (*GetOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgs not implemented")
}
func (*UnimplementedOrgServiceServer) GetUsersInOrg(ctx context.Context, req *GetUsersInOrgRequest) (*GetUsersInOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersInOrg not implemented")
}
func (*UnimplementedOrgServiceServer) AddOrgIDEConfig(ctx context.Context, req *AddOrgIDEConfigRequest) (*AddOrgIDEConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgIDEConfig not implemented")
}
func (*UnimplementedOrgServiceServer) DeleteOrgIDEConfig(ctx context.Context, req *DeleteOrgIDEConfigRequest) (*DeleteOrgIDEConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrgIDEConfig not implemented")
}
func (*UnimplementedOrgServiceServer) GetOrgIDEConfigs(ctx context.Context, req *GetOrgIDEConfigsRequest) (*GetOrgIDEConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIDEConfigs not implemented")
}

func RegisterOrgServiceServer(s *grpc.Server, srv OrgServiceServer) {
	s.RegisterService(&_OrgService_serviceDesc, srv)
}

func _OrgService_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uuidpb.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetOrg(ctx, req.(*uuidpb.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_GetOrgByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetOrgByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/GetOrgByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetOrgByName(ctx, req.(*GetOrgByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_GetOrgByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetOrgByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/GetOrgByDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetOrgByDomain(ctx, req.(*GetOrgByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).UpdateOrg(ctx, req.(*UpdateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).CreateOrg(ctx, req.(*CreateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_GetOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/GetOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetOrgs(ctx, req.(*GetOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_GetUsersInOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersInOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetUsersInOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/GetUsersInOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetUsersInOrg(ctx, req.(*GetUsersInOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_AddOrgIDEConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgIDEConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).AddOrgIDEConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/AddOrgIDEConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).AddOrgIDEConfig(ctx, req.(*AddOrgIDEConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_DeleteOrgIDEConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrgIDEConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).DeleteOrgIDEConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/DeleteOrgIDEConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).DeleteOrgIDEConfig(ctx, req.(*DeleteOrgIDEConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_GetOrgIDEConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIDEConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetOrgIDEConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.OrgService/GetOrgIDEConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetOrgIDEConfigs(ctx, req.(*GetOrgIDEConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.services.OrgService",
	HandlerType: (*OrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrg",
			Handler:    _OrgService_GetOrg_Handler,
		},
		{
			MethodName: "GetOrgByName",
			Handler:    _OrgService_GetOrgByName_Handler,
		},
		{
			MethodName: "GetOrgByDomain",
			Handler:    _OrgService_GetOrgByDomain_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _OrgService_UpdateOrg_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _OrgService_CreateOrg_Handler,
		},
		{
			MethodName: "GetOrgs",
			Handler:    _OrgService_GetOrgs_Handler,
		},
		{
			MethodName: "GetUsersInOrg",
			Handler:    _OrgService_GetUsersInOrg_Handler,
		},
		{
			MethodName: "AddOrgIDEConfig",
			Handler:    _OrgService_AddOrgIDEConfig_Handler,
		},
		{
			MethodName: "DeleteOrgIDEConfig",
			Handler:    _OrgService_DeleteOrgIDEConfig_Handler,
		},
		{
			MethodName: "GetOrgIDEConfigs",
			Handler:    _OrgService_GetOrgIDEConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/profile/profilepb/service.proto",
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthProviderID) > 0 {
		i -= len(m.AuthProviderID)
		copy(dAtA[i:], m.AuthProviderID)
		i = encodeVarintService(dAtA, i, uint64(len(m.AuthProviderID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.IdentityProvider) > 0 {
		i -= len(m.IdentityProvider)
		copy(dAtA[i:], m.IdentityProvider)
		i = encodeVarintService(dAtA, i, uint64(len(m.IdentityProvider)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsApproved {
		i--
		if m.IsApproved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.ProfilePicture) > 0 {
		i -= len(m.ProfilePicture)
		copy(dAtA[i:], m.ProfilePicture)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProfilePicture)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserByEmailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByEmailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserByEmailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserByAuthProviderIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByAuthProviderIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserByAuthProviderIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthProviderID) > 0 {
		i -= len(m.AuthProviderID)
		copy(dAtA[i:], m.AuthProviderID)
		i = encodeVarintService(dAtA, i, uint64(len(m.AuthProviderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrgInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrgInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrgInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableApprovals {
		i--
		if m.EnableApprovals {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintService(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrgName) > 0 {
		i -= len(m.OrgName)
		copy(dAtA[i:], m.OrgName)
		i = encodeVarintService(dAtA, i, uint64(len(m.OrgName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthProviderID) > 0 {
		i -= len(m.AuthProviderID)
		copy(dAtA[i:], m.AuthProviderID)
		i = encodeVarintService(dAtA, i, uint64(len(m.AuthProviderID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IdentityProvider) > 0 {
		i -= len(m.IdentityProvider)
		copy(dAtA[i:], m.IdentityProvider)
		i = encodeVarintService(dAtA, i, uint64(len(m.IdentityProvider)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrgAndUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrgAndUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrgAndUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Org != nil {
		{
			size, err := m.Org.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrgAndUserRequest_Org) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrgAndUserRequest_Org) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrgAndUserRequest_Org) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintService(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgName) > 0 {
		i -= len(m.OrgName)
		copy(dAtA[i:], m.OrgName)
		i = encodeVarintService(dAtA, i, uint64(len(m.OrgName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrgAndUserRequest_User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrgAndUserRequest_User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrgAndUserRequest_User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthProviderID) > 0 {
		i -= len(m.AuthProviderID)
		copy(dAtA[i:], m.AuthProviderID)
		i = encodeVarintService(dAtA, i, uint64(len(m.AuthProviderID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IdentityProvider) > 0 {
		i -= len(m.IdentityProvider)
		copy(dAtA[i:], m.IdentityProvider)
		i = encodeVarintService(dAtA, i, uint64(len(m.IdentityProvider)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrgAndUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrgAndUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrgAndUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserID != nil {
		{
			size, err := m.UserID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DomainName != nil {
		{
			size, err := m.DomainName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgName) > 0 {
		i -= len(m.OrgName)
		copy(dAtA[i:], m.OrgName)
		i = encodeVarintService(dAtA, i, uint64(len(m.OrgName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgByDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgByDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgByDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintService(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetOrgsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orgs) > 0 {
		for iNdEx := len(m.Orgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsApproved != nil {
		{
			size, err := m.IsApproved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DisplayPicture != nil {
		{
			size, err := m.DisplayPicture.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DomainName != nil {
		{
			size, err := m.DomainName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EnableApprovals != nil {
		{
			size, err := m.EnableApprovals.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserSettingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserSettingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserSettingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserSettingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnalyticsOptout {
		i--
		if m.AnalyticsOptout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserSettingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnalyticsOptout != nil {
		{
			size, err := m.AnalyticsOptout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserSettingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserSettingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserSettingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OK {
		i--
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserAttributesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TourSeen {
		i--
		if m.TourSeen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetUserAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUserAttributesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TourSeen != nil {
		{
			size, err := m.TourSeen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetUserAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUserAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetUsersInOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersInOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsersInOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUsersInOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersInOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsersInOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IDEConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDEConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDEConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintService(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IDEName) > 0 {
		i -= len(m.IDEName)
		copy(dAtA[i:], m.IDEName)
		i = encodeVarintService(dAtA, i, uint64(len(m.IDEName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddOrgIDEConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOrgIDEConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddOrgIDEConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddOrgIDEConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOrgIDEConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddOrgIDEConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteOrgIDEConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOrgIDEConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteOrgIDEConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDEName) > 0 {
		i -= len(m.IDEName)
		copy(dAtA[i:], m.IDEName)
		i = encodeVarintService(dAtA, i, uint64(len(m.IDEName)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteOrgIDEConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOrgIDEConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteOrgIDEConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetOrgIDEConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgIDEConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgIDEConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDEName) > 0 {
		i -= len(m.IDEName)
		copy(dAtA[i:], m.IDEName)
		i = encodeVarintService(dAtA, i, uint64(len(m.IDEName)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgIDEConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgIDEConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgIDEConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProfilePicture)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.IsApproved {
		n += 2
	}
	l = len(m.IdentityProvider)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AuthProviderID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUserByEmailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUserByAuthProviderIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthProviderID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *OrgInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.EnableApprovals {
		n += 2
	}
	return n
}

func (m *CreateUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.IdentityProvider)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AuthProviderID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateOrgAndUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Org != nil {
		l = m.Org.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateOrgAndUserRequest_Org) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateOrgAndUserRequest_User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.IdentityProvider)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AuthProviderID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateOrgAndUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.DomainName != nil {
		l = m.DomainName.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetOrgByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetOrgByDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetOrgsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetOrgsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orgs) > 0 {
		for _, e := range m.Orgs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.DisplayPicture != nil {
		l = m.DisplayPicture.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.IsApproved != nil {
		l = m.IsApproved.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UpdateOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.EnableApprovals != nil {
		l = m.EnableApprovals.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.DomainName != nil {
		l = m.DomainName.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUserSettingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUserSettingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnalyticsOptout {
		n += 2
	}
	return n
}

func (m *UpdateUserSettingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.AnalyticsOptout != nil {
		l = m.AnalyticsOptout.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UpdateUserSettingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	return n
}

func (m *GetUserAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUserAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TourSeen {
		n += 2
	}
	return n
}

func (m *SetUserAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.TourSeen != nil {
		l = m.TourSeen.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SetUserAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetUsersInOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUsersInOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *IDEConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDEName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AddOrgIDEConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AddOrgIDEConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DeleteOrgIDEConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.IDEName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DeleteOrgIDEConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetOrgIDEConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.IDEName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetOrgIDEConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`ProfilePicture:` + fmt.Sprintf("%v", this.ProfilePicture) + `,`,
		`IsApproved:` + fmt.Sprintf("%v", this.IsApproved) + `,`,
		`IdentityProvider:` + fmt.Sprintf("%v", this.IdentityProvider) + `,`,
		`AuthProviderID:` + fmt.Sprintf("%v", this.AuthProviderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserByEmailRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserByEmailRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserByAuthProviderIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserByAuthProviderIDRequest{`,
		`AuthProviderID:` + fmt.Sprintf("%v", this.AuthProviderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrgInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrgInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`OrgName:` + fmt.Sprintf("%v", this.OrgName) + `,`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`EnableApprovals:` + fmt.Sprintf("%v", this.EnableApprovals) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateUserRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`IdentityProvider:` + fmt.Sprintf("%v", this.IdentityProvider) + `,`,
		`AuthProviderID:` + fmt.Sprintf("%v", this.AuthProviderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrgAndUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrgAndUserRequest{`,
		`Org:` + strings.Replace(fmt.Sprintf("%v", this.Org), "CreateOrgAndUserRequest_Org", "CreateOrgAndUserRequest_Org", 1) + `,`,
		`User:` + strings.Replace(fmt.Sprintf("%v", this.User), "CreateOrgAndUserRequest_User", "CreateOrgAndUserRequest_User", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrgAndUserRequest_Org) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrgAndUserRequest_Org{`,
		`OrgName:` + fmt.Sprintf("%v", this.OrgName) + `,`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrgAndUserRequest_User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrgAndUserRequest_User{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`IdentityProvider:` + fmt.Sprintf("%v", this.IdentityProvider) + `,`,
		`AuthProviderID:` + fmt.Sprintf("%v", this.AuthProviderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrgAndUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrgAndUserResponse{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`UserID:` + strings.Replace(fmt.Sprintf("%v", this.UserID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrgRequest{`,
		`OrgName:` + fmt.Sprintf("%v", this.OrgName) + `,`,
		`DomainName:` + strings.Replace(fmt.Sprintf("%v", this.DomainName), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgByNameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrgByNameRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgByDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrgByDomainRequest{`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrgsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrgs := "[]*OrgInfo{"
	for _, f := range this.Orgs {
		repeatedStringForOrgs += strings.Replace(f.String(), "OrgInfo", "OrgInfo", 1) + ","
	}
	repeatedStringForOrgs += "}"
	s := strings.Join([]string{`&GetOrgsResponse{`,
		`Orgs:` + repeatedStringForOrgs + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`DisplayPicture:` + strings.Replace(fmt.Sprintf("%v", this.DisplayPicture), "StringValue", "types.StringValue", 1) + `,`,
		`IsApproved:` + strings.Replace(fmt.Sprintf("%v", this.IsApproved), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOrgRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`EnableApprovals:` + strings.Replace(fmt.Sprintf("%v", this.EnableApprovals), "BoolValue", "types.BoolValue", 1) + `,`,
		`DomainName:` + strings.Replace(fmt.Sprintf("%v", this.DomainName), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserSettingsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserSettingsRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserSettingsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserSettingsResponse{`,
		`AnalyticsOptout:` + fmt.Sprintf("%v", this.AnalyticsOptout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserSettingsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserSettingsRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`AnalyticsOptout:` + strings.Replace(fmt.Sprintf("%v", this.AnalyticsOptout), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserSettingsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserSettingsResponse{`,
		`OK:` + fmt.Sprintf("%v", this.OK) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserAttributesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserAttributesRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserAttributesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserAttributesResponse{`,
		`TourSeen:` + fmt.Sprintf("%v", this.TourSeen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetUserAttributesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetUserAttributesRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`TourSeen:` + strings.Replace(fmt.Sprintf("%v", this.TourSeen), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetUserAttributesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetUserAttributesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetUsersInOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUsersInOrgRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUsersInOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*UserInfo{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(f.String(), "UserInfo", "UserInfo", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&GetUsersInOrgResponse{`,
		`Users:` + repeatedStringForUsers + `,`,
		`}`,
	}, "")
	return s
}
func (this *IDEConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IDEConfig{`,
		`IDEName:` + fmt.Sprintf("%v", this.IDEName) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddOrgIDEConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddOrgIDEConfigRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "IDEConfig", "IDEConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddOrgIDEConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddOrgIDEConfigResponse{`,
		`Config:` + strings.Replace(this.Config.String(), "IDEConfig", "IDEConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteOrgIDEConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteOrgIDEConfigRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`IDEName:` + fmt.Sprintf("%v", this.IDEName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteOrgIDEConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteOrgIDEConfigResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgIDEConfigsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrgIDEConfigsRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`IDEName:` + fmt.Sprintf("%v", this.IDEName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgIDEConfigsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConfigs := "[]*IDEConfig{"
	for _, f := range this.Configs {
		repeatedStringForConfigs += strings.Replace(f.String(), "IDEConfig", "IDEConfig", 1) + ","
	}
	repeatedStringForConfigs += "}"
	s := strings.Join([]string{`&GetOrgIDEConfigsResponse{`,
		`Configs:` + repeatedStringForConfigs + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilePicture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfilePicture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApproved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApproved = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthProviderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByEmailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByAuthProviderIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByAuthProviderIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByAuthProviderIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthProviderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrgInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApprovals", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableApprovals = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthProviderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrgAndUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrgAndUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrgAndUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Org", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Org == nil {
				m.Org = &CreateOrgAndUserRequest_Org{}
			}
			if err := m.Org.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &CreateOrgAndUserRequest_User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrgAndUserRequest_Org) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Org: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Org: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrgAndUserRequest_User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthProviderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrgAndUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrgAndUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrgAndUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserID == nil {
				m.UserID = &uuidpb.UUID{}
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainName == nil {
				m.DomainName = &types.StringValue{}
			}
			if err := m.DomainName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgByDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgByDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgByDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orgs = append(m.Orgs, &OrgInfo{})
			if err := m.Orgs[len(m.Orgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayPicture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayPicture == nil {
				m.DisplayPicture = &types.StringValue{}
			}
			if err := m.DisplayPicture.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApproved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsApproved == nil {
				m.IsApproved = &types.BoolValue{}
			}
			if err := m.IsApproved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApprovals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableApprovals == nil {
				m.EnableApprovals = &types.BoolValue{}
			}
			if err := m.EnableApprovals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainName == nil {
				m.DomainName = &types.StringValue{}
			}
			if err := m.DomainName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserSettingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserSettingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserSettingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalyticsOptout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AnalyticsOptout = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalyticsOptout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnalyticsOptout == nil {
				m.AnalyticsOptout = &types.BoolValue{}
			}
			if err := m.AnalyticsOptout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserSettingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserSettingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserSettingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TourSeen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TourSeen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TourSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TourSeen == nil {
				m.TourSeen = &types.BoolValue{}
			}
			if err := m.TourSeen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersInOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersInOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersInOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersInOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersInOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersInOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserInfo{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDEConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDEConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDEConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDEName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDEName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOrgIDEConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOrgIDEConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOrgIDEConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &IDEConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOrgIDEConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOrgIDEConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOrgIDEConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &IDEConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOrgIDEConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOrgIDEConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOrgIDEConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDEName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDEName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOrgIDEConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOrgIDEConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOrgIDEConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgIDEConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgIDEConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgIDEConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDEName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDEName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgIDEConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgIDEConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgIDEConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &IDEConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
