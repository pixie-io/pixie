// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/scriptmgr/scriptmgrpb/service.proto

package scriptmgrpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	vispb "px.dev/pixie/src/api/proto/vispb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetLiveViewsReq struct {
}

func (m *GetLiveViewsReq) Reset()      { *m = GetLiveViewsReq{} }
func (*GetLiveViewsReq) ProtoMessage() {}
func (*GetLiveViewsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{0}
}
func (m *GetLiveViewsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveViewsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveViewsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveViewsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveViewsReq.Merge(m, src)
}
func (m *GetLiveViewsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveViewsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveViewsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveViewsReq proto.InternalMessageInfo

type LiveViewMetadata struct {
	ID   *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc string       `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Name string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *LiveViewMetadata) Reset()      { *m = LiveViewMetadata{} }
func (*LiveViewMetadata) ProtoMessage() {}
func (*LiveViewMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{1}
}
func (m *LiveViewMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveViewMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveViewMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveViewMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveViewMetadata.Merge(m, src)
}
func (m *LiveViewMetadata) XXX_Size() int {
	return m.Size()
}
func (m *LiveViewMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveViewMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_LiveViewMetadata proto.InternalMessageInfo

func (m *LiveViewMetadata) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *LiveViewMetadata) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *LiveViewMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLiveViewsResp struct {
	LiveViews []*LiveViewMetadata `protobuf:"bytes,1,rep,name=live_views,json=liveViews,proto3" json:"live_views,omitempty"`
}

func (m *GetLiveViewsResp) Reset()      { *m = GetLiveViewsResp{} }
func (*GetLiveViewsResp) ProtoMessage() {}
func (*GetLiveViewsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{2}
}
func (m *GetLiveViewsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveViewsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveViewsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveViewsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveViewsResp.Merge(m, src)
}
func (m *GetLiveViewsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveViewsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveViewsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveViewsResp proto.InternalMessageInfo

func (m *GetLiveViewsResp) GetLiveViews() []*LiveViewMetadata {
	if m != nil {
		return m.LiveViews
	}
	return nil
}

type GetLiveViewContentsReq struct {
	LiveViewID *uuidpb.UUID `protobuf:"bytes,1,opt,name=live_view_id,json=liveViewId,proto3" json:"live_view_id,omitempty"`
}

func (m *GetLiveViewContentsReq) Reset()      { *m = GetLiveViewContentsReq{} }
func (*GetLiveViewContentsReq) ProtoMessage() {}
func (*GetLiveViewContentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{3}
}
func (m *GetLiveViewContentsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveViewContentsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveViewContentsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveViewContentsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveViewContentsReq.Merge(m, src)
}
func (m *GetLiveViewContentsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveViewContentsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveViewContentsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveViewContentsReq proto.InternalMessageInfo

func (m *GetLiveViewContentsReq) GetLiveViewID() *uuidpb.UUID {
	if m != nil {
		return m.LiveViewID
	}
	return nil
}

type GetLiveViewContentsResp struct {
	Metadata    *LiveViewMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PxlContents string            `protobuf:"bytes,2,opt,name=pxl_contents,json=pxlContents,proto3" json:"pxl_contents,omitempty"`
	Vis         *vispb.Vis        `protobuf:"bytes,3,opt,name=vis,proto3" json:"vis,omitempty"`
}

func (m *GetLiveViewContentsResp) Reset()      { *m = GetLiveViewContentsResp{} }
func (*GetLiveViewContentsResp) ProtoMessage() {}
func (*GetLiveViewContentsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{4}
}
func (m *GetLiveViewContentsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveViewContentsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveViewContentsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveViewContentsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveViewContentsResp.Merge(m, src)
}
func (m *GetLiveViewContentsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveViewContentsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveViewContentsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveViewContentsResp proto.InternalMessageInfo

func (m *GetLiveViewContentsResp) GetMetadata() *LiveViewMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetLiveViewContentsResp) GetPxlContents() string {
	if m != nil {
		return m.PxlContents
	}
	return ""
}

func (m *GetLiveViewContentsResp) GetVis() *vispb.Vis {
	if m != nil {
		return m.Vis
	}
	return nil
}

type GetScriptsReq struct {
}

func (m *GetScriptsReq) Reset()      { *m = GetScriptsReq{} }
func (*GetScriptsReq) ProtoMessage() {}
func (*GetScriptsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{5}
}
func (m *GetScriptsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScriptsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScriptsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScriptsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptsReq.Merge(m, src)
}
func (m *GetScriptsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetScriptsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptsReq proto.InternalMessageInfo

type ScriptMetadata struct {
	ID          *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc        string       `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Name        string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	HasLiveView bool         `protobuf:"varint,4,opt,name=has_live_view,json=hasLiveView,proto3" json:"has_live_view,omitempty"`
}

func (m *ScriptMetadata) Reset()      { *m = ScriptMetadata{} }
func (*ScriptMetadata) ProtoMessage() {}
func (*ScriptMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{6}
}
func (m *ScriptMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScriptMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScriptMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScriptMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptMetadata.Merge(m, src)
}
func (m *ScriptMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ScriptMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptMetadata proto.InternalMessageInfo

func (m *ScriptMetadata) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ScriptMetadata) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ScriptMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScriptMetadata) GetHasLiveView() bool {
	if m != nil {
		return m.HasLiveView
	}
	return false
}

type GetScriptsResp struct {
	Scripts []*ScriptMetadata `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
}

func (m *GetScriptsResp) Reset()      { *m = GetScriptsResp{} }
func (*GetScriptsResp) ProtoMessage() {}
func (*GetScriptsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{7}
}
func (m *GetScriptsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScriptsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScriptsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScriptsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptsResp.Merge(m, src)
}
func (m *GetScriptsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetScriptsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptsResp proto.InternalMessageInfo

func (m *GetScriptsResp) GetScripts() []*ScriptMetadata {
	if m != nil {
		return m.Scripts
	}
	return nil
}

type GetScriptContentsReq struct {
	ScriptID *uuidpb.UUID `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
}

func (m *GetScriptContentsReq) Reset()      { *m = GetScriptContentsReq{} }
func (*GetScriptContentsReq) ProtoMessage() {}
func (*GetScriptContentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{8}
}
func (m *GetScriptContentsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScriptContentsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScriptContentsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScriptContentsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptContentsReq.Merge(m, src)
}
func (m *GetScriptContentsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetScriptContentsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptContentsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptContentsReq proto.InternalMessageInfo

func (m *GetScriptContentsReq) GetScriptID() *uuidpb.UUID {
	if m != nil {
		return m.ScriptID
	}
	return nil
}

type GetScriptContentsResp struct {
	Metadata *ScriptMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Contents string          `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *GetScriptContentsResp) Reset()      { *m = GetScriptContentsResp{} }
func (*GetScriptContentsResp) ProtoMessage() {}
func (*GetScriptContentsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{9}
}
func (m *GetScriptContentsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScriptContentsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScriptContentsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScriptContentsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptContentsResp.Merge(m, src)
}
func (m *GetScriptContentsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetScriptContentsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptContentsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptContentsResp proto.InternalMessageInfo

func (m *GetScriptContentsResp) GetMetadata() *ScriptMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetScriptContentsResp) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

type CheckScriptExistsReq struct {
	Sha256Hash string `protobuf:"bytes,1,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
}

func (m *CheckScriptExistsReq) Reset()      { *m = CheckScriptExistsReq{} }
func (*CheckScriptExistsReq) ProtoMessage() {}
func (*CheckScriptExistsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{10}
}
func (m *CheckScriptExistsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckScriptExistsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckScriptExistsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckScriptExistsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckScriptExistsReq.Merge(m, src)
}
func (m *CheckScriptExistsReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckScriptExistsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckScriptExistsReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckScriptExistsReq proto.InternalMessageInfo

func (m *CheckScriptExistsReq) GetSha256Hash() string {
	if m != nil {
		return m.Sha256Hash
	}
	return ""
}

type CheckScriptExistsResp struct {
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *CheckScriptExistsResp) Reset()      { *m = CheckScriptExistsResp{} }
func (*CheckScriptExistsResp) ProtoMessage() {}
func (*CheckScriptExistsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{11}
}
func (m *CheckScriptExistsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckScriptExistsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckScriptExistsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckScriptExistsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckScriptExistsResp.Merge(m, src)
}
func (m *CheckScriptExistsResp) XXX_Size() int {
	return m.Size()
}
func (m *CheckScriptExistsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckScriptExistsResp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckScriptExistsResp proto.InternalMessageInfo

func (m *CheckScriptExistsResp) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func init() {
	proto.RegisterType((*GetLiveViewsReq)(nil), "px.services.GetLiveViewsReq")
	proto.RegisterType((*LiveViewMetadata)(nil), "px.services.LiveViewMetadata")
	proto.RegisterType((*GetLiveViewsResp)(nil), "px.services.GetLiveViewsResp")
	proto.RegisterType((*GetLiveViewContentsReq)(nil), "px.services.GetLiveViewContentsReq")
	proto.RegisterType((*GetLiveViewContentsResp)(nil), "px.services.GetLiveViewContentsResp")
	proto.RegisterType((*GetScriptsReq)(nil), "px.services.GetScriptsReq")
	proto.RegisterType((*ScriptMetadata)(nil), "px.services.ScriptMetadata")
	proto.RegisterType((*GetScriptsResp)(nil), "px.services.GetScriptsResp")
	proto.RegisterType((*GetScriptContentsReq)(nil), "px.services.GetScriptContentsReq")
	proto.RegisterType((*GetScriptContentsResp)(nil), "px.services.GetScriptContentsResp")
	proto.RegisterType((*CheckScriptExistsReq)(nil), "px.services.CheckScriptExistsReq")
	proto.RegisterType((*CheckScriptExistsResp)(nil), "px.services.CheckScriptExistsResp")
}

func init() {
	proto.RegisterFile("src/cloud/scriptmgr/scriptmgrpb/service.proto", fileDescriptor_e19e341d77057158)
}

var fileDescriptor_e19e341d77057158 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xce, 0x26, 0x55, 0x7f, 0xc9, 0x38, 0xfd, 0xb7, 0xbf, 0xb6, 0x44, 0x2e, 0x75, 0xd2, 0x05,
	0x89, 0x5c, 0xb0, 0xa5, 0xa0, 0x82, 0x40, 0x5c, 0xda, 0xa6, 0x0a, 0x11, 0x20, 0x21, 0x57, 0xed,
	0xa1, 0x1c, 0x82, 0x63, 0xaf, 0xe2, 0x15, 0x69, 0xb3, 0x64, 0xdd, 0x90, 0x23, 0x17, 0xee, 0x1c,
	0x79, 0x04, 0x1e, 0x83, 0x23, 0xc7, 0x1e, 0x7b, 0xaa, 0xa8, 0x7b, 0xe1, 0xd8, 0x47, 0x40, 0xf6,
	0xda, 0x89, 0x93, 0xba, 0xed, 0x89, 0x4b, 0xb2, 0x33, 0xf3, 0xcd, 0xb7, 0x33, 0xf3, 0x8d, 0x6d,
	0x78, 0x2c, 0xfa, 0xb6, 0x61, 0x77, 0x7b, 0x27, 0x8e, 0x21, 0xec, 0x3e, 0xe3, 0xde, 0x51, 0xa7,
	0x3f, 0x3e, 0xf1, 0xb6, 0x21, 0x68, 0x7f, 0xc0, 0x6c, 0xaa, 0xf3, 0x7e, 0xcf, 0xeb, 0x61, 0x85,
	0x0f, 0xf5, 0xc8, 0x23, 0xd4, 0xe5, 0x4e, 0xaf, 0xd3, 0x0b, 0xfd, 0x46, 0x70, 0x92, 0x10, 0xb5,
	0x1c, 0x30, 0x5a, 0x9c, 0x19, 0x32, 0x72, 0x72, 0xc2, 0x1c, 0xde, 0x0e, 0xff, 0x22, 0xc0, 0xfa,
	0x24, 0x60, 0xc0, 0x04, 0x6f, 0x07, 0xbf, 0x32, 0x4c, 0x96, 0x60, 0xa1, 0x41, 0xbd, 0x37, 0x6c,
	0x40, 0x0f, 0x18, 0xfd, 0x2c, 0x4c, 0xfa, 0x89, 0xd8, 0xb0, 0x18, 0xdb, 0x6f, 0xa9, 0x67, 0x39,
	0x96, 0x67, 0xe1, 0x47, 0x90, 0x65, 0x4e, 0x09, 0x55, 0x50, 0x55, 0xa9, 0x2d, 0xe8, 0x7c, 0xa8,
	0xcb, 0x8b, 0xf4, 0xfd, 0xfd, 0x66, 0x7d, 0x7b, 0xd6, 0x3f, 0x2f, 0x67, 0x9b, 0x75, 0x33, 0xcb,
	0x1c, 0x8c, 0x61, 0xc6, 0xa1, 0xc2, 0x2e, 0x65, 0x2b, 0xa8, 0x5a, 0x30, 0xc3, 0x73, 0xe0, 0x3b,
	0xb6, 0x8e, 0x68, 0x29, 0x27, 0x7d, 0xc1, 0x99, 0xbc, 0x83, 0xc5, 0xc9, 0x7b, 0x05, 0xc7, 0x2f,
	0x01, 0xba, 0x6c, 0x40, 0x5b, 0x83, 0xc0, 0x53, 0x42, 0x95, 0x5c, 0x55, 0xa9, 0xad, 0xeb, 0x89,
	0x19, 0xe8, 0xd3, 0x75, 0x99, 0x85, 0x6e, 0xcc, 0x40, 0xde, 0xc3, 0x6a, 0x82, 0x71, 0xa7, 0x77,
	0xec, 0xd1, 0x63, 0x2f, 0x68, 0x08, 0x6f, 0x41, 0x71, 0xc4, 0xdb, 0xba, 0xb9, 0x8d, 0x79, 0xff,
	0xbc, 0x0c, 0x71, 0x7e, 0xb3, 0x6e, 0x42, 0xcc, 0xdd, 0x74, 0xc8, 0x77, 0x04, 0xf7, 0x52, 0xd9,
	0x05, 0xc7, 0xcf, 0x21, 0x7f, 0x14, 0xd5, 0x13, 0x51, 0xdf, 0x51, 0xf4, 0x08, 0x8e, 0x37, 0xa0,
	0xc8, 0x87, 0xdd, 0x96, 0x1d, 0xd1, 0x45, 0x53, 0x53, 0xf8, 0xb0, 0x1b, 0xdf, 0x80, 0xcb, 0x90,
	0x1b, 0x30, 0x11, 0xce, 0x4e, 0xa9, 0xcd, 0x05, 0xc4, 0xa1, 0x84, 0xfa, 0x01, 0x13, 0x66, 0x10,
	0x21, 0x0b, 0x30, 0xd7, 0xa0, 0xde, 0x5e, 0xb8, 0x44, 0xa1, 0x7e, 0x5f, 0x11, 0xcc, 0x4b, 0xf3,
	0x9f, 0xc9, 0x87, 0x09, 0xcc, 0xb9, 0x96, 0x68, 0x8d, 0xc6, 0x5a, 0x9a, 0xa9, 0xa0, 0x6a, 0xde,
	0x54, 0x5c, 0x4b, 0xc4, 0xed, 0x92, 0x06, 0xcc, 0x27, 0x0b, 0x13, 0x1c, 0x6f, 0xc2, 0x7f, 0x72,
	0xd9, 0x63, 0x75, 0xd7, 0x26, 0x06, 0x35, 0x59, 0xb4, 0x19, 0x63, 0x89, 0x09, 0xcb, 0x23, 0xa2,
	0xa4, 0xae, 0x2f, 0xa0, 0x20, 0x21, 0xb7, 0x88, 0x5a, 0xf4, 0xcf, 0xcb, 0x79, 0x99, 0xda, 0xac,
	0x9b, 0x79, 0x89, 0x6f, 0x3a, 0xa4, 0x0b, 0x2b, 0x29, 0x9c, 0x82, 0xe3, 0x67, 0xd7, 0xd4, 0xbc,
	0xb5, 0xc8, 0xb1, 0x96, 0x2a, 0xe4, 0xa7, 0x74, 0x1c, 0xd9, 0xa4, 0x01, 0xcb, 0x3b, 0x2e, 0xb5,
	0x3f, 0xca, 0xe4, 0xdd, 0x21, 0x13, 0xb2, 0x03, 0x03, 0x14, 0xe1, 0x5a, 0xb5, 0xcd, 0xa7, 0x2d,
	0xd7, 0x12, 0x6e, 0x78, 0x5f, 0x41, 0xee, 0xe1, 0x5e, 0xe8, 0x7e, 0x65, 0x09, 0xd7, 0x04, 0x31,
	0x3a, 0x13, 0x03, 0x56, 0x52, 0x88, 0x04, 0xc7, 0xab, 0x30, 0x4b, 0x43, 0x2b, 0x24, 0xc9, 0x9b,
	0x91, 0x55, 0xfb, 0x99, 0x83, 0xc5, 0xa8, 0xe4, 0x4e, 0x7f, 0x4f, 0x36, 0x81, 0x5f, 0x43, 0x31,
	0xf9, 0xf0, 0xe1, 0xfb, 0x13, 0x1d, 0x4e, 0xbd, 0x0f, 0xd4, 0xf5, 0x5b, 0xa2, 0x82, 0xe3, 0x0f,
	0xf0, 0x7f, 0xca, 0x93, 0x81, 0x1f, 0xdc, 0x94, 0x95, 0x50, 0x50, 0x7d, 0x78, 0x37, 0x48, 0x70,
	0xbc, 0x0b, 0x30, 0x5e, 0x24, 0xac, 0x4e, 0xe7, 0x8c, 0x57, 0x5f, 0x5d, 0xbb, 0x31, 0x26, 0x38,
	0x3e, 0x84, 0xa5, 0x6b, 0x92, 0xe3, 0x8d, 0xf4, 0x8c, 0x64, 0x91, 0xe4, 0x2e, 0x88, 0xe4, 0xbe,
	0xa6, 0xcb, 0x14, 0x77, 0xda, 0x02, 0x4c, 0x71, 0xa7, 0x4a, 0xbb, 0xbd, 0x75, 0x7a, 0xa1, 0x65,
	0xce, 0x2e, 0xb4, 0xcc, 0xd5, 0x85, 0x86, 0xbe, 0xf8, 0x1a, 0xfa, 0xe1, 0x6b, 0xe8, 0x97, 0xaf,
	0xa1, 0x53, 0x5f, 0x43, 0xbf, 0x7d, 0x0d, 0xfd, 0xf1, 0xb5, 0xcc, 0x95, 0xaf, 0xa1, 0x6f, 0x97,
	0x5a, 0xe6, 0xf4, 0x52, 0xcb, 0x9c, 0x5d, 0x6a, 0x99, 0x43, 0x25, 0xf1, 0x59, 0x69, 0xcf, 0x86,
	0x2f, 0xfb, 0x27, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x48, 0x8c, 0xbb, 0xd4, 0x80, 0x06, 0x00,
	0x00,
}

func (this *GetLiveViewsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveViewsReq)
	if !ok {
		that2, ok := that.(GetLiveViewsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LiveViewMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LiveViewMetadata)
	if !ok {
		that2, ok := that.(LiveViewMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetLiveViewsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveViewsResp)
	if !ok {
		that2, ok := that.(GetLiveViewsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LiveViews) != len(that1.LiveViews) {
		return false
	}
	for i := range this.LiveViews {
		if !this.LiveViews[i].Equal(that1.LiveViews[i]) {
			return false
		}
	}
	return true
}
func (this *GetLiveViewContentsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveViewContentsReq)
	if !ok {
		that2, ok := that.(GetLiveViewContentsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LiveViewID.Equal(that1.LiveViewID) {
		return false
	}
	return true
}
func (this *GetLiveViewContentsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveViewContentsResp)
	if !ok {
		that2, ok := that.(GetLiveViewContentsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.PxlContents != that1.PxlContents {
		return false
	}
	if !this.Vis.Equal(that1.Vis) {
		return false
	}
	return true
}
func (this *GetScriptsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScriptsReq)
	if !ok {
		that2, ok := that.(GetScriptsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ScriptMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScriptMetadata)
	if !ok {
		that2, ok := that.(ScriptMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.HasLiveView != that1.HasLiveView {
		return false
	}
	return true
}
func (this *GetScriptsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScriptsResp)
	if !ok {
		that2, ok := that.(GetScriptsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Scripts) != len(that1.Scripts) {
		return false
	}
	for i := range this.Scripts {
		if !this.Scripts[i].Equal(that1.Scripts[i]) {
			return false
		}
	}
	return true
}
func (this *GetScriptContentsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScriptContentsReq)
	if !ok {
		that2, ok := that.(GetScriptContentsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScriptID.Equal(that1.ScriptID) {
		return false
	}
	return true
}
func (this *GetScriptContentsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScriptContentsResp)
	if !ok {
		that2, ok := that.(GetScriptContentsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.Contents != that1.Contents {
		return false
	}
	return true
}
func (this *CheckScriptExistsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckScriptExistsReq)
	if !ok {
		that2, ok := that.(CheckScriptExistsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sha256Hash != that1.Sha256Hash {
		return false
	}
	return true
}
func (this *CheckScriptExistsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckScriptExistsResp)
	if !ok {
		that2, ok := that.(CheckScriptExistsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exists != that1.Exists {
		return false
	}
	return true
}
func (this *GetLiveViewsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&scriptmgrpb.GetLiveViewsReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LiveViewMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&scriptmgrpb.LiveViewMetadata{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLiveViewsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptmgrpb.GetLiveViewsResp{")
	if this.LiveViews != nil {
		s = append(s, "LiveViews: "+fmt.Sprintf("%#v", this.LiveViews)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLiveViewContentsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptmgrpb.GetLiveViewContentsReq{")
	if this.LiveViewID != nil {
		s = append(s, "LiveViewID: "+fmt.Sprintf("%#v", this.LiveViewID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLiveViewContentsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&scriptmgrpb.GetLiveViewContentsResp{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "PxlContents: "+fmt.Sprintf("%#v", this.PxlContents)+",\n")
	if this.Vis != nil {
		s = append(s, "Vis: "+fmt.Sprintf("%#v", this.Vis)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScriptsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&scriptmgrpb.GetScriptsReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScriptMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&scriptmgrpb.ScriptMetadata{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "HasLiveView: "+fmt.Sprintf("%#v", this.HasLiveView)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScriptsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptmgrpb.GetScriptsResp{")
	if this.Scripts != nil {
		s = append(s, "Scripts: "+fmt.Sprintf("%#v", this.Scripts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScriptContentsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptmgrpb.GetScriptContentsReq{")
	if this.ScriptID != nil {
		s = append(s, "ScriptID: "+fmt.Sprintf("%#v", this.ScriptID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScriptContentsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&scriptmgrpb.GetScriptContentsResp{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "Contents: "+fmt.Sprintf("%#v", this.Contents)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckScriptExistsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptmgrpb.CheckScriptExistsReq{")
	s = append(s, "Sha256Hash: "+fmt.Sprintf("%#v", this.Sha256Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckScriptExistsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptmgrpb.CheckScriptExistsResp{")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScriptMgrServiceClient is the client API for ScriptMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScriptMgrServiceClient interface {
	GetLiveViews(ctx context.Context, in *GetLiveViewsReq, opts ...grpc.CallOption) (*GetLiveViewsResp, error)
	GetLiveViewContents(ctx context.Context, in *GetLiveViewContentsReq, opts ...grpc.CallOption) (*GetLiveViewContentsResp, error)
	GetScripts(ctx context.Context, in *GetScriptsReq, opts ...grpc.CallOption) (*GetScriptsResp, error)
	GetScriptContents(ctx context.Context, in *GetScriptContentsReq, opts ...grpc.CallOption) (*GetScriptContentsResp, error)
	CheckScriptExists(ctx context.Context, in *CheckScriptExistsReq, opts ...grpc.CallOption) (*CheckScriptExistsResp, error)
}

type scriptMgrServiceClient struct {
	cc *grpc.ClientConn
}

func NewScriptMgrServiceClient(cc *grpc.ClientConn) ScriptMgrServiceClient {
	return &scriptMgrServiceClient{cc}
}

func (c *scriptMgrServiceClient) GetLiveViews(ctx context.Context, in *GetLiveViewsReq, opts ...grpc.CallOption) (*GetLiveViewsResp, error) {
	out := new(GetLiveViewsResp)
	err := c.cc.Invoke(ctx, "/px.services.ScriptMgrService/GetLiveViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptMgrServiceClient) GetLiveViewContents(ctx context.Context, in *GetLiveViewContentsReq, opts ...grpc.CallOption) (*GetLiveViewContentsResp, error) {
	out := new(GetLiveViewContentsResp)
	err := c.cc.Invoke(ctx, "/px.services.ScriptMgrService/GetLiveViewContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptMgrServiceClient) GetScripts(ctx context.Context, in *GetScriptsReq, opts ...grpc.CallOption) (*GetScriptsResp, error) {
	out := new(GetScriptsResp)
	err := c.cc.Invoke(ctx, "/px.services.ScriptMgrService/GetScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptMgrServiceClient) GetScriptContents(ctx context.Context, in *GetScriptContentsReq, opts ...grpc.CallOption) (*GetScriptContentsResp, error) {
	out := new(GetScriptContentsResp)
	err := c.cc.Invoke(ctx, "/px.services.ScriptMgrService/GetScriptContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptMgrServiceClient) CheckScriptExists(ctx context.Context, in *CheckScriptExistsReq, opts ...grpc.CallOption) (*CheckScriptExistsResp, error) {
	out := new(CheckScriptExistsResp)
	err := c.cc.Invoke(ctx, "/px.services.ScriptMgrService/CheckScriptExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptMgrServiceServer is the server API for ScriptMgrService service.
type ScriptMgrServiceServer interface {
	GetLiveViews(context.Context, *GetLiveViewsReq) (*GetLiveViewsResp, error)
	GetLiveViewContents(context.Context, *GetLiveViewContentsReq) (*GetLiveViewContentsResp, error)
	GetScripts(context.Context, *GetScriptsReq) (*GetScriptsResp, error)
	GetScriptContents(context.Context, *GetScriptContentsReq) (*GetScriptContentsResp, error)
	CheckScriptExists(context.Context, *CheckScriptExistsReq) (*CheckScriptExistsResp, error)
}

// UnimplementedScriptMgrServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScriptMgrServiceServer struct {
}

func (*UnimplementedScriptMgrServiceServer) GetLiveViews(ctx context.Context, req *GetLiveViewsReq) (*GetLiveViewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveViews not implemented")
}
func (*UnimplementedScriptMgrServiceServer) GetLiveViewContents(ctx context.Context, req *GetLiveViewContentsReq) (*GetLiveViewContentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveViewContents not implemented")
}
func (*UnimplementedScriptMgrServiceServer) GetScripts(ctx context.Context, req *GetScriptsReq) (*GetScriptsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScripts not implemented")
}
func (*UnimplementedScriptMgrServiceServer) GetScriptContents(ctx context.Context, req *GetScriptContentsReq) (*GetScriptContentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptContents not implemented")
}
func (*UnimplementedScriptMgrServiceServer) CheckScriptExists(ctx context.Context, req *CheckScriptExistsReq) (*CheckScriptExistsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckScriptExists not implemented")
}

func RegisterScriptMgrServiceServer(s *grpc.Server, srv ScriptMgrServiceServer) {
	s.RegisterService(&_ScriptMgrService_serviceDesc, srv)
}

func _ScriptMgrService_GetLiveViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveViewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServiceServer).GetLiveViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ScriptMgrService/GetLiveViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServiceServer).GetLiveViews(ctx, req.(*GetLiveViewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptMgrService_GetLiveViewContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveViewContentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServiceServer).GetLiveViewContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ScriptMgrService/GetLiveViewContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServiceServer).GetLiveViewContents(ctx, req.(*GetLiveViewContentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptMgrService_GetScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServiceServer).GetScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ScriptMgrService/GetScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServiceServer).GetScripts(ctx, req.(*GetScriptsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptMgrService_GetScriptContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptContentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServiceServer).GetScriptContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ScriptMgrService/GetScriptContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServiceServer).GetScriptContents(ctx, req.(*GetScriptContentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptMgrService_CheckScriptExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckScriptExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServiceServer).CheckScriptExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.ScriptMgrService/CheckScriptExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServiceServer).CheckScriptExists(ctx, req.(*CheckScriptExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScriptMgrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.services.ScriptMgrService",
	HandlerType: (*ScriptMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiveViews",
			Handler:    _ScriptMgrService_GetLiveViews_Handler,
		},
		{
			MethodName: "GetLiveViewContents",
			Handler:    _ScriptMgrService_GetLiveViewContents_Handler,
		},
		{
			MethodName: "GetScripts",
			Handler:    _ScriptMgrService_GetScripts_Handler,
		},
		{
			MethodName: "GetScriptContents",
			Handler:    _ScriptMgrService_GetScriptContents_Handler,
		},
		{
			MethodName: "CheckScriptExists",
			Handler:    _ScriptMgrService_CheckScriptExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/scriptmgr/scriptmgrpb/service.proto",
}

func (m *GetLiveViewsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveViewsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveViewsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LiveViewMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveViewMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveViewMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintService(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLiveViewsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveViewsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveViewsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiveViews) > 0 {
		for iNdEx := len(m.LiveViews) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiveViews[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLiveViewContentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveViewContentsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveViewContentsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiveViewID != nil {
		{
			size, err := m.LiveViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLiveViewContentsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveViewContentsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveViewContentsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vis != nil {
		{
			size, err := m.Vis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PxlContents) > 0 {
		i -= len(m.PxlContents)
		copy(dAtA[i:], m.PxlContents)
		i = encodeVarintService(dAtA, i, uint64(len(m.PxlContents)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetScriptsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScriptsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScriptsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ScriptMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScriptMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScriptMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasLiveView {
		i--
		if m.HasLiveView {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintService(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetScriptsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScriptsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScriptsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for iNdEx := len(m.Scripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetScriptContentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScriptContentsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScriptContentsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScriptID != nil {
		{
			size, err := m.ScriptID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetScriptContentsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScriptContentsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScriptContentsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintService(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckScriptExistsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckScriptExistsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckScriptExistsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha256Hash) > 0 {
		i -= len(m.Sha256Hash)
		copy(dAtA[i:], m.Sha256Hash)
		i = encodeVarintService(dAtA, i, uint64(len(m.Sha256Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckScriptExistsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckScriptExistsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckScriptExistsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetLiveViewsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LiveViewMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetLiveViewsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiveViews) > 0 {
		for _, e := range m.LiveViews {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetLiveViewContentsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiveViewID != nil {
		l = m.LiveViewID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetLiveViewContentsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.PxlContents)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Vis != nil {
		l = m.Vis.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetScriptsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ScriptMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.HasLiveView {
		n += 2
	}
	return n
}

func (m *GetScriptsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for _, e := range m.Scripts {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetScriptContentsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScriptID != nil {
		l = m.ScriptID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetScriptContentsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CheckScriptExistsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sha256Hash)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CheckScriptExistsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetLiveViewsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLiveViewsReq{`,
		`}`,
	}, "")
	return s
}
func (this *LiveViewMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LiveViewMetadata{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLiveViewsResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLiveViews := "[]*LiveViewMetadata{"
	for _, f := range this.LiveViews {
		repeatedStringForLiveViews += strings.Replace(f.String(), "LiveViewMetadata", "LiveViewMetadata", 1) + ","
	}
	repeatedStringForLiveViews += "}"
	s := strings.Join([]string{`&GetLiveViewsResp{`,
		`LiveViews:` + repeatedStringForLiveViews + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLiveViewContentsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLiveViewContentsReq{`,
		`LiveViewID:` + strings.Replace(fmt.Sprintf("%v", this.LiveViewID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLiveViewContentsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLiveViewContentsResp{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "LiveViewMetadata", "LiveViewMetadata", 1) + `,`,
		`PxlContents:` + fmt.Sprintf("%v", this.PxlContents) + `,`,
		`Vis:` + strings.Replace(fmt.Sprintf("%v", this.Vis), "Vis", "vispb.Vis", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScriptsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScriptsReq{`,
		`}`,
	}, "")
	return s
}
func (this *ScriptMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScriptMetadata{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`HasLiveView:` + fmt.Sprintf("%v", this.HasLiveView) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScriptsResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScripts := "[]*ScriptMetadata{"
	for _, f := range this.Scripts {
		repeatedStringForScripts += strings.Replace(f.String(), "ScriptMetadata", "ScriptMetadata", 1) + ","
	}
	repeatedStringForScripts += "}"
	s := strings.Join([]string{`&GetScriptsResp{`,
		`Scripts:` + repeatedStringForScripts + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScriptContentsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScriptContentsReq{`,
		`ScriptID:` + strings.Replace(fmt.Sprintf("%v", this.ScriptID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScriptContentsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScriptContentsResp{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "ScriptMetadata", "ScriptMetadata", 1) + `,`,
		`Contents:` + fmt.Sprintf("%v", this.Contents) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckScriptExistsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckScriptExistsReq{`,
		`Sha256Hash:` + fmt.Sprintf("%v", this.Sha256Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckScriptExistsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckScriptExistsResp{`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetLiveViewsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveViewsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveViewsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveViewMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveViewMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveViewMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveViewsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveViewsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveViewsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveViews", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveViews = append(m.LiveViews, &LiveViewMetadata{})
			if err := m.LiveViews[len(m.LiveViews)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveViewContentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveViewContentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveViewContentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiveViewID == nil {
				m.LiveViewID = &uuidpb.UUID{}
			}
			if err := m.LiveViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveViewContentsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveViewContentsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveViewContentsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &LiveViewMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxlContents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PxlContents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vis == nil {
				m.Vis = &vispb.Vis{}
			}
			if err := m.Vis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScriptsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScriptsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScriptsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScriptMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLiveView", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLiveView = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScriptsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScriptsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScriptsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scripts = append(m.Scripts, &ScriptMetadata{})
			if err := m.Scripts[len(m.Scripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScriptContentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScriptContentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScriptContentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptID == nil {
				m.ScriptID = &uuidpb.UUID{}
			}
			if err := m.ScriptID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScriptContentsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScriptContentsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScriptContentsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ScriptMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckScriptExistsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckScriptExistsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckScriptExistsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckScriptExistsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckScriptExistsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckScriptExistsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
