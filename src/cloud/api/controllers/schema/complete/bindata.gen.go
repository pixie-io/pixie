// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xad\x28\x49\xcd\x4b\x51\x28\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xe6\x52\x50\x28\x4b\x2d\xca\x4c\xab\xf4\xcc\x2b\xcb\x2c\x49\x0d\xc9\xcf\x4e\xcd\xd3\xc8\x44\xb0\xad\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x35\xad\x14\x9c\xf2\xf3\x73\x52\x13\xf3\x14\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\x6d\xf4\x52\xc7\x4a\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 74, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x4d\x6f\xe3\x38\xd2\xbe\xfb\x57\x54\x4f\x1f\x26\x01\xf2\x06\x73\x79\x81\x45\x4e\xeb\xb1\xd5\xd3\xde\x24\x8e\xd7\x76\x66\xb0\x18\x34\x06\xb4\x58\xb6\x88\x48\xa4\x86\xa4\x9c\x78\x17\xfd\xdf\x17\x45\x52\x12\x29\x2b\x9d\xee\xde\xc5\xde\x2c\x7e\x54\x3d\x55\x2c\xd6\x17\x8d\x2f\x16\x25\x07\x7b\xaa\x11\xfe\xde\xa0\x3e\xc1\xbf\x26\x00\x8d\x41\x7d\x03\x8f\x06\xf5\x42\xee\xd5\xbb\x09\x80\xd2\x87\x1b\x78\xd0\x87\xf6\x9b\x56\x6c\xd0\x5a\x21\x0f\xc6\xaf\x6c\xbf\xda\xd9\xa9\xb5\x5a\xec\x1a\x8b\x61\xbe\xff\x0e\xf4\x68\xd0\xdc\xc0\xef\x1d\x9b\x4f\x34\x91\x97\x8d\xb1\xa8\x2f\x04\xbf\x81\xc5\xfc\xdd\xe5\x0d\xcc\xfc\x48\xcb\x39\x2c\xf8\xf9\xb4\x64\x15\x5e\x48\x56\xe1\x0d\x6c\xac\x16\xf2\xf0\xfa\x62\x62\x13\xcf\x38\x4e\xac\xb1\x2a\x57\x55\x5d\xa2\xc5\x0b\x21\xeb\xc6\xb6\x84\xae\x20\x6f\xb4\x51\x7a\xa5\xcc\x0d\x2c\xa4\xbd\x02\x96\x5b\xa1\xe4\x0d\x4c\xa3\x3d\x53\x37\xb6\x3d\xd5\x78\xd5\xf2\x79\x5c\xcc\x5b\x1a\x97\xe9\xe2\x35\x9a\xa6\xb4\x43\xb6\x1f\x04\x96\x7c\xc8\x7b\x4f\x83\x44\x36\xa5\x90\x49\x2b\xec\xe9\x56\x48\x7e\x35\x01\x00\xd0\xf8\x67\x23\x34\xf2\xa9\x3e\xd0\x62\x12\x71\x7c\xf9\xa7\xaf\x80\xe7\x80\xb4\x18\x27\x00\xef\x61\x93\x6b\x51\xdb\xea\xa0\x01\x25\xaf\x95\x90\xd6\x5c\x81\xc6\x3d\x6a\xb0\x0a\xb8\xca\x0d\x08\x09\x79\xa9\x1a\xce\x6a\x71\x5d\x6b\x65\xd5\x04\xa0\x14\x47\xfc\x55\xe0\x33\xc1\xb9\x0b\xbf\xef\xd1\x32\xce\x2c\xf3\x6a\x6f\x57\xcc\x94\xb4\x28\xad\x89\x4e\xfa\x6e\x30\x45\xcb\x8d\xc3\x41\xe4\x3c\xa2\x94\x98\x9f\x1d\x21\xb5\x49\x26\x82\x4c\x73\xac\x4b\x75\x82\x27\x3c\x99\x09\x00\x77\x5f\x15\x4a\x7b\x8b\x27\x62\x30\x8f\x07\x52\x3e\xc9\xda\x88\x4d\xb2\x25\x70\x99\xae\x16\x2d\x0b\x56\x8b\x40\x7b\xba\x5a\x9c\x11\xf5\xb3\x11\x35\xbf\x28\x90\x59\x95\xcd\x41\xc8\x09\x40\xed\x7e\x98\x8b\x27\x21\xf9\x4d\x18\xa6\x73\xbd\xbc\x81\xdf\xfd\x97\x27\xa7\x91\x64\x15\x4a\xfa\x41\x32\x74\x47\x3b\x5c\x8e\xab\x40\xe8\x57\xd4\xc6\xd9\x72\x7f\x69\xfa\x0d\xef\x1c\xeb\x6d\x21\x0c\x3c\x8b\xb2\x84\x1d\x82\xc6\xba\x64\x39\x72\xd8\x9d\x86\x2c\x66\x4a\xee\xc5\x01\x94\xcc\x11\x58\x59\x42\xae\xa4\x69\x2a\xd4\x06\x0a\x76\x44\xd8\x21\x4a\x68\x6a\xce\x2c\xf2\x6b\x7f\xe7\xd7\x63\x04\x62\x94\xbd\x50\x7e\x6e\x54\xb4\xd1\x6d\xa3\xa4\x93\xcd\x9b\xce\x94\xd6\xe9\xd0\x80\x89\x1f\x1c\x90\x9f\xa3\x65\xa2\x44\x3e\xdc\x3a\xf9\x3c\x99\xc4\x4e\xf4\xbe\xb1\x8c\xa6\x9d\x1f\x9d\x69\x64\x16\x83\xe7\x49\x9c\x13\xfc\x95\x63\xad\x31\x27\xdd\x5c\x68\x64\x86\x4e\xe4\x87\xb0\xc0\x00\xd3\x08\x52\x3d\x43\xee\x08\x70\x38\x0a\x06\xf5\x4b\x30\xc3\x1f\x2e\x3b\xd2\x89\xfd\x9d\x99\x23\xc0\x1c\xe9\x76\xcf\x5f\xb1\xde\x9f\x95\x2a\x91\xc9\x77\x1d\x39\x6f\x80\xbd\x21\xb6\x04\xfc\xf7\xf8\xce\x47\x77\xc0\x71\x04\xb8\x30\x5d\x60\xc8\xb8\xb0\x6c\x57\x26\xd3\xb4\x7f\x18\x30\x36\x68\xd3\x18\x71\xc1\xa2\xf0\x11\x53\x89\xc2\xc8\xe5\x58\x60\xf1\x80\x1f\x5d\x00\x8b\x50\x2e\xe4\x51\xf8\xe1\x0b\xac\x98\x28\xa3\x6b\xb1\x17\xda\xd8\x65\x1c\x47\xae\xa0\x64\x83\xa1\xcb\x36\x1c\x12\x99\x54\xec\x15\xea\x4a\x18\xba\x53\xe6\x82\x02\x1f\x39\xd9\xc5\xfc\xdd\x95\x8b\x82\xd1\x64\x2a\x47\x34\xd1\x13\xf7\x17\xd0\x9f\xc5\x83\x3e\x5c\x28\x7d\x18\xa2\x58\xcc\x7b\xee\x0f\xfa\xd0\xe9\x5c\xe9\x43\xc7\x58\xf5\xe3\x3d\xd3\x68\x31\xd1\x89\x62\xb9\xe7\xe7\x45\xdb\xaa\x27\x94\x11\xb1\xcb\x8e\xf7\x04\x60\x8d\x47\xf5\x84\xd3\xb2\x8c\xd6\x9a\x74\x71\xa4\xf2\x35\x56\xea\xe8\x64\xfd\xa0\x55\x45\xe2\x44\xda\x89\x97\xa6\xee\xce\x8b\xf6\xa6\xa3\xb8\x02\x94\x24\x16\xef\x08\x75\x23\x03\x0f\x77\x45\x7e\x69\x2f\x62\x5d\xc4\x44\xcd\xa8\x3d\xaf\x47\x9c\x81\xd3\xad\x8f\x38\x3d\xa9\xc1\xc2\xb1\x5b\x35\xa4\xf5\x36\x09\x7f\xc8\xde\x94\x5f\x41\x12\x33\xfa\x3c\x99\x38\xdf\xd3\x1a\x91\xf3\x3d\x61\xdd\x04\x20\xc9\x91\x26\x00\xe9\x05\xa0\x08\x23\x72\xdb\xe8\x64\xcd\xd0\xf2\xfc\x50\x9f\x3f\xd0\x80\x30\xd3\xba\xd6\xea\x18\x9d\x41\x8f\x65\x31\xcf\x56\xcc\x16\x0e\xca\x62\x9e\x0d\x89\xd5\xcc\x16\xfd\x77\xbb\x29\x18\xe5\x1b\xf8\xb9\xaa\x98\x90\x43\x8a\xfe\xf0\x3d\x22\x56\x9a\xe4\x1c\x04\x47\x02\x43\xae\x3f\xe0\x22\x97\x1f\xab\xad\xbd\x1a\x8e\x35\x93\xac\x3c\x59\x91\x9b\x87\xda\x2a\x4a\xcd\x12\x52\x1e\x56\xbc\xb9\xf7\x40\x6e\xbb\x55\x8d\xde\x20\xca\xd7\xf6\xb9\x7c\xef\x15\xa7\x36\x4e\x60\x7c\xd7\x57\x61\xee\x80\xa6\x19\xc8\x40\xc5\x21\xce\x4c\xed\xbd\xb9\x81\x0f\xa5\x62\xd6\x67\x3d\x26\x3f\x3f\x24\x4f\x68\x40\xe0\x89\xc2\x46\x7f\x18\xdf\x42\x6f\x34\xed\xfa\x0f\xf0\x25\xf4\xfe\x2b\x30\x51\x36\xd5\x48\x2e\xbe\xb1\xcc\xa2\x63\x30\xcd\x36\x7f\x3c\x2e\x6f\x97\x0f\xbf\x2d\xc3\xd7\x2a\x5b\xce\x17\xcb\x5f\xc2\xd7\xfa\x71\xb9\xec\xbf\x3e\x4c\x17\x77\xd9\x3c\x7c\x6c\xb3\xf5\xfd\x62\x39\xdd\x66\xf3\x51\x4e\x7d\x91\xe1\x19\x4d\xb7\x11\xa3\xf7\x30\x95\x80\x5c\xd8\x50\x9f\x80\xca\xa9\x70\x01\xb1\x07\xe6\xa2\x0f\x14\xcc\x40\xa5\xb8\xd8\x0b\xe4\x60\x0b\x04\x6f\x45\x16\x5f\x2c\xe5\x73\x42\x1a\xd4\x64\x43\xa0\x34\x70\x72\x37\xf4\x3b\x2f\x98\x66\x39\xe5\x21\xd7\x7d\x3a\x28\x64\x5e\x36\x1c\x0d\x65\x39\x6e\x83\x74\xf4\x9e\xf0\xb4\x53\x4c\x73\x60\x92\x43\xcd\x8c\x27\xa0\xaa\x8a\x49\xee\xb6\x13\xe2\x6c\xbe\xd8\x7a\xb8\x60\xb0\xc4\xbc\xc7\x2b\xcb\xd3\x38\xe8\xbc\x50\x06\x25\x30\x99\xd4\x4b\x60\x9a\xc3\x01\x0d\xed\xbd\x6e\x61\x71\x41\x49\x94\x01\x57\x7e\xbc\x77\xa0\x92\x2d\xb6\x60\x16\x84\x05\x53\xa8\xa6\xe4\x40\x31\xc9\x2d\x22\x56\x3f\x9a\x50\xe9\x51\x4d\x43\x83\x92\x14\xc3\xc8\x87\xd4\x5a\xd0\xe9\x5a\xb6\x6b\xa5\xd8\x64\x77\xd9\x6c\xfb\x05\x7b\xa0\xa4\x3c\x98\xc3\x6d\x62\x0e\xb7\x7f\xac\x1e\xe6\xe1\xd7\xe6\xd7\x59\xfb\x6b\xb6\x5e\xac\xb6\xe1\x63\x39\xbd\xcf\x36\xab\xe9\x2c\x6b\xbf\x1f\xe6\x59\x7f\xe3\x22\x56\x9b\x4e\x03\x8e\x95\x2f\x0a\xc6\xb1\x0c\x5c\x67\xb0\x6c\x0a\x22\x51\x74\x9c\x00\x54\xcc\xe6\x05\xf2\x85\xe4\xf8\xe2\xea\xc8\x85\xb4\x9f\xa8\xb8\x22\xfb\x1e\x23\xee\x0c\xbf\x43\xb7\x65\xbb\x01\x28\x32\x19\x32\x35\x8e\x2f\xa0\xf6\x4e\xb1\x96\xed\xfc\x49\xd8\x02\x4d\x7c\x8e\x3e\xd7\xdd\x2b\x4d\x6a\xb6\x6c\xe7\x50\xb8\xaa\xdb\x11\xfa\xad\x40\x5b\xa0\x0e\x76\x43\xc6\xc5\xa2\xcd\xb4\x0f\x2c\xd9\x01\xd1\xf7\x0c\x5d\xdd\x52\xb1\x27\x7f\xca\xc1\x14\x01\x5f\x30\x6f\x9c\xe7\x24\x3e\xfd\xd7\x74\x6f\xc9\x91\x12\xf1\xde\x65\x42\x8c\x6f\x50\x57\xf7\xa2\x7e\x1a\x3d\x1f\x5f\x44\x47\x6a\xd8\x2b\x5d\x31\x4b\x49\xbc\xbf\x7b\x04\xb6\xbb\x88\x26\x64\x28\xcf\x85\xc8\x0b\x67\xf8\xae\x68\xaa\x99\x36\xbe\xe2\x3a\x37\x67\xd5\xd9\xbc\xb7\x77\xb6\xdb\x58\x55\x43\xad\x8c\x70\x78\x49\xbe\x8e\xe7\x22\x6e\x2d\x24\x0a\x1d\x62\x20\x5c\x0c\x8e\xac\x14\xfc\x2a\xd2\x4f\xab\xc0\x6b\x17\xef\xb3\x6e\x3c\x56\xd6\x7b\x98\x96\x65\x72\xa4\x74\x2c\xc8\xf2\x22\x3a\x7d\x02\x69\xc2\x19\x6f\x12\xed\x26\xf6\x33\xae\xd4\xa8\x3d\x11\x69\xf6\x15\xcf\x60\x82\x55\xb4\xf2\x51\x42\x20\x38\xf2\xaf\x3d\xd6\x77\x89\x9e\x94\x06\xa9\x9c\xd9\x52\x81\xd8\x68\x89\x1c\xb4\x43\xe2\x2d\xb7\x66\xda\x0a\x56\xc2\x85\xd5\x0d\x5e\xd2\xf2\x0e\xd2\xc5\x9e\x95\x06\xa9\x58\x2b\x98\x99\x72\xee\xce\x87\x95\xf7\xee\xba\x99\x91\x9c\x69\xa6\xa4\x65\x42\xa2\xa6\x0b\xd6\xf8\xb8\x3e\x4c\x7e\xc6\x43\x56\xb8\xaa\xfd\xb2\x0a\x8d\x61\x87\x64\xa8\xad\x32\xe3\x11\x63\x99\xb6\x33\xd5\x48\xeb\xae\x5c\x0f\xe5\xf6\x2f\x26\x3b\xa2\xf4\xea\x1e\x21\xe6\x8a\xa6\xad\xa8\x30\x81\x41\x65\xd3\x60\xb0\x25\xb8\x52\xfc\xbb\xa4\x6a\xcc\x37\x8b\x95\xb7\x6a\x74\x6d\xbf\x54\xa7\xbe\xd4\x47\x12\x8d\x66\x5b\x31\xdb\x0e\xc0\x98\x3e\x9c\xb7\x0f\x95\x79\x24\x82\xb7\x41\x8e\x7b\x46\x56\xe9\x0e\x80\x62\x98\x54\xb6\x08\xd7\xe9\x49\xaa\x67\x49\x26\x3f\xdb\x24\x41\x9b\xf6\x85\xf5\x06\x0a\x64\xa5\x2d\x4e\xb4\xb5\x40\xa6\xed\x0e\x59\xb0\x2c\x8d\x39\x8a\x23\x72\x0a\xb5\x1a\x0f\x4d\xc9\x34\x08\x69\x51\x53\x7a\xeb\xe2\xad\x2d\xbc\x0f\x08\xed\x3d\x22\xa7\xd1\xd4\x4a\x72\x42\x60\x95\xeb\x11\xa2\xb1\x26\x80\xf8\x98\x4d\xef\xb6\x1f\xff\x71\x0e\xa2\x91\x11\x0c\xe7\x36\x7b\x8a\xb9\x92\x12\x73\xf2\x5f\x56\xc1\x4a\xbc\x08\x84\x59\xa9\x1a\x1f\xf1\x85\x09\xd7\xab\x75\x2f\xbd\x0c\x57\xb0\x73\xde\x4e\xfe\x68\xe1\xcf\x06\xf5\xc9\xb9\x13\xba\x9a\x46\x55\x18\x8e\x2d\x44\x71\x8d\x06\xab\x5d\x89\x06\x3e\x6e\xb7\xab\x1f\x0d\xfc\xff\x4f\x3f\x85\xd3\xef\xf4\x37\x0e\xde\x79\xfb\x83\x72\x3d\x49\x61\x7a\xac\x41\x8e\x5f\xd6\xab\x59\x2b\x01\xc5\x8b\x9d\x46\xf6\x64\xae\x1d\x81\x42\xd5\xe8\xbd\x31\xb3\x5d\xea\xd0\x0a\xee\xe8\xe6\x04\x74\xc7\xf2\x27\x4a\x54\x84\x44\x27\x32\x5d\xfe\x8a\x7c\x0b\x04\x44\x1e\x49\xc0\x39\x5f\x6c\x66\x0f\xcb\x65\x36\xdb\xba\x0c\x6f\xa8\x67\xaa\x2d\xe9\x6c\x9e\x0b\x94\x43\x45\x0b\x3f\x52\x6b\x95\xa3\x31\xe4\x3a\xdb\xe5\xad\x0e\x56\xf3\xe9\xd6\xa7\x91\x9e\xee\x51\xfc\x53\xb4\xf9\x52\x2b\xb9\x57\x3b\x0d\x91\xdb\x32\x74\x85\x99\x3c\x81\x72\xce\x6c\xdf\x68\x1f\x4d\xbd\x19\xfb\xde\x9c\x01\xb6\x53\x8d\x57\xc1\x73\xf0\x7a\xc2\xc6\xb6\xa9\xf4\x10\xca\xb9\x8c\x01\xcb\x33\x33\x60\xf5\x29\xd8\x9f\x67\xe0\x21\xed\x5d\xfb\xac\xb5\x1a\xa9\x9e\x49\x60\x06\x3b\xc6\x13\x05\x3a\x21\xb3\x3e\x47\x1e\x68\x90\xe3\x41\x33\xde\x1f\x70\xa4\xbf\x52\x3c\x61\x79\x22\xb6\x3b\x8c\x2c\x8e\x78\x57\xe2\x50\x58\x1a\x76\x2d\x97\x60\xaa\x54\x66\xb4\xa7\x96\xfd\xb2\x9e\xce\x7d\x0a\xee\x3d\x71\xd4\xa9\x4b\x2b\x88\xd6\x27\x25\x0e\xa1\xf5\x7d\x1f\x5b\xeb\x4f\xdc\x98\x57\xcd\xb0\xef\x4a\x15\x75\x8d\x9a\x59\x35\x36\x15\xe4\x7a\x7d\xe6\xac\xa0\xd6\x68\xed\x69\x36\x3e\x79\xde\xff\x6f\xfd\xa4\x56\xe5\xaa\x64\x12\x3b\xf7\xec\x12\xc0\xee\xcb\xfb\xc5\xce\x3d\xcc\x99\x65\x6f\x2f\x97\x4d\xb5\x54\x1c\x4d\x70\xa1\x6e\x60\x21\x8d\xd5\x0d\x15\x65\xc8\xd3\x49\xaf\xd0\xfb\x73\xc7\x5e\x6b\x3c\x0a\xd5\x98\xcd\x98\xc6\xcf\xe6\x93\xb0\x33\xe8\x88\x1c\x45\xa8\xd3\xce\x3a\x1f\xc2\xcd\xdd\x09\xf9\x94\x14\x7c\xef\x61\xfd\xc6\x4b\x87\xa3\x3e\x7c\xe0\x78\xab\x6f\x31\xac\x2b\xbf\x91\x4d\xfb\x9a\x11\x62\xb2\xe7\x79\x73\x86\xc2\xe9\xee\xa5\x6c\x57\xc7\x08\x8e\xc2\xfc\x6d\xf3\xb0\xfc\x1e\x10\xe9\xeb\xcb\x37\x49\xea\xf2\x9f\x16\x65\x9a\xf6\x7c\x13\xf3\x57\xe4\x1f\xbc\x0b\x05\xc3\x4e\x45\x1f\xed\x9f\x44\x2d\x58\x2f\xcf\x79\x3f\xeb\x7c\x63\xd4\x46\xf5\x26\xf5\x4a\xdb\xc9\x4b\xe7\x1b\x8d\xff\xa7\xb1\x74\x6d\x7c\x12\xc6\x5c\xb7\x19\x91\x9b\x1b\x4d\x87\xa2\x3e\xe7\x78\xd5\xe6\x1c\x8e\x3a\xa8\x28\xb5\x27\x0e\xc6\x8e\x38\x0c\xd3\xd4\xb5\xd2\xd6\x74\x8d\xc4\xa4\x2f\xd5\xbd\x7a\x64\x83\x76\x6a\xdf\x53\x1b\x36\x54\xbb\xa4\xa8\x7f\x8b\x72\x52\xac\xe2\xaa\x77\x75\xfb\xc7\x3a\xdb\x66\xcb\xed\xe2\x61\xd9\x27\x81\xf1\xb3\xd1\x98\xe0\x47\x56\x36\x78\xde\xd2\xe9\x1f\xa8\xdc\xae\xae\x9f\x9b\x3c\x15\x6d\xf2\x02\xab\xf6\x69\xad\x2c\xd5\xf3\xac\x31\x56\x55\xd9\x0b\x49\xff\xb8\xbe\x4b\x24\x73\x0b\x16\xd2\x60\xde\x68\xdc\xde\x6d\x92\xc9\x90\xd4\x45\x3b\xc7\x01\xc5\x7c\x47\xc5\x19\x3d\xb9\x33\x93\xfa\x0e\xad\xbc\x4e\xc0\x0c\x34\x34\xb6\x26\xbc\xb4\x0f\xd5\xd3\x99\x92\x18\xd1\x4b\x27\xfa\x68\x67\xfe\x0b\xc7\xf2\xbd\xcc\xde\x03\x45\x9b\xde\x3e\xd3\xcb\x33\xe8\x8a\x7f\x85\x3f\x1a\xb9\x41\x7b\x97\x1f\xcb\xfc\xb4\xe9\xa2\xd1\xf0\x51\x61\xf0\x27\x82\xc5\xdc\x8b\xe3\x9f\x52\x87\xed\xf0\x15\xe5\xb1\x76\xa4\xb0\x7b\xe5\xf1\xf0\x7f\x8d\xfa\xdc\x2f\x8e\x4b\xf2\x85\xc3\x1a\x95\x31\xb5\xc6\x31\x21\xbf\xaa\x0f\x35\x10\x6c\x44\xae\x73\xb1\x46\xa4\x1a\x11\xea\x0b\x32\x7d\x9e\xfc\x3b\x00\x00\xff\xff\x57\xd8\x83\x83\x03\x23\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 8963, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
