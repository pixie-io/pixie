// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/plugin/pluginpb/service.proto

package pluginpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PluginKind int32

const (
	PLUGIN_KIND_UNKNOWN   PluginKind = 0
	PLUGIN_KIND_RETENTION PluginKind = 1
)

var PluginKind_name = map[int32]string{
	0: "PLUGIN_KIND_UNKNOWN",
	1: "PLUGIN_KIND_RETENTION",
}

var PluginKind_value = map[string]int32{
	"PLUGIN_KIND_UNKNOWN":   0,
	"PLUGIN_KIND_RETENTION": 1,
}

func (PluginKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{0}
}

type GetPluginsRequest struct {
	Kind PluginKind `protobuf:"varint,1,opt,name=kind,proto3,enum=px.services.internal.PluginKind" json:"kind,omitempty"`
}

func (m *GetPluginsRequest) Reset()      { *m = GetPluginsRequest{} }
func (*GetPluginsRequest) ProtoMessage() {}
func (*GetPluginsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{0}
}
func (m *GetPluginsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPluginsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPluginsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPluginsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginsRequest.Merge(m, src)
}
func (m *GetPluginsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPluginsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginsRequest proto.InternalMessageInfo

func (m *GetPluginsRequest) GetKind() PluginKind {
	if m != nil {
		return m.Kind
	}
	return PLUGIN_KIND_UNKNOWN
}

type GetPluginsResponse struct {
	Plugins []*Plugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (m *GetPluginsResponse) Reset()      { *m = GetPluginsResponse{} }
func (*GetPluginsResponse) ProtoMessage() {}
func (*GetPluginsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{1}
}
func (m *GetPluginsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPluginsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPluginsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPluginsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginsResponse.Merge(m, src)
}
func (m *GetPluginsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPluginsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginsResponse proto.InternalMessageInfo

func (m *GetPluginsResponse) GetPlugins() []*Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type GetRetentionPluginsForOrgRequest struct {
	OrgID *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *GetRetentionPluginsForOrgRequest) Reset()      { *m = GetRetentionPluginsForOrgRequest{} }
func (*GetRetentionPluginsForOrgRequest) ProtoMessage() {}
func (*GetRetentionPluginsForOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{2}
}
func (m *GetRetentionPluginsForOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionPluginsForOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionPluginsForOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionPluginsForOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionPluginsForOrgRequest.Merge(m, src)
}
func (m *GetRetentionPluginsForOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionPluginsForOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionPluginsForOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionPluginsForOrgRequest proto.InternalMessageInfo

func (m *GetRetentionPluginsForOrgRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetRetentionPluginsForOrgResponse struct {
	Plugins []*GetRetentionPluginsForOrgResponse_PluginState `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (m *GetRetentionPluginsForOrgResponse) Reset()      { *m = GetRetentionPluginsForOrgResponse{} }
func (*GetRetentionPluginsForOrgResponse) ProtoMessage() {}
func (*GetRetentionPluginsForOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{3}
}
func (m *GetRetentionPluginsForOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionPluginsForOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionPluginsForOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionPluginsForOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionPluginsForOrgResponse.Merge(m, src)
}
func (m *GetRetentionPluginsForOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionPluginsForOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionPluginsForOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionPluginsForOrgResponse proto.InternalMessageInfo

func (m *GetRetentionPluginsForOrgResponse) GetPlugins() []*GetRetentionPluginsForOrgResponse_PluginState {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type GetRetentionPluginsForOrgResponse_PluginState struct {
	Plugin         *Plugin `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	EnabledVersion string  `protobuf:"bytes,2,opt,name=enabled_version,json=enabledVersion,proto3" json:"enabled_version,omitempty"`
}

func (m *GetRetentionPluginsForOrgResponse_PluginState) Reset() {
	*m = GetRetentionPluginsForOrgResponse_PluginState{}
}
func (*GetRetentionPluginsForOrgResponse_PluginState) ProtoMessage() {}
func (*GetRetentionPluginsForOrgResponse_PluginState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{3, 0}
}
func (m *GetRetentionPluginsForOrgResponse_PluginState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionPluginsForOrgResponse_PluginState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionPluginsForOrgResponse_PluginState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionPluginsForOrgResponse_PluginState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionPluginsForOrgResponse_PluginState.Merge(m, src)
}
func (m *GetRetentionPluginsForOrgResponse_PluginState) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionPluginsForOrgResponse_PluginState) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionPluginsForOrgResponse_PluginState.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionPluginsForOrgResponse_PluginState proto.InternalMessageInfo

func (m *GetRetentionPluginsForOrgResponse_PluginState) GetPlugin() *Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

func (m *GetRetentionPluginsForOrgResponse_PluginState) GetEnabledVersion() string {
	if m != nil {
		return m.EnabledVersion
	}
	return ""
}

type Plugin struct {
	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ID               string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Description      string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Logo             string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	LatestVersion    string `protobuf:"bytes,5,opt,name=latest_version,json=latestVersion,proto3" json:"latest_version,omitempty"`
	RetentionEnabled bool   `protobuf:"varint,6,opt,name=retention_enabled,json=retentionEnabled,proto3" json:"retention_enabled,omitempty"`
}

func (m *Plugin) Reset()      { *m = Plugin{} }
func (*Plugin) ProtoMessage() {}
func (*Plugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{4}
}
func (m *Plugin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plugin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plugin.Merge(m, src)
}
func (m *Plugin) XXX_Size() int {
	return m.Size()
}
func (m *Plugin) XXX_DiscardUnknown() {
	xxx_messageInfo_Plugin.DiscardUnknown(m)
}

var xxx_messageInfo_Plugin proto.InternalMessageInfo

func (m *Plugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plugin) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Plugin) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Plugin) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Plugin) GetLatestVersion() string {
	if m != nil {
		return m.LatestVersion
	}
	return ""
}

func (m *Plugin) GetRetentionEnabled() bool {
	if m != nil {
		return m.RetentionEnabled
	}
	return false
}

type GetRetentionPluginConfigRequest struct {
	ID      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *GetRetentionPluginConfigRequest) Reset()      { *m = GetRetentionPluginConfigRequest{} }
func (*GetRetentionPluginConfigRequest) ProtoMessage() {}
func (*GetRetentionPluginConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{5}
}
func (m *GetRetentionPluginConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionPluginConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionPluginConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionPluginConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionPluginConfigRequest.Merge(m, src)
}
func (m *GetRetentionPluginConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionPluginConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionPluginConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionPluginConfigRequest proto.InternalMessageInfo

func (m *GetRetentionPluginConfigRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GetRetentionPluginConfigRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type GetRetentionPluginConfigResponse struct {
	Configurations       map[string]string                                `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PresetScripts        []*GetRetentionPluginConfigResponse_PresetScript `protobuf:"bytes,2,rep,name=preset_scripts,json=presetScripts,proto3" json:"preset_scripts,omitempty"`
	DocumentationURL     string                                           `protobuf:"bytes,3,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`
	DefaultExportURL     string                                           `protobuf:"bytes,4,opt,name=default_export_url,json=defaultExportUrl,proto3" json:"default_export_url,omitempty"`
	AllowCustomExportURL bool                                             `protobuf:"varint,5,opt,name=allow_custom_export_url,json=allowCustomExportUrl,proto3" json:"allow_custom_export_url,omitempty"`
	AllowInsecureTLS     bool                                             `protobuf:"varint,6,opt,name=allow_insecure_tls,json=allowInsecureTls,proto3" json:"allow_insecure_tls,omitempty"`
}

func (m *GetRetentionPluginConfigResponse) Reset()      { *m = GetRetentionPluginConfigResponse{} }
func (*GetRetentionPluginConfigResponse) ProtoMessage() {}
func (*GetRetentionPluginConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{6}
}
func (m *GetRetentionPluginConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionPluginConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionPluginConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionPluginConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionPluginConfigResponse.Merge(m, src)
}
func (m *GetRetentionPluginConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionPluginConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionPluginConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionPluginConfigResponse proto.InternalMessageInfo

func (m *GetRetentionPluginConfigResponse) GetConfigurations() map[string]string {
	if m != nil {
		return m.Configurations
	}
	return nil
}

func (m *GetRetentionPluginConfigResponse) GetPresetScripts() []*GetRetentionPluginConfigResponse_PresetScript {
	if m != nil {
		return m.PresetScripts
	}
	return nil
}

func (m *GetRetentionPluginConfigResponse) GetDocumentationURL() string {
	if m != nil {
		return m.DocumentationURL
	}
	return ""
}

func (m *GetRetentionPluginConfigResponse) GetDefaultExportURL() string {
	if m != nil {
		return m.DefaultExportURL
	}
	return ""
}

func (m *GetRetentionPluginConfigResponse) GetAllowCustomExportURL() bool {
	if m != nil {
		return m.AllowCustomExportURL
	}
	return false
}

func (m *GetRetentionPluginConfigResponse) GetAllowInsecureTLS() bool {
	if m != nil {
		return m.AllowInsecureTLS
	}
	return false
}

type GetRetentionPluginConfigResponse_PresetScript struct {
	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description       string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DefaultFrequencyS int64  `protobuf:"varint,3,opt,name=default_frequency_s,json=defaultFrequencyS,proto3" json:"default_frequency_s,omitempty"`
	Script            string `protobuf:"bytes,4,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *GetRetentionPluginConfigResponse_PresetScript) Reset() {
	*m = GetRetentionPluginConfigResponse_PresetScript{}
}
func (*GetRetentionPluginConfigResponse_PresetScript) ProtoMessage() {}
func (*GetRetentionPluginConfigResponse_PresetScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{6, 1}
}
func (m *GetRetentionPluginConfigResponse_PresetScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionPluginConfigResponse_PresetScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionPluginConfigResponse_PresetScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionPluginConfigResponse_PresetScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionPluginConfigResponse_PresetScript.Merge(m, src)
}
func (m *GetRetentionPluginConfigResponse_PresetScript) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionPluginConfigResponse_PresetScript) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionPluginConfigResponse_PresetScript.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionPluginConfigResponse_PresetScript proto.InternalMessageInfo

func (m *GetRetentionPluginConfigResponse_PresetScript) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRetentionPluginConfigResponse_PresetScript) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetRetentionPluginConfigResponse_PresetScript) GetDefaultFrequencyS() int64 {
	if m != nil {
		return m.DefaultFrequencyS
	}
	return 0
}

func (m *GetRetentionPluginConfigResponse_PresetScript) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

type GetOrgRetentionPluginConfigRequest struct {
	PluginID string       `protobuf:"bytes,1,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	OrgID    *uuidpb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *GetOrgRetentionPluginConfigRequest) Reset()      { *m = GetOrgRetentionPluginConfigRequest{} }
func (*GetOrgRetentionPluginConfigRequest) ProtoMessage() {}
func (*GetOrgRetentionPluginConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{7}
}
func (m *GetOrgRetentionPluginConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgRetentionPluginConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgRetentionPluginConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgRetentionPluginConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgRetentionPluginConfigRequest.Merge(m, src)
}
func (m *GetOrgRetentionPluginConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgRetentionPluginConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgRetentionPluginConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgRetentionPluginConfigRequest proto.InternalMessageInfo

func (m *GetOrgRetentionPluginConfigRequest) GetPluginID() string {
	if m != nil {
		return m.PluginID
	}
	return ""
}

func (m *GetOrgRetentionPluginConfigRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetOrgRetentionPluginConfigResponse struct {
	Configurations  map[string]string `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomExportUrl string            `protobuf:"bytes,2,opt,name=custom_export_url,json=customExportUrl,proto3" json:"custom_export_url,omitempty"`
	InsecureTLS     bool              `protobuf:"varint,3,opt,name=insecure_tls,json=insecureTls,proto3" json:"insecure_tls,omitempty"`
}

func (m *GetOrgRetentionPluginConfigResponse) Reset()      { *m = GetOrgRetentionPluginConfigResponse{} }
func (*GetOrgRetentionPluginConfigResponse) ProtoMessage() {}
func (*GetOrgRetentionPluginConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{8}
}
func (m *GetOrgRetentionPluginConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrgRetentionPluginConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrgRetentionPluginConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrgRetentionPluginConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrgRetentionPluginConfigResponse.Merge(m, src)
}
func (m *GetOrgRetentionPluginConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrgRetentionPluginConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrgRetentionPluginConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrgRetentionPluginConfigResponse proto.InternalMessageInfo

func (m *GetOrgRetentionPluginConfigResponse) GetConfigurations() map[string]string {
	if m != nil {
		return m.Configurations
	}
	return nil
}

func (m *GetOrgRetentionPluginConfigResponse) GetCustomExportUrl() string {
	if m != nil {
		return m.CustomExportUrl
	}
	return ""
}

func (m *GetOrgRetentionPluginConfigResponse) GetInsecureTLS() bool {
	if m != nil {
		return m.InsecureTLS
	}
	return false
}

type UpdateOrgRetentionPluginConfigRequest struct {
	OrgID           *uuidpb.UUID       `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	PluginID        string             `protobuf:"bytes,2,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	Configurations  map[string]string  `protobuf:"bytes,3,rep,name=configurations,proto3" json:"configurations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Enabled         *types.BoolValue   `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Version         *types.StringValue `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	CustomExportUrl *types.StringValue `protobuf:"bytes,6,opt,name=custom_export_url,json=customExportUrl,proto3" json:"custom_export_url,omitempty"`
	InsecureTLS     *types.BoolValue   `protobuf:"bytes,7,opt,name=insecure_tls,json=insecureTls,proto3" json:"insecure_tls,omitempty"`
	DisablePresets  *types.BoolValue   `protobuf:"bytes,8,opt,name=disable_presets,json=disablePresets,proto3" json:"disable_presets,omitempty"`
}

func (m *UpdateOrgRetentionPluginConfigRequest) Reset()      { *m = UpdateOrgRetentionPluginConfigRequest{} }
func (*UpdateOrgRetentionPluginConfigRequest) ProtoMessage() {}
func (*UpdateOrgRetentionPluginConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{9}
}
func (m *UpdateOrgRetentionPluginConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrgRetentionPluginConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrgRetentionPluginConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrgRetentionPluginConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrgRetentionPluginConfigRequest.Merge(m, src)
}
func (m *UpdateOrgRetentionPluginConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrgRetentionPluginConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrgRetentionPluginConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrgRetentionPluginConfigRequest proto.InternalMessageInfo

func (m *UpdateOrgRetentionPluginConfigRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *UpdateOrgRetentionPluginConfigRequest) GetPluginID() string {
	if m != nil {
		return m.PluginID
	}
	return ""
}

func (m *UpdateOrgRetentionPluginConfigRequest) GetConfigurations() map[string]string {
	if m != nil {
		return m.Configurations
	}
	return nil
}

func (m *UpdateOrgRetentionPluginConfigRequest) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *UpdateOrgRetentionPluginConfigRequest) GetVersion() *types.StringValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *UpdateOrgRetentionPluginConfigRequest) GetCustomExportUrl() *types.StringValue {
	if m != nil {
		return m.CustomExportUrl
	}
	return nil
}

func (m *UpdateOrgRetentionPluginConfigRequest) GetInsecureTLS() *types.BoolValue {
	if m != nil {
		return m.InsecureTLS
	}
	return nil
}

func (m *UpdateOrgRetentionPluginConfigRequest) GetDisablePresets() *types.BoolValue {
	if m != nil {
		return m.DisablePresets
	}
	return nil
}

type UpdateOrgRetentionPluginConfigResponse struct {
}

func (m *UpdateOrgRetentionPluginConfigResponse) Reset() {
	*m = UpdateOrgRetentionPluginConfigResponse{}
}
func (*UpdateOrgRetentionPluginConfigResponse) ProtoMessage() {}
func (*UpdateOrgRetentionPluginConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{10}
}
func (m *UpdateOrgRetentionPluginConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrgRetentionPluginConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrgRetentionPluginConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrgRetentionPluginConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrgRetentionPluginConfigResponse.Merge(m, src)
}
func (m *UpdateOrgRetentionPluginConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrgRetentionPluginConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrgRetentionPluginConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrgRetentionPluginConfigResponse proto.InternalMessageInfo

type GetRetentionScriptsRequest struct {
	OrgID *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *GetRetentionScriptsRequest) Reset()      { *m = GetRetentionScriptsRequest{} }
func (*GetRetentionScriptsRequest) ProtoMessage() {}
func (*GetRetentionScriptsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{11}
}
func (m *GetRetentionScriptsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionScriptsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionScriptsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionScriptsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionScriptsRequest.Merge(m, src)
}
func (m *GetRetentionScriptsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionScriptsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionScriptsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionScriptsRequest proto.InternalMessageInfo

func (m *GetRetentionScriptsRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type RetentionScript struct {
	ScriptID    *uuidpb.UUID   `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	ScriptName  string         `protobuf:"bytes,2,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
	Description string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FrequencyS  int64          `protobuf:"varint,4,opt,name=frequency_s,json=frequencyS,proto3" json:"frequency_s,omitempty"`
	ClusterIDs  []*uuidpb.UUID `protobuf:"bytes,5,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	PluginId    string         `protobuf:"bytes,6,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	Enabled     bool           `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IsPreset    bool           `protobuf:"varint,8,opt,name=is_preset,json=isPreset,proto3" json:"is_preset,omitempty"`
}

func (m *RetentionScript) Reset()      { *m = RetentionScript{} }
func (*RetentionScript) ProtoMessage() {}
func (*RetentionScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{12}
}
func (m *RetentionScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetentionScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetentionScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetentionScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetentionScript.Merge(m, src)
}
func (m *RetentionScript) XXX_Size() int {
	return m.Size()
}
func (m *RetentionScript) XXX_DiscardUnknown() {
	xxx_messageInfo_RetentionScript.DiscardUnknown(m)
}

var xxx_messageInfo_RetentionScript proto.InternalMessageInfo

func (m *RetentionScript) GetScriptID() *uuidpb.UUID {
	if m != nil {
		return m.ScriptID
	}
	return nil
}

func (m *RetentionScript) GetScriptName() string {
	if m != nil {
		return m.ScriptName
	}
	return ""
}

func (m *RetentionScript) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RetentionScript) GetFrequencyS() int64 {
	if m != nil {
		return m.FrequencyS
	}
	return 0
}

func (m *RetentionScript) GetClusterIDs() []*uuidpb.UUID {
	if m != nil {
		return m.ClusterIDs
	}
	return nil
}

func (m *RetentionScript) GetPluginId() string {
	if m != nil {
		return m.PluginId
	}
	return ""
}

func (m *RetentionScript) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *RetentionScript) GetIsPreset() bool {
	if m != nil {
		return m.IsPreset
	}
	return false
}

type DetailedRetentionScript struct {
	Script    *RetentionScript `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	Contents  string           `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	ExportURL string           `protobuf:"bytes,3,opt,name=export_url,json=exportUrl,proto3" json:"export_url,omitempty"`
}

func (m *DetailedRetentionScript) Reset()      { *m = DetailedRetentionScript{} }
func (*DetailedRetentionScript) ProtoMessage() {}
func (*DetailedRetentionScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{13}
}
func (m *DetailedRetentionScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetailedRetentionScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetailedRetentionScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetailedRetentionScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetailedRetentionScript.Merge(m, src)
}
func (m *DetailedRetentionScript) XXX_Size() int {
	return m.Size()
}
func (m *DetailedRetentionScript) XXX_DiscardUnknown() {
	xxx_messageInfo_DetailedRetentionScript.DiscardUnknown(m)
}

var xxx_messageInfo_DetailedRetentionScript proto.InternalMessageInfo

func (m *DetailedRetentionScript) GetScript() *RetentionScript {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *DetailedRetentionScript) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func (m *DetailedRetentionScript) GetExportURL() string {
	if m != nil {
		return m.ExportURL
	}
	return ""
}

type GetRetentionScriptsResponse struct {
	Scripts []*RetentionScript `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
}

func (m *GetRetentionScriptsResponse) Reset()      { *m = GetRetentionScriptsResponse{} }
func (*GetRetentionScriptsResponse) ProtoMessage() {}
func (*GetRetentionScriptsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{14}
}
func (m *GetRetentionScriptsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionScriptsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionScriptsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionScriptsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionScriptsResponse.Merge(m, src)
}
func (m *GetRetentionScriptsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionScriptsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionScriptsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionScriptsResponse proto.InternalMessageInfo

func (m *GetRetentionScriptsResponse) GetScripts() []*RetentionScript {
	if m != nil {
		return m.Scripts
	}
	return nil
}

type GetRetentionScriptRequest struct {
	OrgID    *uuidpb.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ScriptID *uuidpb.UUID `protobuf:"bytes,2,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
}

func (m *GetRetentionScriptRequest) Reset()      { *m = GetRetentionScriptRequest{} }
func (*GetRetentionScriptRequest) ProtoMessage() {}
func (*GetRetentionScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{15}
}
func (m *GetRetentionScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionScriptRequest.Merge(m, src)
}
func (m *GetRetentionScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionScriptRequest proto.InternalMessageInfo

func (m *GetRetentionScriptRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *GetRetentionScriptRequest) GetScriptID() *uuidpb.UUID {
	if m != nil {
		return m.ScriptID
	}
	return nil
}

type GetRetentionScriptResponse struct {
	Script *DetailedRetentionScript `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *GetRetentionScriptResponse) Reset()      { *m = GetRetentionScriptResponse{} }
func (*GetRetentionScriptResponse) ProtoMessage() {}
func (*GetRetentionScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{16}
}
func (m *GetRetentionScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionScriptResponse.Merge(m, src)
}
func (m *GetRetentionScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionScriptResponse proto.InternalMessageInfo

func (m *GetRetentionScriptResponse) GetScript() *DetailedRetentionScript {
	if m != nil {
		return m.Script
	}
	return nil
}

type CreateRetentionScriptRequest struct {
	Script *DetailedRetentionScript `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	OrgID  *uuidpb.UUID             `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *CreateRetentionScriptRequest) Reset()      { *m = CreateRetentionScriptRequest{} }
func (*CreateRetentionScriptRequest) ProtoMessage() {}
func (*CreateRetentionScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{17}
}
func (m *CreateRetentionScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRetentionScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRetentionScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRetentionScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRetentionScriptRequest.Merge(m, src)
}
func (m *CreateRetentionScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRetentionScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRetentionScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRetentionScriptRequest proto.InternalMessageInfo

func (m *CreateRetentionScriptRequest) GetScript() *DetailedRetentionScript {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *CreateRetentionScriptRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type CreateRetentionScriptResponse struct {
	ID *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CreateRetentionScriptResponse) Reset()      { *m = CreateRetentionScriptResponse{} }
func (*CreateRetentionScriptResponse) ProtoMessage() {}
func (*CreateRetentionScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{18}
}
func (m *CreateRetentionScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRetentionScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRetentionScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRetentionScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRetentionScriptResponse.Merge(m, src)
}
func (m *CreateRetentionScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateRetentionScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRetentionScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRetentionScriptResponse proto.InternalMessageInfo

func (m *CreateRetentionScriptResponse) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type UpdateRetentionScriptRequest struct {
	ScriptID    *uuidpb.UUID       `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	ScriptName  *types.StringValue `protobuf:"bytes,2,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
	Description *types.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     *types.BoolValue   `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	FrequencyS  *types.Int64Value  `protobuf:"bytes,5,opt,name=frequency_s,json=frequencyS,proto3" json:"frequency_s,omitempty"`
	Contents    *types.StringValue `protobuf:"bytes,6,opt,name=contents,proto3" json:"contents,omitempty"`
	ExportUrl   *types.StringValue `protobuf:"bytes,7,opt,name=export_url,json=exportUrl,proto3" json:"export_url,omitempty"`
	ClusterIDs  []*uuidpb.UUID     `protobuf:"bytes,8,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (m *UpdateRetentionScriptRequest) Reset()      { *m = UpdateRetentionScriptRequest{} }
func (*UpdateRetentionScriptRequest) ProtoMessage() {}
func (*UpdateRetentionScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{19}
}
func (m *UpdateRetentionScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRetentionScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRetentionScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRetentionScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRetentionScriptRequest.Merge(m, src)
}
func (m *UpdateRetentionScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRetentionScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRetentionScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRetentionScriptRequest proto.InternalMessageInfo

func (m *UpdateRetentionScriptRequest) GetScriptID() *uuidpb.UUID {
	if m != nil {
		return m.ScriptID
	}
	return nil
}

func (m *UpdateRetentionScriptRequest) GetScriptName() *types.StringValue {
	if m != nil {
		return m.ScriptName
	}
	return nil
}

func (m *UpdateRetentionScriptRequest) GetDescription() *types.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *UpdateRetentionScriptRequest) GetEnabled() *types.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *UpdateRetentionScriptRequest) GetFrequencyS() *types.Int64Value {
	if m != nil {
		return m.FrequencyS
	}
	return nil
}

func (m *UpdateRetentionScriptRequest) GetContents() *types.StringValue {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *UpdateRetentionScriptRequest) GetExportUrl() *types.StringValue {
	if m != nil {
		return m.ExportUrl
	}
	return nil
}

func (m *UpdateRetentionScriptRequest) GetClusterIDs() []*uuidpb.UUID {
	if m != nil {
		return m.ClusterIDs
	}
	return nil
}

type UpdateRetentionScriptResponse struct {
}

func (m *UpdateRetentionScriptResponse) Reset()      { *m = UpdateRetentionScriptResponse{} }
func (*UpdateRetentionScriptResponse) ProtoMessage() {}
func (*UpdateRetentionScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{20}
}
func (m *UpdateRetentionScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRetentionScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRetentionScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRetentionScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRetentionScriptResponse.Merge(m, src)
}
func (m *UpdateRetentionScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRetentionScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRetentionScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRetentionScriptResponse proto.InternalMessageInfo

type DeleteRetentionScriptRequest struct {
	ID    *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgID *uuidpb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *DeleteRetentionScriptRequest) Reset()      { *m = DeleteRetentionScriptRequest{} }
func (*DeleteRetentionScriptRequest) ProtoMessage() {}
func (*DeleteRetentionScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{21}
}
func (m *DeleteRetentionScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRetentionScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRetentionScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRetentionScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRetentionScriptRequest.Merge(m, src)
}
func (m *DeleteRetentionScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRetentionScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRetentionScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRetentionScriptRequest proto.InternalMessageInfo

func (m *DeleteRetentionScriptRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *DeleteRetentionScriptRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type DeleteRetentionScriptResponse struct {
}

func (m *DeleteRetentionScriptResponse) Reset()      { *m = DeleteRetentionScriptResponse{} }
func (*DeleteRetentionScriptResponse) ProtoMessage() {}
func (*DeleteRetentionScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1ae703d1aa3a9a, []int{22}
}
func (m *DeleteRetentionScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRetentionScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRetentionScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRetentionScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRetentionScriptResponse.Merge(m, src)
}
func (m *DeleteRetentionScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRetentionScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRetentionScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRetentionScriptResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("px.services.internal.PluginKind", PluginKind_name, PluginKind_value)
	proto.RegisterType((*GetPluginsRequest)(nil), "px.services.internal.GetPluginsRequest")
	proto.RegisterType((*GetPluginsResponse)(nil), "px.services.internal.GetPluginsResponse")
	proto.RegisterType((*GetRetentionPluginsForOrgRequest)(nil), "px.services.internal.GetRetentionPluginsForOrgRequest")
	proto.RegisterType((*GetRetentionPluginsForOrgResponse)(nil), "px.services.internal.GetRetentionPluginsForOrgResponse")
	proto.RegisterType((*GetRetentionPluginsForOrgResponse_PluginState)(nil), "px.services.internal.GetRetentionPluginsForOrgResponse.PluginState")
	proto.RegisterType((*Plugin)(nil), "px.services.internal.Plugin")
	proto.RegisterType((*GetRetentionPluginConfigRequest)(nil), "px.services.internal.GetRetentionPluginConfigRequest")
	proto.RegisterType((*GetRetentionPluginConfigResponse)(nil), "px.services.internal.GetRetentionPluginConfigResponse")
	proto.RegisterMapType((map[string]string)(nil), "px.services.internal.GetRetentionPluginConfigResponse.ConfigurationsEntry")
	proto.RegisterType((*GetRetentionPluginConfigResponse_PresetScript)(nil), "px.services.internal.GetRetentionPluginConfigResponse.PresetScript")
	proto.RegisterType((*GetOrgRetentionPluginConfigRequest)(nil), "px.services.internal.GetOrgRetentionPluginConfigRequest")
	proto.RegisterType((*GetOrgRetentionPluginConfigResponse)(nil), "px.services.internal.GetOrgRetentionPluginConfigResponse")
	proto.RegisterMapType((map[string]string)(nil), "px.services.internal.GetOrgRetentionPluginConfigResponse.ConfigurationsEntry")
	proto.RegisterType((*UpdateOrgRetentionPluginConfigRequest)(nil), "px.services.internal.UpdateOrgRetentionPluginConfigRequest")
	proto.RegisterMapType((map[string]string)(nil), "px.services.internal.UpdateOrgRetentionPluginConfigRequest.ConfigurationsEntry")
	proto.RegisterType((*UpdateOrgRetentionPluginConfigResponse)(nil), "px.services.internal.UpdateOrgRetentionPluginConfigResponse")
	proto.RegisterType((*GetRetentionScriptsRequest)(nil), "px.services.internal.GetRetentionScriptsRequest")
	proto.RegisterType((*RetentionScript)(nil), "px.services.internal.RetentionScript")
	proto.RegisterType((*DetailedRetentionScript)(nil), "px.services.internal.DetailedRetentionScript")
	proto.RegisterType((*GetRetentionScriptsResponse)(nil), "px.services.internal.GetRetentionScriptsResponse")
	proto.RegisterType((*GetRetentionScriptRequest)(nil), "px.services.internal.GetRetentionScriptRequest")
	proto.RegisterType((*GetRetentionScriptResponse)(nil), "px.services.internal.GetRetentionScriptResponse")
	proto.RegisterType((*CreateRetentionScriptRequest)(nil), "px.services.internal.CreateRetentionScriptRequest")
	proto.RegisterType((*CreateRetentionScriptResponse)(nil), "px.services.internal.CreateRetentionScriptResponse")
	proto.RegisterType((*UpdateRetentionScriptRequest)(nil), "px.services.internal.UpdateRetentionScriptRequest")
	proto.RegisterType((*UpdateRetentionScriptResponse)(nil), "px.services.internal.UpdateRetentionScriptResponse")
	proto.RegisterType((*DeleteRetentionScriptRequest)(nil), "px.services.internal.DeleteRetentionScriptRequest")
	proto.RegisterType((*DeleteRetentionScriptResponse)(nil), "px.services.internal.DeleteRetentionScriptResponse")
}

func init() {
	proto.RegisterFile("src/cloud/plugin/pluginpb/service.proto", fileDescriptor_0b1ae703d1aa3a9a)
}

var fileDescriptor_0b1ae703d1aa3a9a = []byte{
	// 1680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4b, 0x6f, 0xdb, 0xc6,
	0x16, 0x36, 0x65, 0x5b, 0x96, 0x8e, 0xe2, 0xd7, 0xd8, 0x49, 0x14, 0xd9, 0x91, 0x7c, 0x79, 0x91,
	0x6b, 0xdf, 0xdc, 0x5b, 0x29, 0x71, 0x5c, 0x37, 0xcd, 0xab, 0x89, 0x2d, 0xc7, 0x51, 0xe3, 0xca,
	0x01, 0x1d, 0xa5, 0x40, 0x81, 0x56, 0xa0, 0xc5, 0xb1, 0xc0, 0x86, 0x21, 0x55, 0x3e, 0xe2, 0x24,
	0xab, 0xa0, 0x8b, 0x02, 0x2d, 0x82, 0xa2, 0xe8, 0xaa, 0x40, 0x77, 0x5d, 0xf5, 0x57, 0xb4, 0xcb,
	0x76, 0x99, 0x65, 0x16, 0x85, 0xd0, 0x30, 0x9b, 0x2e, 0xfd, 0x03, 0xba, 0x28, 0x38, 0x33, 0x94,
	0x48, 0x8a, 0xd4, 0xcb, 0x59, 0x59, 0x9c, 0x39, 0xe7, 0xcc, 0x77, 0xe6, 0x7c, 0xe7, 0x41, 0x1a,
	0x96, 0x0d, 0xbd, 0x56, 0xa8, 0x29, 0x9a, 0x25, 0x15, 0x1a, 0x8a, 0x55, 0x97, 0x55, 0xf6, 0xa7,
	0xb1, 0x5f, 0x30, 0xb0, 0xfe, 0x58, 0xae, 0xe1, 0x7c, 0x43, 0xd7, 0x4c, 0x0d, 0xcd, 0x37, 0x9e,
	0xe4, 0xd9, 0x8a, 0x91, 0x97, 0x55, 0x13, 0xeb, 0xaa, 0xa8, 0x64, 0xe6, 0xeb, 0x5a, 0x5d, 0x23,
	0x02, 0x05, 0xe7, 0x17, 0x95, 0xcd, 0x64, 0xeb, 0x9a, 0x56, 0x57, 0x70, 0x81, 0x3c, 0xed, 0x5b,
	0x07, 0x85, 0x43, 0x5d, 0x6c, 0x34, 0xb0, 0x6e, 0xb0, 0xfd, 0x9c, 0x73, 0xa8, 0xd8, 0x90, 0xa9,
	0x40, 0xc1, 0xb2, 0x64, 0xa9, 0xb1, 0x4f, 0xfe, 0x50, 0x01, 0xbe, 0x04, 0xb3, 0xdb, 0xd8, 0xbc,
	0x47, 0x90, 0x18, 0x02, 0xfe, 0xc2, 0xc2, 0x86, 0x89, 0xd6, 0x60, 0xec, 0xa1, 0xac, 0x4a, 0x69,
	0x6e, 0x89, 0x5b, 0x99, 0x5a, 0x5d, 0xca, 0x87, 0x01, 0xca, 0x53, 0x9d, 0xbb, 0xb2, 0x2a, 0x09,
	0x44, 0x9a, 0xdf, 0x01, 0xe4, 0x35, 0x65, 0x34, 0x34, 0xd5, 0xc0, 0x68, 0x1d, 0x26, 0xa8, 0x9f,
	0x46, 0x9a, 0x5b, 0x1a, 0x5d, 0x49, 0xad, 0x2e, 0x76, 0x33, 0x27, 0xb8, 0xc2, 0x7c, 0x05, 0x96,
	0xb6, 0xb1, 0x29, 0x60, 0x13, 0xab, 0xa6, 0xac, 0xa9, 0xcc, 0xec, 0x6d, 0x4d, 0xdf, 0xd5, 0xeb,
	0x2e, 0xce, 0x8b, 0x10, 0xd7, 0xf4, 0x7a, 0x55, 0xa6, 0x48, 0x53, 0xab, 0xd3, 0x8e, 0x69, 0xea,
	0x63, 0xbe, 0x52, 0x29, 0x15, 0x37, 0x92, 0x76, 0x33, 0x37, 0xbe, 0xab, 0xd7, 0x4b, 0x45, 0x61,
	0x5c, 0xd3, 0xeb, 0x25, 0x89, 0x3f, 0xe2, 0xe0, 0x5f, 0x5d, 0xec, 0x32, 0xd0, 0x9f, 0x06, 0x41,
	0x6f, 0x86, 0x83, 0xee, 0x69, 0x89, 0xb9, 0xb5, 0x67, 0x8a, 0x26, 0x6e, 0xf9, 0x96, 0x51, 0x20,
	0xe5, 0x59, 0x47, 0x6b, 0x10, 0xa7, 0x3b, 0xcc, 0x8d, 0xee, 0x37, 0xc4, 0x64, 0xd1, 0x32, 0x4c,
	0x63, 0x55, 0xdc, 0x57, 0xb0, 0x54, 0x7d, 0x8c, 0x75, 0x43, 0xd6, 0xd4, 0x74, 0x6c, 0x89, 0x5b,
	0x49, 0x0a, 0x53, 0x6c, 0xf9, 0x01, 0x5d, 0xe5, 0x7f, 0xe1, 0x20, 0x4e, 0x75, 0x11, 0x82, 0x31,
	0x55, 0x7c, 0x84, 0xc9, 0x39, 0x49, 0x81, 0xfc, 0x46, 0xa7, 0x20, 0x26, 0x4b, 0x54, 0x75, 0x23,
	0x6e, 0x37, 0x73, 0xb1, 0x52, 0x51, 0x88, 0xc9, 0x12, 0x5a, 0x82, 0x94, 0x84, 0x8d, 0x9a, 0x2e,
	0x37, 0x1c, 0xef, 0xd2, 0xa3, 0x44, 0xc5, 0xbb, 0xe4, 0x58, 0x53, 0xb4, 0xba, 0x96, 0x1e, 0xa3,
	0xd6, 0x9c, 0xdf, 0xe8, 0x1c, 0x4c, 0x29, 0xa2, 0x89, 0x0d, 0xb3, 0x05, 0x6a, 0x9c, 0xec, 0x4e,
	0xd2, 0x55, 0x86, 0x09, 0xfd, 0x0f, 0x66, 0x75, 0xf7, 0xe2, 0xaa, 0x0c, 0x6f, 0x3a, 0xbe, 0xc4,
	0xad, 0x24, 0x84, 0x99, 0xd6, 0xc6, 0x16, 0x5d, 0xe7, 0xf7, 0x20, 0xd7, 0x79, 0xd1, 0x9b, 0x9a,
	0x7a, 0x20, 0xb7, 0x98, 0x40, 0x9d, 0xe0, 0x3a, 0x9c, 0x48, 0xc3, 0x84, 0xff, 0x72, 0xdc, 0x47,
	0xfe, 0x68, 0x3c, 0x8c, 0x60, 0xae, 0x55, 0xc6, 0x03, 0x1d, 0xa6, 0x6a, 0x64, 0xc5, 0xd2, 0x45,
	0x47, 0xc8, 0xa5, 0xc3, 0x87, 0xfd, 0xd2, 0xc1, 0x6f, 0x2f, 0xbf, 0xe9, 0x33, 0xb6, 0xa5, 0x9a,
	0xfa, 0x53, 0x21, 0x70, 0x02, 0xfa, 0x1c, 0xa6, 0x1a, 0x3a, 0x36, 0xb0, 0x59, 0xa5, 0x37, 0x6d,
	0xa4, 0x63, 0x83, 0x51, 0x30, 0x70, 0xe6, 0x3d, 0x62, 0x6c, 0x8f, 0xd8, 0x12, 0x26, 0x1b, 0x9e,
	0x27, 0x03, 0xdd, 0x82, 0x59, 0x49, 0xab, 0x59, 0x8f, 0xb0, 0x6a, 0x92, 0xd3, 0xab, 0x96, 0xae,
	0xd0, 0x48, 0x6f, 0xcc, 0xdb, 0xcd, 0xdc, 0x4c, 0xd1, 0xbb, 0x59, 0x11, 0x76, 0x84, 0x19, 0x9f,
	0x78, 0x45, 0x57, 0xd0, 0x06, 0x20, 0x09, 0x1f, 0x88, 0x96, 0x62, 0x56, 0xf1, 0x93, 0x86, 0xa6,
	0x9b, 0xc4, 0xc6, 0x98, 0xc7, 0x06, 0xdd, 0xdd, 0x22, 0x9b, 0xd4, 0x86, 0x6f, 0x45, 0x57, 0xd0,
	0x2e, 0x9c, 0x16, 0x15, 0x45, 0x3b, 0xac, 0xd6, 0x2c, 0xc3, 0xd4, 0x1e, 0x79, 0x0d, 0x39, 0xec,
	0x49, 0x6c, 0xa4, 0xed, 0x66, 0x6e, 0xfe, 0x96, 0x23, 0xb2, 0x49, 0x24, 0xda, 0xc6, 0xe6, 0xc5,
	0x8e, 0x55, 0x0a, 0x8a, 0x1a, 0x94, 0x55, 0x03, 0xd7, 0x2c, 0x1d, 0x57, 0x4d, 0xc5, 0xa0, 0xfc,
	0xa2, 0xa0, 0x88, 0xad, 0x12, 0xdb, 0xbc, 0xbf, 0xb3, 0x27, 0xcc, 0x88, 0xbe, 0x15, 0xc5, 0xc8,
	0xdc, 0x82, 0xb9, 0x90, 0x70, 0xa1, 0x19, 0x18, 0x7d, 0x88, 0x9f, 0xb2, 0x0c, 0x72, 0x7e, 0xa2,
	0x79, 0x18, 0x7f, 0x2c, 0x2a, 0x16, 0x66, 0x0c, 0xa3, 0x0f, 0x57, 0x62, 0x97, 0xb9, 0xcc, 0x0b,
	0x0e, 0x4e, 0x78, 0xaf, 0x3f, 0x34, 0xff, 0x02, 0x79, 0x16, 0xeb, 0xcc, 0xb3, 0x3c, 0xcc, 0xb9,
	0x57, 0x7c, 0xa0, 0x3b, 0x84, 0x57, 0x6b, 0x4f, 0xab, 0x06, 0x89, 0xd3, 0xa8, 0x30, 0xcb, 0xb6,
	0x6e, 0xbb, 0x3b, 0x7b, 0xe8, 0x14, 0xc4, 0xa9, 0x32, 0xcb, 0x4c, 0xf6, 0xc4, 0x7f, 0xc9, 0x01,
	0xbf, 0x8d, 0x4d, 0x52, 0x9e, 0xba, 0xe4, 0xd2, 0x7f, 0x21, 0x49, 0x4b, 0x4c, 0xb5, 0x95, 0x52,
	0x27, 0xec, 0x66, 0x2e, 0x41, 0x65, 0x4b, 0x45, 0x21, 0x41, 0xb7, 0x4b, 0x92, 0xa7, 0x00, 0xc7,
	0xfa, 0x2d, 0xc0, 0xbf, 0xc6, 0xe0, 0xdf, 0x5d, 0x41, 0xb0, 0xd4, 0xb3, 0x22, 0x52, 0xef, 0xa3,
	0xc8, 0x34, 0xe8, 0x65, 0xb2, 0xaf, 0xec, 0x3b, 0x0f, 0xb3, 0x9d, 0x24, 0xa4, 0x31, 0x99, 0xae,
	0x05, 0x58, 0xb6, 0x0a, 0x27, 0x7c, 0xfc, 0x1a, 0x25, 0xfc, 0x9a, 0xb6, 0x9b, 0xb9, 0x94, 0x97,
	0x5a, 0x29, 0xf9, 0xad, 0xb2, 0x8a, 0xff, 0x76, 0x1c, 0xce, 0x55, 0x1a, 0x92, 0x68, 0xe2, 0x5e,
	0x91, 0x1c, 0xbc, 0x3f, 0xfa, 0x83, 0x1f, 0xeb, 0x1a, 0xfc, 0xc3, 0x8e, 0x08, 0x8d, 0x92, 0x08,
	0xed, 0x86, 0x47, 0xa8, 0x2f, 0xc8, 0x7d, 0xc5, 0x68, 0x0d, 0x26, 0xdc, 0x96, 0x31, 0x46, 0xfc,
	0xca, 0xe4, 0xe9, 0x18, 0x94, 0x77, 0xc7, 0xa0, 0xfc, 0x86, 0xa6, 0x29, 0x0f, 0x9c, 0x1b, 0x13,
	0x5c, 0x51, 0x67, 0x10, 0xf1, 0xb6, 0x24, 0xa7, 0xcd, 0x06, 0xb5, 0xf6, 0x4c, 0x5d, 0x56, 0xeb,
	0x4c, 0x8f, 0x09, 0xa3, 0x3b, 0x61, 0x8c, 0x88, 0xf7, 0x61, 0xa1, 0x83, 0x2f, 0xe5, 0x00, 0x5f,
	0x26, 0x7a, 0x81, 0xef, 0xce, 0x25, 0xb4, 0x09, 0xd3, 0x92, 0x6c, 0x38, 0xde, 0x55, 0x69, 0x59,
	0x37, 0xd2, 0x89, 0x9e, 0xf7, 0x31, 0xc5, 0x54, 0x68, 0x5d, 0x7a, 0x2b, 0x84, 0x5c, 0x81, 0xff,
	0xf4, 0x0a, 0x2e, 0xcd, 0x40, 0x7e, 0x17, 0x32, 0xde, 0x7e, 0xc5, 0xda, 0xd0, 0x31, 0xc6, 0xb9,
	0xdf, 0x62, 0x30, 0x1d, 0x30, 0x87, 0xae, 0x40, 0x92, 0x16, 0xbc, 0x2e, 0x96, 0x08, 0xa7, 0xa9,
	0xbc, 0xc3, 0x69, 0x2a, 0x5f, 0x92, 0x50, 0x0e, 0x52, 0x4c, 0x97, 0xd4, 0x69, 0xea, 0x2a, 0xd0,
	0xa5, 0x72, 0x48, 0xb5, 0x0e, 0x99, 0x8a, 0x72, 0x90, 0xf2, 0x56, 0xe9, 0x31, 0x52, 0xa5, 0xe1,
	0xa0, 0x5d, 0x9e, 0x6f, 0x42, 0xaa, 0xa6, 0x58, 0x86, 0x89, 0xf5, 0xaa, 0x2c, 0x19, 0xe9, 0x71,
	0x92, 0x34, 0x1d, 0x08, 0xa7, 0xec, 0x66, 0x0e, 0x36, 0xa9, 0x5c, 0xa9, 0x68, 0x08, 0xc0, 0x74,
	0x4a, 0x92, 0x81, 0x16, 0xbc, 0x49, 0x1a, 0x27, 0x10, 0xda, 0x69, 0x99, 0x6e, 0x67, 0xc7, 0x04,
	0x19, 0xa8, 0x5a, 0x19, 0xb0, 0x00, 0x49, 0xd9, 0x60, 0x54, 0x21, 0x4c, 0x49, 0x08, 0x09, 0xd9,
	0xa0, 0x44, 0xe0, 0x7f, 0xe2, 0xe0, 0x74, 0x11, 0x9b, 0xa2, 0xac, 0x60, 0x29, 0x78, 0xa3, 0xd7,
	0x5b, 0x0d, 0x85, 0x5e, 0xe7, 0xb9, 0xf0, 0x0c, 0x0f, 0xa8, 0xb9, 0x7d, 0x07, 0x65, 0x20, 0x51,
	0xd3, 0x54, 0x67, 0xcf, 0x60, 0x37, 0xda, 0x7a, 0x46, 0xff, 0x07, 0xf0, 0xa4, 0x15, 0x1d, 0x3d,
	0x26, 0xed, 0x66, 0x2e, 0xd9, 0x6e, 0xf1, 0x49, 0xec, 0x66, 0x10, 0xff, 0x19, 0x2c, 0x84, 0xf2,
	0x87, 0xf5, 0x8c, 0x0f, 0x60, 0xc2, 0x9d, 0x99, 0x68, 0xb3, 0xe8, 0x13, 0xa8, 0xab, 0xc5, 0x7f,
	0xc3, 0xc1, 0x99, 0xce, 0x03, 0x8e, 0x51, 0x4e, 0x7d, 0x5c, 0x8c, 0x0d, 0xc4, 0x45, 0xbe, 0x16,
	0x96, 0x2c, 0x2d, 0x5f, 0xb7, 0x02, 0x31, 0x79, 0x27, 0xdc, 0xd5, 0x88, 0x90, 0xb6, 0x66, 0x82,
	0x1f, 0x38, 0x58, 0xdc, 0xd4, 0xb1, 0xf3, 0x7a, 0x12, 0xee, 0xf4, 0xdb, 0x39, 0x67, 0x98, 0x49,
	0xe1, 0x0e, 0x9c, 0x8d, 0x40, 0xc6, 0xae, 0x60, 0xb9, 0x35, 0xf4, 0x87, 0xd8, 0xf3, 0xbc, 0x05,
	0xf0, 0x5f, 0x8d, 0xc1, 0x22, 0xad, 0x50, 0x11, 0x4e, 0x1e, 0xa7, 0x64, 0x5c, 0xef, 0x2c, 0x19,
	0xbd, 0x3a, 0x83, 0xb7, 0xa0, 0xdc, 0xe8, 0x2c, 0x28, 0xbd, 0xd4, 0x7d, 0xe5, 0x66, 0xb8, 0x66,
	0x78, 0xcd, 0x5f, 0xa4, 0x68, 0x43, 0x5c, 0xe8, 0xd0, 0x2c, 0xa9, 0xe6, 0xfa, 0x1a, 0xc3, 0xec,
	0xa9, 0x60, 0x97, 0x3d, 0x09, 0xdd, 0x4f, 0x27, 0x6c, 0xa7, 0xfb, 0x55, 0x5f, 0xba, 0x4f, 0xf4,
	0xa1, 0xdb, 0xce, 0xfe, 0x60, 0xe1, 0x4c, 0x0c, 0x5c, 0x38, 0xf9, 0x1c, 0x9c, 0x8d, 0xe0, 0x01,
	0x6b, 0x50, 0xcf, 0x60, 0xb1, 0x88, 0x15, 0x1c, 0x49, 0x94, 0x7e, 0x29, 0x37, 0x0c, 0xdf, 0x73,
	0x70, 0x36, 0xe2, 0x6c, 0x0a, 0xee, 0xfc, 0x4d, 0x80, 0xf6, 0x47, 0x17, 0x74, 0x1a, 0xe6, 0xee,
	0xed, 0x54, 0xb6, 0x4b, 0xe5, 0xea, 0xdd, 0x52, 0xb9, 0x58, 0xad, 0x94, 0xef, 0x96, 0x77, 0x3f,
	0x2e, 0xcf, 0x8c, 0xa0, 0x33, 0x70, 0xd2, 0xbb, 0x21, 0x6c, 0xdd, 0xdf, 0x2a, 0xdf, 0x2f, 0xed,
	0x96, 0x67, 0xb8, 0xd5, 0xbf, 0x39, 0x98, 0x64, 0x5f, 0x1e, 0x68, 0x06, 0xa3, 0x2a, 0x40, 0xfb,
	0xa3, 0x0d, 0x5a, 0x8e, 0x1c, 0xae, 0xfd, 0x5f, 0x88, 0x32, 0x2b, 0xbd, 0x05, 0x59, 0x92, 0x7e,
	0xcd, 0x41, 0x3a, 0xea, 0x1d, 0x15, 0xbd, 0x3b, 0xe8, 0x3b, 0x2d, 0x3d, 0x7d, 0x7d, 0xb8, 0x57,
	0xe1, 0xd5, 0x3f, 0x12, 0x90, 0x29, 0x8a, 0xa6, 0x18, 0x90, 0x72, 0xef, 0xe2, 0x45, 0xa0, 0xfa,
	0xfb, 0xbe, 0xe8, 0xa0, 0xf5, 0x81, 0x3f, 0x01, 0x51, 0xb0, 0xef, 0x0d, 0xf9, 0xe9, 0x08, 0x7d,
	0xcf, 0x91, 0x6e, 0x17, 0x35, 0x54, 0xa1, 0xcb, 0x43, 0xbc, 0x09, 0x51, 0x48, 0xef, 0x0f, 0xfd,
	0x0e, 0x85, 0x7e, 0xe4, 0x20, 0xdb, 0x7d, 0xd8, 0x43, 0x57, 0x8f, 0x31, 0xff, 0x67, 0xae, 0x0d,
	0xa7, 0xcc, 0xd0, 0x3d, 0x83, 0xb9, 0x90, 0xf9, 0x00, 0x5d, 0xe8, 0x1d, 0x02, 0xff, 0x28, 0x9a,
	0xb9, 0x38, 0x80, 0x06, 0x3b, 0xfb, 0x90, 0x7c, 0xfe, 0x0c, 0x8e, 0x4e, 0x85, 0x7e, 0x0d, 0xb9,
	0x27, 0x5f, 0xe8, 0x5f, 0x81, 0x1d, 0xfc, 0x9c, 0x83, 0x93, 0xa1, 0x8d, 0x12, 0xad, 0x86, 0xdb,
	0xea, 0xd6, 0xef, 0x33, 0x97, 0x06, 0xd2, 0xf1, 0x40, 0x08, 0x2d, 0xac, 0x51, 0x10, 0xba, 0x75,
	0xe3, 0x28, 0x08, 0x5d, 0x2b, 0x37, 0x81, 0x10, 0x5a, 0x3e, 0xa3, 0x20, 0x74, 0xab, 0xf3, 0x51,
	0x10, 0xba, 0xd6, 0xe7, 0x8d, 0x1b, 0x2f, 0x5f, 0x67, 0x47, 0x5e, 0xbd, 0xce, 0x8e, 0x1c, 0xbd,
	0xce, 0x72, 0xcf, 0xed, 0x2c, 0xf7, 0xb3, 0x9d, 0xe5, 0x7e, 0xb7, 0xb3, 0xdc, 0x4b, 0x3b, 0xcb,
	0xfd, 0x69, 0x67, 0xb9, 0xbf, 0xec, 0xec, 0xc8, 0x91, 0x9d, 0xe5, 0xbe, 0x7b, 0x93, 0x1d, 0x79,
	0xf9, 0x26, 0x3b, 0xf2, 0xea, 0x4d, 0x76, 0xe4, 0x93, 0x84, 0xfb, 0x6f, 0x80, 0xfd, 0x38, 0x69,
	0x80, 0x97, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x92, 0x5b, 0x76, 0x93, 0x2a, 0x18, 0x00, 0x00,
}

func (x PluginKind) String() string {
	s, ok := PluginKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GetPluginsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPluginsRequest)
	if !ok {
		that2, ok := that.(GetPluginsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *GetPluginsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPluginsResponse)
	if !ok {
		that2, ok := that.(GetPluginsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Plugins) != len(that1.Plugins) {
		return false
	}
	for i := range this.Plugins {
		if !this.Plugins[i].Equal(that1.Plugins[i]) {
			return false
		}
	}
	return true
}
func (this *GetRetentionPluginsForOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionPluginsForOrgRequest)
	if !ok {
		that2, ok := that.(GetRetentionPluginsForOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetRetentionPluginsForOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionPluginsForOrgResponse)
	if !ok {
		that2, ok := that.(GetRetentionPluginsForOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Plugins) != len(that1.Plugins) {
		return false
	}
	for i := range this.Plugins {
		if !this.Plugins[i].Equal(that1.Plugins[i]) {
			return false
		}
	}
	return true
}
func (this *GetRetentionPluginsForOrgResponse_PluginState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionPluginsForOrgResponse_PluginState)
	if !ok {
		that2, ok := that.(GetRetentionPluginsForOrgResponse_PluginState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Plugin.Equal(that1.Plugin) {
		return false
	}
	if this.EnabledVersion != that1.EnabledVersion {
		return false
	}
	return true
}
func (this *Plugin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Plugin)
	if !ok {
		that2, ok := that.(Plugin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Logo != that1.Logo {
		return false
	}
	if this.LatestVersion != that1.LatestVersion {
		return false
	}
	if this.RetentionEnabled != that1.RetentionEnabled {
		return false
	}
	return true
}
func (this *GetRetentionPluginConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionPluginConfigRequest)
	if !ok {
		that2, ok := that.(GetRetentionPluginConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *GetRetentionPluginConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionPluginConfigResponse)
	if !ok {
		that2, ok := that.(GetRetentionPluginConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Configurations) != len(that1.Configurations) {
		return false
	}
	for i := range this.Configurations {
		if this.Configurations[i] != that1.Configurations[i] {
			return false
		}
	}
	if len(this.PresetScripts) != len(that1.PresetScripts) {
		return false
	}
	for i := range this.PresetScripts {
		if !this.PresetScripts[i].Equal(that1.PresetScripts[i]) {
			return false
		}
	}
	if this.DocumentationURL != that1.DocumentationURL {
		return false
	}
	if this.DefaultExportURL != that1.DefaultExportURL {
		return false
	}
	if this.AllowCustomExportURL != that1.AllowCustomExportURL {
		return false
	}
	if this.AllowInsecureTLS != that1.AllowInsecureTLS {
		return false
	}
	return true
}
func (this *GetRetentionPluginConfigResponse_PresetScript) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionPluginConfigResponse_PresetScript)
	if !ok {
		that2, ok := that.(GetRetentionPluginConfigResponse_PresetScript)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DefaultFrequencyS != that1.DefaultFrequencyS {
		return false
	}
	if this.Script != that1.Script {
		return false
	}
	return true
}
func (this *GetOrgRetentionPluginConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgRetentionPluginConfigRequest)
	if !ok {
		that2, ok := that.(GetOrgRetentionPluginConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PluginID != that1.PluginID {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetOrgRetentionPluginConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrgRetentionPluginConfigResponse)
	if !ok {
		that2, ok := that.(GetOrgRetentionPluginConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Configurations) != len(that1.Configurations) {
		return false
	}
	for i := range this.Configurations {
		if this.Configurations[i] != that1.Configurations[i] {
			return false
		}
	}
	if this.CustomExportUrl != that1.CustomExportUrl {
		return false
	}
	if this.InsecureTLS != that1.InsecureTLS {
		return false
	}
	return true
}
func (this *UpdateOrgRetentionPluginConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrgRetentionPluginConfigRequest)
	if !ok {
		that2, ok := that.(UpdateOrgRetentionPluginConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.PluginID != that1.PluginID {
		return false
	}
	if len(this.Configurations) != len(that1.Configurations) {
		return false
	}
	for i := range this.Configurations {
		if this.Configurations[i] != that1.Configurations[i] {
			return false
		}
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if !this.CustomExportUrl.Equal(that1.CustomExportUrl) {
		return false
	}
	if !this.InsecureTLS.Equal(that1.InsecureTLS) {
		return false
	}
	if !this.DisablePresets.Equal(that1.DisablePresets) {
		return false
	}
	return true
}
func (this *UpdateOrgRetentionPluginConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrgRetentionPluginConfigResponse)
	if !ok {
		that2, ok := that.(UpdateOrgRetentionPluginConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetRetentionScriptsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionScriptsRequest)
	if !ok {
		that2, ok := that.(GetRetentionScriptsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *RetentionScript) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetentionScript)
	if !ok {
		that2, ok := that.(RetentionScript)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScriptID.Equal(that1.ScriptID) {
		return false
	}
	if this.ScriptName != that1.ScriptName {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.FrequencyS != that1.FrequencyS {
		return false
	}
	if len(this.ClusterIDs) != len(that1.ClusterIDs) {
		return false
	}
	for i := range this.ClusterIDs {
		if !this.ClusterIDs[i].Equal(that1.ClusterIDs[i]) {
			return false
		}
	}
	if this.PluginId != that1.PluginId {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.IsPreset != that1.IsPreset {
		return false
	}
	return true
}
func (this *DetailedRetentionScript) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetailedRetentionScript)
	if !ok {
		that2, ok := that.(DetailedRetentionScript)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Script.Equal(that1.Script) {
		return false
	}
	if this.Contents != that1.Contents {
		return false
	}
	if this.ExportURL != that1.ExportURL {
		return false
	}
	return true
}
func (this *GetRetentionScriptsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionScriptsResponse)
	if !ok {
		that2, ok := that.(GetRetentionScriptsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Scripts) != len(that1.Scripts) {
		return false
	}
	for i := range this.Scripts {
		if !this.Scripts[i].Equal(that1.Scripts[i]) {
			return false
		}
	}
	return true
}
func (this *GetRetentionScriptRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionScriptRequest)
	if !ok {
		that2, ok := that.(GetRetentionScriptRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if !this.ScriptID.Equal(that1.ScriptID) {
		return false
	}
	return true
}
func (this *GetRetentionScriptResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRetentionScriptResponse)
	if !ok {
		that2, ok := that.(GetRetentionScriptResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Script.Equal(that1.Script) {
		return false
	}
	return true
}
func (this *CreateRetentionScriptRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRetentionScriptRequest)
	if !ok {
		that2, ok := that.(CreateRetentionScriptRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Script.Equal(that1.Script) {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *CreateRetentionScriptResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRetentionScriptResponse)
	if !ok {
		that2, ok := that.(CreateRetentionScriptResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *UpdateRetentionScriptRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateRetentionScriptRequest)
	if !ok {
		that2, ok := that.(UpdateRetentionScriptRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScriptID.Equal(that1.ScriptID) {
		return false
	}
	if !this.ScriptName.Equal(that1.ScriptName) {
		return false
	}
	if !this.Description.Equal(that1.Description) {
		return false
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	if !this.FrequencyS.Equal(that1.FrequencyS) {
		return false
	}
	if !this.Contents.Equal(that1.Contents) {
		return false
	}
	if !this.ExportUrl.Equal(that1.ExportUrl) {
		return false
	}
	if len(this.ClusterIDs) != len(that1.ClusterIDs) {
		return false
	}
	for i := range this.ClusterIDs {
		if !this.ClusterIDs[i].Equal(that1.ClusterIDs[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateRetentionScriptResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateRetentionScriptResponse)
	if !ok {
		that2, ok := that.(UpdateRetentionScriptResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteRetentionScriptRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRetentionScriptRequest)
	if !ok {
		that2, ok := that.(DeleteRetentionScriptRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *DeleteRetentionScriptResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRetentionScriptResponse)
	if !ok {
		that2, ok := that.(DeleteRetentionScriptResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetPluginsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pluginpb.GetPluginsRequest{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPluginsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pluginpb.GetPluginsResponse{")
	if this.Plugins != nil {
		s = append(s, "Plugins: "+fmt.Sprintf("%#v", this.Plugins)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionPluginsForOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pluginpb.GetRetentionPluginsForOrgRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionPluginsForOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pluginpb.GetRetentionPluginsForOrgResponse{")
	if this.Plugins != nil {
		s = append(s, "Plugins: "+fmt.Sprintf("%#v", this.Plugins)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionPluginsForOrgResponse_PluginState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pluginpb.GetRetentionPluginsForOrgResponse_PluginState{")
	if this.Plugin != nil {
		s = append(s, "Plugin: "+fmt.Sprintf("%#v", this.Plugin)+",\n")
	}
	s = append(s, "EnabledVersion: "+fmt.Sprintf("%#v", this.EnabledVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Plugin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pluginpb.Plugin{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Logo: "+fmt.Sprintf("%#v", this.Logo)+",\n")
	s = append(s, "LatestVersion: "+fmt.Sprintf("%#v", this.LatestVersion)+",\n")
	s = append(s, "RetentionEnabled: "+fmt.Sprintf("%#v", this.RetentionEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionPluginConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pluginpb.GetRetentionPluginConfigRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionPluginConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pluginpb.GetRetentionPluginConfigResponse{")
	keysForConfigurations := make([]string, 0, len(this.Configurations))
	for k, _ := range this.Configurations {
		keysForConfigurations = append(keysForConfigurations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConfigurations)
	mapStringForConfigurations := "map[string]string{"
	for _, k := range keysForConfigurations {
		mapStringForConfigurations += fmt.Sprintf("%#v: %#v,", k, this.Configurations[k])
	}
	mapStringForConfigurations += "}"
	if this.Configurations != nil {
		s = append(s, "Configurations: "+mapStringForConfigurations+",\n")
	}
	if this.PresetScripts != nil {
		s = append(s, "PresetScripts: "+fmt.Sprintf("%#v", this.PresetScripts)+",\n")
	}
	s = append(s, "DocumentationURL: "+fmt.Sprintf("%#v", this.DocumentationURL)+",\n")
	s = append(s, "DefaultExportURL: "+fmt.Sprintf("%#v", this.DefaultExportURL)+",\n")
	s = append(s, "AllowCustomExportURL: "+fmt.Sprintf("%#v", this.AllowCustomExportURL)+",\n")
	s = append(s, "AllowInsecureTLS: "+fmt.Sprintf("%#v", this.AllowInsecureTLS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionPluginConfigResponse_PresetScript) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pluginpb.GetRetentionPluginConfigResponse_PresetScript{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "DefaultFrequencyS: "+fmt.Sprintf("%#v", this.DefaultFrequencyS)+",\n")
	s = append(s, "Script: "+fmt.Sprintf("%#v", this.Script)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgRetentionPluginConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pluginpb.GetOrgRetentionPluginConfigRequest{")
	s = append(s, "PluginID: "+fmt.Sprintf("%#v", this.PluginID)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrgRetentionPluginConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pluginpb.GetOrgRetentionPluginConfigResponse{")
	keysForConfigurations := make([]string, 0, len(this.Configurations))
	for k, _ := range this.Configurations {
		keysForConfigurations = append(keysForConfigurations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConfigurations)
	mapStringForConfigurations := "map[string]string{"
	for _, k := range keysForConfigurations {
		mapStringForConfigurations += fmt.Sprintf("%#v: %#v,", k, this.Configurations[k])
	}
	mapStringForConfigurations += "}"
	if this.Configurations != nil {
		s = append(s, "Configurations: "+mapStringForConfigurations+",\n")
	}
	s = append(s, "CustomExportUrl: "+fmt.Sprintf("%#v", this.CustomExportUrl)+",\n")
	s = append(s, "InsecureTLS: "+fmt.Sprintf("%#v", this.InsecureTLS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOrgRetentionPluginConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pluginpb.UpdateOrgRetentionPluginConfigRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "PluginID: "+fmt.Sprintf("%#v", this.PluginID)+",\n")
	keysForConfigurations := make([]string, 0, len(this.Configurations))
	for k, _ := range this.Configurations {
		keysForConfigurations = append(keysForConfigurations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConfigurations)
	mapStringForConfigurations := "map[string]string{"
	for _, k := range keysForConfigurations {
		mapStringForConfigurations += fmt.Sprintf("%#v: %#v,", k, this.Configurations[k])
	}
	mapStringForConfigurations += "}"
	if this.Configurations != nil {
		s = append(s, "Configurations: "+mapStringForConfigurations+",\n")
	}
	if this.Enabled != nil {
		s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	}
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.CustomExportUrl != nil {
		s = append(s, "CustomExportUrl: "+fmt.Sprintf("%#v", this.CustomExportUrl)+",\n")
	}
	if this.InsecureTLS != nil {
		s = append(s, "InsecureTLS: "+fmt.Sprintf("%#v", this.InsecureTLS)+",\n")
	}
	if this.DisablePresets != nil {
		s = append(s, "DisablePresets: "+fmt.Sprintf("%#v", this.DisablePresets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOrgRetentionPluginConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pluginpb.UpdateOrgRetentionPluginConfigResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionScriptsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pluginpb.GetRetentionScriptsRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetentionScript) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pluginpb.RetentionScript{")
	if this.ScriptID != nil {
		s = append(s, "ScriptID: "+fmt.Sprintf("%#v", this.ScriptID)+",\n")
	}
	s = append(s, "ScriptName: "+fmt.Sprintf("%#v", this.ScriptName)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "FrequencyS: "+fmt.Sprintf("%#v", this.FrequencyS)+",\n")
	if this.ClusterIDs != nil {
		s = append(s, "ClusterIDs: "+fmt.Sprintf("%#v", this.ClusterIDs)+",\n")
	}
	s = append(s, "PluginId: "+fmt.Sprintf("%#v", this.PluginId)+",\n")
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	s = append(s, "IsPreset: "+fmt.Sprintf("%#v", this.IsPreset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetailedRetentionScript) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pluginpb.DetailedRetentionScript{")
	if this.Script != nil {
		s = append(s, "Script: "+fmt.Sprintf("%#v", this.Script)+",\n")
	}
	s = append(s, "Contents: "+fmt.Sprintf("%#v", this.Contents)+",\n")
	s = append(s, "ExportURL: "+fmt.Sprintf("%#v", this.ExportURL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionScriptsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pluginpb.GetRetentionScriptsResponse{")
	if this.Scripts != nil {
		s = append(s, "Scripts: "+fmt.Sprintf("%#v", this.Scripts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionScriptRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pluginpb.GetRetentionScriptRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	if this.ScriptID != nil {
		s = append(s, "ScriptID: "+fmt.Sprintf("%#v", this.ScriptID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRetentionScriptResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pluginpb.GetRetentionScriptResponse{")
	if this.Script != nil {
		s = append(s, "Script: "+fmt.Sprintf("%#v", this.Script)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRetentionScriptRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pluginpb.CreateRetentionScriptRequest{")
	if this.Script != nil {
		s = append(s, "Script: "+fmt.Sprintf("%#v", this.Script)+",\n")
	}
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRetentionScriptResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pluginpb.CreateRetentionScriptResponse{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateRetentionScriptRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pluginpb.UpdateRetentionScriptRequest{")
	if this.ScriptID != nil {
		s = append(s, "ScriptID: "+fmt.Sprintf("%#v", this.ScriptID)+",\n")
	}
	if this.ScriptName != nil {
		s = append(s, "ScriptName: "+fmt.Sprintf("%#v", this.ScriptName)+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	}
	if this.Enabled != nil {
		s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	}
	if this.FrequencyS != nil {
		s = append(s, "FrequencyS: "+fmt.Sprintf("%#v", this.FrequencyS)+",\n")
	}
	if this.Contents != nil {
		s = append(s, "Contents: "+fmt.Sprintf("%#v", this.Contents)+",\n")
	}
	if this.ExportUrl != nil {
		s = append(s, "ExportUrl: "+fmt.Sprintf("%#v", this.ExportUrl)+",\n")
	}
	if this.ClusterIDs != nil {
		s = append(s, "ClusterIDs: "+fmt.Sprintf("%#v", this.ClusterIDs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateRetentionScriptResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pluginpb.UpdateRetentionScriptResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRetentionScriptRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pluginpb.DeleteRetentionScriptRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRetentionScriptResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pluginpb.DeleteRetentionScriptResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginServiceClient interface {
	GetPlugins(ctx context.Context, in *GetPluginsRequest, opts ...grpc.CallOption) (*GetPluginsResponse, error)
	GetRetentionPluginConfig(ctx context.Context, in *GetRetentionPluginConfigRequest, opts ...grpc.CallOption) (*GetRetentionPluginConfigResponse, error)
}

type pluginServiceClient struct {
	cc *grpc.ClientConn
}

func NewPluginServiceClient(cc *grpc.ClientConn) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) GetPlugins(ctx context.Context, in *GetPluginsRequest, opts ...grpc.CallOption) (*GetPluginsResponse, error) {
	out := new(GetPluginsResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.PluginService/GetPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetRetentionPluginConfig(ctx context.Context, in *GetRetentionPluginConfigRequest, opts ...grpc.CallOption) (*GetRetentionPluginConfigResponse, error) {
	out := new(GetRetentionPluginConfigResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.PluginService/GetRetentionPluginConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
type PluginServiceServer interface {
	GetPlugins(context.Context, *GetPluginsRequest) (*GetPluginsResponse, error)
	GetRetentionPluginConfig(context.Context, *GetRetentionPluginConfigRequest) (*GetRetentionPluginConfigResponse, error)
}

// UnimplementedPluginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (*UnimplementedPluginServiceServer) GetPlugins(ctx context.Context, req *GetPluginsRequest) (*GetPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugins not implemented")
}
func (*UnimplementedPluginServiceServer) GetRetentionPluginConfig(ctx context.Context, req *GetRetentionPluginConfigRequest) (*GetRetentionPluginConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetentionPluginConfig not implemented")
}

func RegisterPluginServiceServer(s *grpc.Server, srv PluginServiceServer) {
	s.RegisterService(&_PluginService_serviceDesc, srv)
}

func _PluginService_GetPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.PluginService/GetPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetPlugins(ctx, req.(*GetPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetRetentionPluginConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetentionPluginConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetRetentionPluginConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.PluginService/GetRetentionPluginConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetRetentionPluginConfig(ctx, req.(*GetRetentionPluginConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PluginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.services.internal.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlugins",
			Handler:    _PluginService_GetPlugins_Handler,
		},
		{
			MethodName: "GetRetentionPluginConfig",
			Handler:    _PluginService_GetRetentionPluginConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/plugin/pluginpb/service.proto",
}

// DataRetentionPluginServiceClient is the client API for DataRetentionPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataRetentionPluginServiceClient interface {
	GetRetentionPluginsForOrg(ctx context.Context, in *GetRetentionPluginsForOrgRequest, opts ...grpc.CallOption) (*GetRetentionPluginsForOrgResponse, error)
	GetOrgRetentionPluginConfig(ctx context.Context, in *GetOrgRetentionPluginConfigRequest, opts ...grpc.CallOption) (*GetOrgRetentionPluginConfigResponse, error)
	UpdateOrgRetentionPluginConfig(ctx context.Context, in *UpdateOrgRetentionPluginConfigRequest, opts ...grpc.CallOption) (*UpdateOrgRetentionPluginConfigResponse, error)
	GetRetentionScripts(ctx context.Context, in *GetRetentionScriptsRequest, opts ...grpc.CallOption) (*GetRetentionScriptsResponse, error)
	GetRetentionScript(ctx context.Context, in *GetRetentionScriptRequest, opts ...grpc.CallOption) (*GetRetentionScriptResponse, error)
	CreateRetentionScript(ctx context.Context, in *CreateRetentionScriptRequest, opts ...grpc.CallOption) (*CreateRetentionScriptResponse, error)
	UpdateRetentionScript(ctx context.Context, in *UpdateRetentionScriptRequest, opts ...grpc.CallOption) (*UpdateRetentionScriptResponse, error)
	DeleteRetentionScript(ctx context.Context, in *DeleteRetentionScriptRequest, opts ...grpc.CallOption) (*DeleteRetentionScriptResponse, error)
}

type dataRetentionPluginServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataRetentionPluginServiceClient(cc *grpc.ClientConn) DataRetentionPluginServiceClient {
	return &dataRetentionPluginServiceClient{cc}
}

func (c *dataRetentionPluginServiceClient) GetRetentionPluginsForOrg(ctx context.Context, in *GetRetentionPluginsForOrgRequest, opts ...grpc.CallOption) (*GetRetentionPluginsForOrgResponse, error) {
	out := new(GetRetentionPluginsForOrgResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.DataRetentionPluginService/GetRetentionPluginsForOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRetentionPluginServiceClient) GetOrgRetentionPluginConfig(ctx context.Context, in *GetOrgRetentionPluginConfigRequest, opts ...grpc.CallOption) (*GetOrgRetentionPluginConfigResponse, error) {
	out := new(GetOrgRetentionPluginConfigResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.DataRetentionPluginService/GetOrgRetentionPluginConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRetentionPluginServiceClient) UpdateOrgRetentionPluginConfig(ctx context.Context, in *UpdateOrgRetentionPluginConfigRequest, opts ...grpc.CallOption) (*UpdateOrgRetentionPluginConfigResponse, error) {
	out := new(UpdateOrgRetentionPluginConfigResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.DataRetentionPluginService/UpdateOrgRetentionPluginConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRetentionPluginServiceClient) GetRetentionScripts(ctx context.Context, in *GetRetentionScriptsRequest, opts ...grpc.CallOption) (*GetRetentionScriptsResponse, error) {
	out := new(GetRetentionScriptsResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.DataRetentionPluginService/GetRetentionScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRetentionPluginServiceClient) GetRetentionScript(ctx context.Context, in *GetRetentionScriptRequest, opts ...grpc.CallOption) (*GetRetentionScriptResponse, error) {
	out := new(GetRetentionScriptResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.DataRetentionPluginService/GetRetentionScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRetentionPluginServiceClient) CreateRetentionScript(ctx context.Context, in *CreateRetentionScriptRequest, opts ...grpc.CallOption) (*CreateRetentionScriptResponse, error) {
	out := new(CreateRetentionScriptResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.DataRetentionPluginService/CreateRetentionScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRetentionPluginServiceClient) UpdateRetentionScript(ctx context.Context, in *UpdateRetentionScriptRequest, opts ...grpc.CallOption) (*UpdateRetentionScriptResponse, error) {
	out := new(UpdateRetentionScriptResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.DataRetentionPluginService/UpdateRetentionScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRetentionPluginServiceClient) DeleteRetentionScript(ctx context.Context, in *DeleteRetentionScriptRequest, opts ...grpc.CallOption) (*DeleteRetentionScriptResponse, error) {
	out := new(DeleteRetentionScriptResponse)
	err := c.cc.Invoke(ctx, "/px.services.internal.DataRetentionPluginService/DeleteRetentionScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataRetentionPluginServiceServer is the server API for DataRetentionPluginService service.
type DataRetentionPluginServiceServer interface {
	GetRetentionPluginsForOrg(context.Context, *GetRetentionPluginsForOrgRequest) (*GetRetentionPluginsForOrgResponse, error)
	GetOrgRetentionPluginConfig(context.Context, *GetOrgRetentionPluginConfigRequest) (*GetOrgRetentionPluginConfigResponse, error)
	UpdateOrgRetentionPluginConfig(context.Context, *UpdateOrgRetentionPluginConfigRequest) (*UpdateOrgRetentionPluginConfigResponse, error)
	GetRetentionScripts(context.Context, *GetRetentionScriptsRequest) (*GetRetentionScriptsResponse, error)
	GetRetentionScript(context.Context, *GetRetentionScriptRequest) (*GetRetentionScriptResponse, error)
	CreateRetentionScript(context.Context, *CreateRetentionScriptRequest) (*CreateRetentionScriptResponse, error)
	UpdateRetentionScript(context.Context, *UpdateRetentionScriptRequest) (*UpdateRetentionScriptResponse, error)
	DeleteRetentionScript(context.Context, *DeleteRetentionScriptRequest) (*DeleteRetentionScriptResponse, error)
}

// UnimplementedDataRetentionPluginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataRetentionPluginServiceServer struct {
}

func (*UnimplementedDataRetentionPluginServiceServer) GetRetentionPluginsForOrg(ctx context.Context, req *GetRetentionPluginsForOrgRequest) (*GetRetentionPluginsForOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetentionPluginsForOrg not implemented")
}
func (*UnimplementedDataRetentionPluginServiceServer) GetOrgRetentionPluginConfig(ctx context.Context, req *GetOrgRetentionPluginConfigRequest) (*GetOrgRetentionPluginConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgRetentionPluginConfig not implemented")
}
func (*UnimplementedDataRetentionPluginServiceServer) UpdateOrgRetentionPluginConfig(ctx context.Context, req *UpdateOrgRetentionPluginConfigRequest) (*UpdateOrgRetentionPluginConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgRetentionPluginConfig not implemented")
}
func (*UnimplementedDataRetentionPluginServiceServer) GetRetentionScripts(ctx context.Context, req *GetRetentionScriptsRequest) (*GetRetentionScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetentionScripts not implemented")
}
func (*UnimplementedDataRetentionPluginServiceServer) GetRetentionScript(ctx context.Context, req *GetRetentionScriptRequest) (*GetRetentionScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetentionScript not implemented")
}
func (*UnimplementedDataRetentionPluginServiceServer) CreateRetentionScript(ctx context.Context, req *CreateRetentionScriptRequest) (*CreateRetentionScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRetentionScript not implemented")
}
func (*UnimplementedDataRetentionPluginServiceServer) UpdateRetentionScript(ctx context.Context, req *UpdateRetentionScriptRequest) (*UpdateRetentionScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRetentionScript not implemented")
}
func (*UnimplementedDataRetentionPluginServiceServer) DeleteRetentionScript(ctx context.Context, req *DeleteRetentionScriptRequest) (*DeleteRetentionScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRetentionScript not implemented")
}

func RegisterDataRetentionPluginServiceServer(s *grpc.Server, srv DataRetentionPluginServiceServer) {
	s.RegisterService(&_DataRetentionPluginService_serviceDesc, srv)
}

func _DataRetentionPluginService_GetRetentionPluginsForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetentionPluginsForOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRetentionPluginServiceServer).GetRetentionPluginsForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.DataRetentionPluginService/GetRetentionPluginsForOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRetentionPluginServiceServer).GetRetentionPluginsForOrg(ctx, req.(*GetRetentionPluginsForOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRetentionPluginService_GetOrgRetentionPluginConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgRetentionPluginConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRetentionPluginServiceServer).GetOrgRetentionPluginConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.DataRetentionPluginService/GetOrgRetentionPluginConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRetentionPluginServiceServer).GetOrgRetentionPluginConfig(ctx, req.(*GetOrgRetentionPluginConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRetentionPluginService_UpdateOrgRetentionPluginConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgRetentionPluginConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRetentionPluginServiceServer).UpdateOrgRetentionPluginConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.DataRetentionPluginService/UpdateOrgRetentionPluginConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRetentionPluginServiceServer).UpdateOrgRetentionPluginConfig(ctx, req.(*UpdateOrgRetentionPluginConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRetentionPluginService_GetRetentionScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetentionScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRetentionPluginServiceServer).GetRetentionScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.DataRetentionPluginService/GetRetentionScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRetentionPluginServiceServer).GetRetentionScripts(ctx, req.(*GetRetentionScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRetentionPluginService_GetRetentionScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetentionScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRetentionPluginServiceServer).GetRetentionScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.DataRetentionPluginService/GetRetentionScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRetentionPluginServiceServer).GetRetentionScript(ctx, req.(*GetRetentionScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRetentionPluginService_CreateRetentionScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRetentionScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRetentionPluginServiceServer).CreateRetentionScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.DataRetentionPluginService/CreateRetentionScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRetentionPluginServiceServer).CreateRetentionScript(ctx, req.(*CreateRetentionScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRetentionPluginService_UpdateRetentionScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRetentionScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRetentionPluginServiceServer).UpdateRetentionScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.DataRetentionPluginService/UpdateRetentionScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRetentionPluginServiceServer).UpdateRetentionScript(ctx, req.(*UpdateRetentionScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRetentionPluginService_DeleteRetentionScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRetentionScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRetentionPluginServiceServer).DeleteRetentionScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.services.internal.DataRetentionPluginService/DeleteRetentionScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRetentionPluginServiceServer).DeleteRetentionScript(ctx, req.(*DeleteRetentionScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataRetentionPluginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.services.internal.DataRetentionPluginService",
	HandlerType: (*DataRetentionPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRetentionPluginsForOrg",
			Handler:    _DataRetentionPluginService_GetRetentionPluginsForOrg_Handler,
		},
		{
			MethodName: "GetOrgRetentionPluginConfig",
			Handler:    _DataRetentionPluginService_GetOrgRetentionPluginConfig_Handler,
		},
		{
			MethodName: "UpdateOrgRetentionPluginConfig",
			Handler:    _DataRetentionPluginService_UpdateOrgRetentionPluginConfig_Handler,
		},
		{
			MethodName: "GetRetentionScripts",
			Handler:    _DataRetentionPluginService_GetRetentionScripts_Handler,
		},
		{
			MethodName: "GetRetentionScript",
			Handler:    _DataRetentionPluginService_GetRetentionScript_Handler,
		},
		{
			MethodName: "CreateRetentionScript",
			Handler:    _DataRetentionPluginService_CreateRetentionScript_Handler,
		},
		{
			MethodName: "UpdateRetentionScript",
			Handler:    _DataRetentionPluginService_UpdateRetentionScript_Handler,
		},
		{
			MethodName: "DeleteRetentionScript",
			Handler:    _DataRetentionPluginService_DeleteRetentionScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/plugin/pluginpb/service.proto",
}

func (m *GetPluginsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPluginsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPluginsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPluginsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPluginsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPluginsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Plugins) > 0 {
		for iNdEx := len(m.Plugins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Plugins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionPluginsForOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionPluginsForOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionPluginsForOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionPluginsForOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionPluginsForOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionPluginsForOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Plugins) > 0 {
		for iNdEx := len(m.Plugins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Plugins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionPluginsForOrgResponse_PluginState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionPluginsForOrgResponse_PluginState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionPluginsForOrgResponse_PluginState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnabledVersion) > 0 {
		i -= len(m.EnabledVersion)
		copy(dAtA[i:], m.EnabledVersion)
		i = encodeVarintService(dAtA, i, uint64(len(m.EnabledVersion)))
		i--
		dAtA[i] = 0x12
	}
	if m.Plugin != nil {
		{
			size, err := m.Plugin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Plugin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plugin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plugin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetentionEnabled {
		i--
		if m.RetentionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.LatestVersion) > 0 {
		i -= len(m.LatestVersion)
		copy(dAtA[i:], m.LatestVersion)
		i = encodeVarintService(dAtA, i, uint64(len(m.LatestVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintService(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintService(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionPluginConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionPluginConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionPluginConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintService(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintService(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionPluginConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionPluginConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionPluginConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowInsecureTLS {
		i--
		if m.AllowInsecureTLS {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.AllowCustomExportURL {
		i--
		if m.AllowCustomExportURL {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.DefaultExportURL) > 0 {
		i -= len(m.DefaultExportURL)
		copy(dAtA[i:], m.DefaultExportURL)
		i = encodeVarintService(dAtA, i, uint64(len(m.DefaultExportURL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DocumentationURL) > 0 {
		i -= len(m.DocumentationURL)
		copy(dAtA[i:], m.DocumentationURL)
		i = encodeVarintService(dAtA, i, uint64(len(m.DocumentationURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PresetScripts) > 0 {
		for iNdEx := len(m.PresetScripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PresetScripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Configurations) > 0 {
		for k := range m.Configurations {
			v := m.Configurations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionPluginConfigResponse_PresetScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionPluginConfigResponse_PresetScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionPluginConfigResponse_PresetScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Script) > 0 {
		i -= len(m.Script)
		copy(dAtA[i:], m.Script)
		i = encodeVarintService(dAtA, i, uint64(len(m.Script)))
		i--
		dAtA[i] = 0x22
	}
	if m.DefaultFrequencyS != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.DefaultFrequencyS))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgRetentionPluginConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgRetentionPluginConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgRetentionPluginConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PluginID) > 0 {
		i -= len(m.PluginID)
		copy(dAtA[i:], m.PluginID)
		i = encodeVarintService(dAtA, i, uint64(len(m.PluginID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrgRetentionPluginConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrgRetentionPluginConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrgRetentionPluginConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InsecureTLS {
		i--
		if m.InsecureTLS {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.CustomExportUrl) > 0 {
		i -= len(m.CustomExportUrl)
		copy(dAtA[i:], m.CustomExportUrl)
		i = encodeVarintService(dAtA, i, uint64(len(m.CustomExportUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Configurations) > 0 {
		for k := range m.Configurations {
			v := m.Configurations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOrgRetentionPluginConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrgRetentionPluginConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOrgRetentionPluginConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisablePresets != nil {
		{
			size, err := m.DisablePresets.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.InsecureTLS != nil {
		{
			size, err := m.InsecureTLS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CustomExportUrl != nil {
		{
			size, err := m.CustomExportUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Configurations) > 0 {
		for k := range m.Configurations {
			v := m.Configurations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PluginID) > 0 {
		i -= len(m.PluginID)
		copy(dAtA[i:], m.PluginID)
		i = encodeVarintService(dAtA, i, uint64(len(m.PluginID)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOrgRetentionPluginConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrgRetentionPluginConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOrgRetentionPluginConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRetentionScriptsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionScriptsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionScriptsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetentionScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetentionScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPreset {
		i--
		if m.IsPreset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.PluginId) > 0 {
		i -= len(m.PluginId)
		copy(dAtA[i:], m.PluginId)
		i = encodeVarintService(dAtA, i, uint64(len(m.PluginId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterIDs) > 0 {
		for iNdEx := len(m.ClusterIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterIDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.FrequencyS != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.FrequencyS))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScriptName) > 0 {
		i -= len(m.ScriptName)
		copy(dAtA[i:], m.ScriptName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ScriptName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScriptID != nil {
		{
			size, err := m.ScriptID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetailedRetentionScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetailedRetentionScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetailedRetentionScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExportURL) > 0 {
		i -= len(m.ExportURL)
		copy(dAtA[i:], m.ExportURL)
		i = encodeVarintService(dAtA, i, uint64(len(m.ExportURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintService(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0x12
	}
	if m.Script != nil {
		{
			size, err := m.Script.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionScriptsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionScriptsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionScriptsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for iNdEx := len(m.Scripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScriptID != nil {
		{
			size, err := m.ScriptID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Script != nil {
		{
			size, err := m.Script.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRetentionScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRetentionScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRetentionScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Script != nil {
		{
			size, err := m.Script.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRetentionScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRetentionScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRetentionScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRetentionScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRetentionScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRetentionScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterIDs) > 0 {
		for iNdEx := len(m.ClusterIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterIDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ExportUrl != nil {
		{
			size, err := m.ExportUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Contents != nil {
		{
			size, err := m.Contents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.FrequencyS != nil {
		{
			size, err := m.FrequencyS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ScriptName != nil {
		{
			size, err := m.ScriptName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ScriptID != nil {
		{
			size, err := m.ScriptID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRetentionScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRetentionScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRetentionScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteRetentionScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRetentionScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRetentionScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRetentionScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRetentionScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRetentionScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPluginsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovService(uint64(m.Kind))
	}
	return n
}

func (m *GetPluginsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Plugins) > 0 {
		for _, e := range m.Plugins {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetRetentionPluginsForOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetRetentionPluginsForOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Plugins) > 0 {
		for _, e := range m.Plugins {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetRetentionPluginsForOrgResponse_PluginState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plugin != nil {
		l = m.Plugin.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.EnabledVersion)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *Plugin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.LatestVersion)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.RetentionEnabled {
		n += 2
	}
	return n
}

func (m *GetRetentionPluginConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetRetentionPluginConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configurations) > 0 {
		for k, v := range m.Configurations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if len(m.PresetScripts) > 0 {
		for _, e := range m.PresetScripts {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.DocumentationURL)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.DefaultExportURL)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.AllowCustomExportURL {
		n += 2
	}
	if m.AllowInsecureTLS {
		n += 2
	}
	return n
}

func (m *GetRetentionPluginConfigResponse_PresetScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.DefaultFrequencyS != 0 {
		n += 1 + sovService(uint64(m.DefaultFrequencyS))
	}
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetOrgRetentionPluginConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PluginID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetOrgRetentionPluginConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configurations) > 0 {
		for k, v := range m.Configurations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	l = len(m.CustomExportUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.InsecureTLS {
		n += 2
	}
	return n
}

func (m *UpdateOrgRetentionPluginConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.PluginID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Configurations) > 0 {
		for k, v := range m.Configurations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.CustomExportUrl != nil {
		l = m.CustomExportUrl.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.InsecureTLS != nil {
		l = m.InsecureTLS.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.DisablePresets != nil {
		l = m.DisablePresets.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UpdateOrgRetentionPluginConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRetentionScriptsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RetentionScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScriptID != nil {
		l = m.ScriptID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ScriptName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.FrequencyS != 0 {
		n += 1 + sovService(uint64(m.FrequencyS))
	}
	if len(m.ClusterIDs) > 0 {
		for _, e := range m.ClusterIDs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.PluginId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.IsPreset {
		n += 2
	}
	return n
}

func (m *DetailedRetentionScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Script != nil {
		l = m.Script.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ExportURL)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetRetentionScriptsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for _, e := range m.Scripts {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetRetentionScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.ScriptID != nil {
		l = m.ScriptID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetRetentionScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Script != nil {
		l = m.Script.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateRetentionScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Script != nil {
		l = m.Script.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateRetentionScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UpdateRetentionScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScriptID != nil {
		l = m.ScriptID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.ScriptName != nil {
		l = m.ScriptName.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.FrequencyS != nil {
		l = m.FrequencyS.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Contents != nil {
		l = m.Contents.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.ExportUrl != nil {
		l = m.ExportUrl.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.ClusterIDs) > 0 {
		for _, e := range m.ClusterIDs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *UpdateRetentionScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteRetentionScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DeleteRetentionScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetPluginsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPluginsRequest{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPluginsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPlugins := "[]*Plugin{"
	for _, f := range this.Plugins {
		repeatedStringForPlugins += strings.Replace(f.String(), "Plugin", "Plugin", 1) + ","
	}
	repeatedStringForPlugins += "}"
	s := strings.Join([]string{`&GetPluginsResponse{`,
		`Plugins:` + repeatedStringForPlugins + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionPluginsForOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRetentionPluginsForOrgRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionPluginsForOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPlugins := "[]*GetRetentionPluginsForOrgResponse_PluginState{"
	for _, f := range this.Plugins {
		repeatedStringForPlugins += strings.Replace(fmt.Sprintf("%v", f), "GetRetentionPluginsForOrgResponse_PluginState", "GetRetentionPluginsForOrgResponse_PluginState", 1) + ","
	}
	repeatedStringForPlugins += "}"
	s := strings.Join([]string{`&GetRetentionPluginsForOrgResponse{`,
		`Plugins:` + repeatedStringForPlugins + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionPluginsForOrgResponse_PluginState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRetentionPluginsForOrgResponse_PluginState{`,
		`Plugin:` + strings.Replace(this.Plugin.String(), "Plugin", "Plugin", 1) + `,`,
		`EnabledVersion:` + fmt.Sprintf("%v", this.EnabledVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Plugin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Plugin{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Logo:` + fmt.Sprintf("%v", this.Logo) + `,`,
		`LatestVersion:` + fmt.Sprintf("%v", this.LatestVersion) + `,`,
		`RetentionEnabled:` + fmt.Sprintf("%v", this.RetentionEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionPluginConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRetentionPluginConfigRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionPluginConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPresetScripts := "[]*GetRetentionPluginConfigResponse_PresetScript{"
	for _, f := range this.PresetScripts {
		repeatedStringForPresetScripts += strings.Replace(fmt.Sprintf("%v", f), "GetRetentionPluginConfigResponse_PresetScript", "GetRetentionPluginConfigResponse_PresetScript", 1) + ","
	}
	repeatedStringForPresetScripts += "}"
	keysForConfigurations := make([]string, 0, len(this.Configurations))
	for k, _ := range this.Configurations {
		keysForConfigurations = append(keysForConfigurations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConfigurations)
	mapStringForConfigurations := "map[string]string{"
	for _, k := range keysForConfigurations {
		mapStringForConfigurations += fmt.Sprintf("%v: %v,", k, this.Configurations[k])
	}
	mapStringForConfigurations += "}"
	s := strings.Join([]string{`&GetRetentionPluginConfigResponse{`,
		`Configurations:` + mapStringForConfigurations + `,`,
		`PresetScripts:` + repeatedStringForPresetScripts + `,`,
		`DocumentationURL:` + fmt.Sprintf("%v", this.DocumentationURL) + `,`,
		`DefaultExportURL:` + fmt.Sprintf("%v", this.DefaultExportURL) + `,`,
		`AllowCustomExportURL:` + fmt.Sprintf("%v", this.AllowCustomExportURL) + `,`,
		`AllowInsecureTLS:` + fmt.Sprintf("%v", this.AllowInsecureTLS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionPluginConfigResponse_PresetScript) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRetentionPluginConfigResponse_PresetScript{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`DefaultFrequencyS:` + fmt.Sprintf("%v", this.DefaultFrequencyS) + `,`,
		`Script:` + fmt.Sprintf("%v", this.Script) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgRetentionPluginConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrgRetentionPluginConfigRequest{`,
		`PluginID:` + fmt.Sprintf("%v", this.PluginID) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrgRetentionPluginConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForConfigurations := make([]string, 0, len(this.Configurations))
	for k, _ := range this.Configurations {
		keysForConfigurations = append(keysForConfigurations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConfigurations)
	mapStringForConfigurations := "map[string]string{"
	for _, k := range keysForConfigurations {
		mapStringForConfigurations += fmt.Sprintf("%v: %v,", k, this.Configurations[k])
	}
	mapStringForConfigurations += "}"
	s := strings.Join([]string{`&GetOrgRetentionPluginConfigResponse{`,
		`Configurations:` + mapStringForConfigurations + `,`,
		`CustomExportUrl:` + fmt.Sprintf("%v", this.CustomExportUrl) + `,`,
		`InsecureTLS:` + fmt.Sprintf("%v", this.InsecureTLS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOrgRetentionPluginConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForConfigurations := make([]string, 0, len(this.Configurations))
	for k, _ := range this.Configurations {
		keysForConfigurations = append(keysForConfigurations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConfigurations)
	mapStringForConfigurations := "map[string]string{"
	for _, k := range keysForConfigurations {
		mapStringForConfigurations += fmt.Sprintf("%v: %v,", k, this.Configurations[k])
	}
	mapStringForConfigurations += "}"
	s := strings.Join([]string{`&UpdateOrgRetentionPluginConfigRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`PluginID:` + fmt.Sprintf("%v", this.PluginID) + `,`,
		`Configurations:` + mapStringForConfigurations + `,`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`Version:` + strings.Replace(fmt.Sprintf("%v", this.Version), "StringValue", "types.StringValue", 1) + `,`,
		`CustomExportUrl:` + strings.Replace(fmt.Sprintf("%v", this.CustomExportUrl), "StringValue", "types.StringValue", 1) + `,`,
		`InsecureTLS:` + strings.Replace(fmt.Sprintf("%v", this.InsecureTLS), "BoolValue", "types.BoolValue", 1) + `,`,
		`DisablePresets:` + strings.Replace(fmt.Sprintf("%v", this.DisablePresets), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOrgRetentionPluginConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOrgRetentionPluginConfigResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionScriptsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRetentionScriptsRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetentionScript) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClusterIDs := "[]*UUID{"
	for _, f := range this.ClusterIDs {
		repeatedStringForClusterIDs += strings.Replace(fmt.Sprintf("%v", f), "UUID", "uuidpb.UUID", 1) + ","
	}
	repeatedStringForClusterIDs += "}"
	s := strings.Join([]string{`&RetentionScript{`,
		`ScriptID:` + strings.Replace(fmt.Sprintf("%v", this.ScriptID), "UUID", "uuidpb.UUID", 1) + `,`,
		`ScriptName:` + fmt.Sprintf("%v", this.ScriptName) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`FrequencyS:` + fmt.Sprintf("%v", this.FrequencyS) + `,`,
		`ClusterIDs:` + repeatedStringForClusterIDs + `,`,
		`PluginId:` + fmt.Sprintf("%v", this.PluginId) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`IsPreset:` + fmt.Sprintf("%v", this.IsPreset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetailedRetentionScript) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetailedRetentionScript{`,
		`Script:` + strings.Replace(this.Script.String(), "RetentionScript", "RetentionScript", 1) + `,`,
		`Contents:` + fmt.Sprintf("%v", this.Contents) + `,`,
		`ExportURL:` + fmt.Sprintf("%v", this.ExportURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionScriptsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScripts := "[]*RetentionScript{"
	for _, f := range this.Scripts {
		repeatedStringForScripts += strings.Replace(f.String(), "RetentionScript", "RetentionScript", 1) + ","
	}
	repeatedStringForScripts += "}"
	s := strings.Join([]string{`&GetRetentionScriptsResponse{`,
		`Scripts:` + repeatedStringForScripts + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionScriptRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRetentionScriptRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`ScriptID:` + strings.Replace(fmt.Sprintf("%v", this.ScriptID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRetentionScriptResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRetentionScriptResponse{`,
		`Script:` + strings.Replace(this.Script.String(), "DetailedRetentionScript", "DetailedRetentionScript", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRetentionScriptRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRetentionScriptRequest{`,
		`Script:` + strings.Replace(this.Script.String(), "DetailedRetentionScript", "DetailedRetentionScript", 1) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRetentionScriptResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRetentionScriptResponse{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRetentionScriptRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClusterIDs := "[]*UUID{"
	for _, f := range this.ClusterIDs {
		repeatedStringForClusterIDs += strings.Replace(fmt.Sprintf("%v", f), "UUID", "uuidpb.UUID", 1) + ","
	}
	repeatedStringForClusterIDs += "}"
	s := strings.Join([]string{`&UpdateRetentionScriptRequest{`,
		`ScriptID:` + strings.Replace(fmt.Sprintf("%v", this.ScriptID), "UUID", "uuidpb.UUID", 1) + `,`,
		`ScriptName:` + strings.Replace(fmt.Sprintf("%v", this.ScriptName), "StringValue", "types.StringValue", 1) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "StringValue", "types.StringValue", 1) + `,`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`FrequencyS:` + strings.Replace(fmt.Sprintf("%v", this.FrequencyS), "Int64Value", "types.Int64Value", 1) + `,`,
		`Contents:` + strings.Replace(fmt.Sprintf("%v", this.Contents), "StringValue", "types.StringValue", 1) + `,`,
		`ExportUrl:` + strings.Replace(fmt.Sprintf("%v", this.ExportUrl), "StringValue", "types.StringValue", 1) + `,`,
		`ClusterIDs:` + repeatedStringForClusterIDs + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRetentionScriptResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateRetentionScriptResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRetentionScriptRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRetentionScriptRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRetentionScriptResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRetentionScriptResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetPluginsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPluginsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPluginsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= PluginKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPluginsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPluginsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPluginsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugins = append(m.Plugins, &Plugin{})
			if err := m.Plugins[len(m.Plugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionPluginsForOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionPluginsForOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionPluginsForOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionPluginsForOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionPluginsForOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionPluginsForOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugins = append(m.Plugins, &GetRetentionPluginsForOrgResponse_PluginState{})
			if err := m.Plugins[len(m.Plugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionPluginsForOrgResponse_PluginState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plugin == nil {
				m.Plugin = &Plugin{}
			}
			if err := m.Plugin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plugin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plugin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plugin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetentionEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionPluginConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionPluginConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionPluginConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionPluginConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionPluginConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionPluginConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configurations == nil {
				m.Configurations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Configurations[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetScripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetScripts = append(m.PresetScripts, &GetRetentionPluginConfigResponse_PresetScript{})
			if err := m.PresetScripts[len(m.PresetScripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultExportURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultExportURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowCustomExportURL", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowCustomExportURL = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowInsecureTLS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowInsecureTLS = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionPluginConfigResponse_PresetScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PresetScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PresetScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFrequencyS", wireType)
			}
			m.DefaultFrequencyS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultFrequencyS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgRetentionPluginConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgRetentionPluginConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgRetentionPluginConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrgRetentionPluginConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrgRetentionPluginConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrgRetentionPluginConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configurations == nil {
				m.Configurations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Configurations[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomExportUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomExportUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureTLS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsecureTLS = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrgRetentionPluginConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrgRetentionPluginConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrgRetentionPluginConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configurations == nil {
				m.Configurations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Configurations[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &types.StringValue{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomExportUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomExportUrl == nil {
				m.CustomExportUrl = &types.StringValue{}
			}
			if err := m.CustomExportUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureTLS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InsecureTLS == nil {
				m.InsecureTLS = &types.BoolValue{}
			}
			if err := m.InsecureTLS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePresets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisablePresets == nil {
				m.DisablePresets = &types.BoolValue{}
			}
			if err := m.DisablePresets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrgRetentionPluginConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrgRetentionPluginConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrgRetentionPluginConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionScriptsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionScriptsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionScriptsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptID == nil {
				m.ScriptID = &uuidpb.UUID{}
			}
			if err := m.ScriptID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyS", wireType)
			}
			m.FrequencyS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterIDs = append(m.ClusterIDs, &uuidpb.UUID{})
			if err := m.ClusterIDs[len(m.ClusterIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPreset = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetailedRetentionScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailedRetentionScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailedRetentionScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Script == nil {
				m.Script = &RetentionScript{}
			}
			if err := m.Script.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionScriptsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionScriptsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionScriptsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scripts = append(m.Scripts, &RetentionScript{})
			if err := m.Scripts[len(m.Scripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptID == nil {
				m.ScriptID = &uuidpb.UUID{}
			}
			if err := m.ScriptID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Script == nil {
				m.Script = &DetailedRetentionScript{}
			}
			if err := m.Script.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRetentionScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRetentionScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRetentionScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Script == nil {
				m.Script = &DetailedRetentionScript{}
			}
			if err := m.Script.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRetentionScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRetentionScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRetentionScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRetentionScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRetentionScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRetentionScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptID == nil {
				m.ScriptID = &uuidpb.UUID{}
			}
			if err := m.ScriptID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptName == nil {
				m.ScriptName = &types.StringValue{}
			}
			if err := m.ScriptName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.StringValue{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrequencyS == nil {
				m.FrequencyS = &types.Int64Value{}
			}
			if err := m.FrequencyS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contents == nil {
				m.Contents = &types.StringValue{}
			}
			if err := m.Contents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExportUrl == nil {
				m.ExportUrl = &types.StringValue{}
			}
			if err := m.ExportUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterIDs = append(m.ClusterIDs, &uuidpb.UUID{})
			if err := m.ClusterIDs[len(m.ClusterIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRetentionScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRetentionScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRetentionScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRetentionScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRetentionScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRetentionScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRetentionScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRetentionScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRetentionScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
