# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

load("@amqp_gen_reqs//:requirements.bzl", "requirement")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("//bazel:pl_build_system.bzl", "pl_py_test")

package(default_visibility = ["//src:__subpackages__"])

py_library(
    name = "amqp_code_gen",
    srcs = ["amqp_code_gen.py"],
    data = [
        "amqp0-9-1.stripped.xml",
        "gen_templates/amqp_pxl_function.h.jinja_template",
        "gen_templates/decode.cc.jinja_template",
        "gen_templates/decode.h.jinja_template",
        "gen_templates/types_gen.h.jinja_template",
    ],
    deps = [
        "@rules_python//python/runfiles",
        requirement("Jinja2"),
    ],
)

pl_py_test(
    name = "amqp_code_gen_test",
    srcs = ["amqp_code_gen_test.py"],
    deps = [
        ":amqp_code_gen",
    ],
)

py_binary(
    name = "amqp_code_gen_main",
    srcs = ["amqp_code_gen_main.py"],
    deps = [
        ":amqp_code_gen",
        "@rules_python//python/runfiles",
        requirement("fire"),
    ],
)

py_binary(
    name = "amqp_test_code_gen",
    srcs = ["amqp_test_code_gen.py"],
    deps = [
        ":amqp_code_gen",
        requirement("fire"),
        requirement("pyshark"),
        requirement("dill"),
    ],
)

genrule(
    name = "amqp_gen_files",
    srcs = [".clang-format"],
    outs = [
        "decode.h",
        "decode.cc",
        "types_gen.h",
        "amqp.h",
    ],
    cmd = """
        export TMP=$$(mktemp -d)
        PATH="$$PATH:/opt/px_dev/bin" $(location //src/stirling/source_connectors/socket_tracer/protocols/amqp/amqp_code_generator:amqp_code_gen_main) run --generation_dir=$${TMP} --clang-format-file=$<
        cp $${TMP}/* $(RULEDIR)
        rm -rf $${TMP}
    """,
    # clang-format is installed within /opt/px_dev/bin and is used by the amqp code generator
    local = True,
    tools = ["//src/stirling/source_connectors/socket_tracer/protocols/amqp/amqp_code_generator:amqp_code_gen_main"],
)

write_file(
    name = "gen_update",
    out = "update.sh",
    content = [
        "#!/bin/bash",
        "cd $BUILD_WORKSPACE_DIRECTORY",
        "export AMQP_FILE_BASE=src/stirling/source_connectors/socket_tracer/protocols/amqp",
        "cp -fv bazel-bin/${AMQP_FILE_BASE}/amqp_code_generator/{decode.h,decode.cc,types_gen.h} ${AMQP_FILE_BASE}/",
        "cp -fv bazel-bin/${AMQP_FILE_BASE}/amqp_code_generator/amqp.h src/carnot/funcs/protocols/",
    ],
)

sh_binary(
    name = "update_files",
    srcs = [":gen_update"],
    data = [
        ":amqp_gen_files",
    ],
)
