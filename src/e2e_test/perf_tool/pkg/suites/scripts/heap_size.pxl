# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import px

heap_df = px._HeapStatsNumeric()
heap_df.node_name = px._exec_hostname()
heap_df.timestamp = px.now()
heap_df.free_bytes = (
    heap_df.central_cache_free_bytes
    + heap_df.transfer_cache_free_bytes
    + heap_df.thread_cache_free_bytes
    + heap_df.pageheap_free_bytes
)

table_df = px._DebugTableInfo()
table_df = table_df.groupby("asid").agg(table_size=("size", px.sum))
table_df.table_size = px.Bytes(table_df.table_size)

pod_df = px.DataFrame("process_stats", start_time="-1m1s")
pod_df = pod_df[pod_df.ctx["namespace"] == "pl"]
pod_df.pod = pod_df.ctx["pod"]
pod_df = pod_df[px.contains(pod_df.pod, "pem")]
pod_df.asid = px.upid_to_asid(pod_df.upid)
pod_df = pod_df.groupby(["asid", "pod"]).agg()

df = heap_df.merge(
    table_df, how="left", left_on=["asid"], right_on=["asid"], suffixes=["", "_y"]
)
df = df.merge(
    pod_df, how="left", left_on=["asid"], right_on=["asid"], suffixes=["", "_z"]
)
df.pod = px.select(df.pod == "", "pl/" + df.node_name, df.pod)
px.display(
    df[
        [
            "timestamp",
            "node_name",
            "pod",
            "table_size",
            "current_allocated_bytes",
            "heap_size_bytes",
            "free_bytes",
            "pageheap_unmapped_bytes",
        ]
    ]
)
