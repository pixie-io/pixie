/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package px.perf_tool;

option go_package = "experimentpb";

import "google/protobuf/duration.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// ExperimentSpec fully specifies how to run a single perf experiment.
// An Experiment is fully specified by specifying all of the following:
//  - parameters to use when building/running Vizier.
//  - specifications for other workloads to run on the same cluster during the experiment (see
//  WorkloadSpec).
//  - specifications for metrics to record during the experiment (see MetricSpec).
//  - specifications for the cluster that the experiment runs on (see ClusterSpec).
//  - the commit the experiment was run from.
message ExperimentSpec {
  // vizier_spec specifies parameters around building and deploying the vizier workload for the
  // experiment.
  WorkloadSpec vizier_spec = 1;
  // Each workload spec specifies parameters for building and deploying a workload for the
  // experiment.
  repeated WorkloadSpec workload_specs = 2;
  // Each metric spec specifies parameters for building and recording a metric during the
  // experiment.
  repeated MetricSpec metric_specs = 3;
  // ClusterSpec specifies what type of cluster to run the experiment on.
  ClusterSpec cluster_spec = 4;
  // RunSpec specifies parameters for running the experiment. For example, how long to run the
  // experiment for.
  RunSpec run_spec = 5;
  // commit_sha of the commit the experiment was run from.
  string commit_sha = 6 [ (gogoproto.customname) = "CommitSHA" ];
}

// WorkloadSpec specifies how to run a particular workload.
// Example workloads include: Vizier, Sock shop, or an HTTP protocol loadtest (see
// src/e2e_test/protocol_loadtest).
message WorkloadSpec {
  string name = 1;
  repeated DeployStep deploy_steps = 2;
  repeated HealthCheck healthchecks = 3;
}

// DeployStep specifies a single step in the process of deploying a workload.
message DeployStep {}

// HealthCheck specifies how to run a single check on a workload.
message HealthCheck {}

// MetricSpec specifies how to record a set of metrics for an experiment.
// Currently, PxL scripts are the only supported way of recording metrics.
message MetricSpec {}

// ClusterSpec specifies the type and size of cluster an experiment should run on.
// Cluster parameters currently include things like machine type, and number of nodes in the
// cluster.
message ClusterSpec {
  int32 num_nodes = 1;
  NodeSpec node = 2;
}

// NodeSpec specifies parameters for each node in the cluster. For example, the machine type of the
// node.
message NodeSpec {
  string machine_type = 1;
}

// RunSpec specifies parameters for the execution of the experiment. Currently, it specifies how
// long to run different phases of the experiment.
message RunSpec {
  google.protobuf.Duration duration = 1;
  google.protobuf.Duration pre_workload_duration = 2;
}
