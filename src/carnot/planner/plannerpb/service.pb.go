// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/carnot/planner/plannerpb/service.proto

package plannerpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	distributedpb "px.dev/pixie/src/carnot/planner/distributedpb"
	logicalpb "px.dev/pixie/src/carnot/planner/dynamic_tracing/ir/logicalpb"
	statuspb "px.dev/pixie/src/common/base/statuspb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FuncToExecute struct {
	FuncName          string                    `protobuf:"bytes,1,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	ArgValues         []*FuncToExecute_ArgValue `protobuf:"bytes,2,rep,name=arg_values,json=argValues,proto3" json:"arg_values,omitempty"`
	OutputTablePrefix string                    `protobuf:"bytes,3,opt,name=output_table_prefix,json=outputTablePrefix,proto3" json:"output_table_prefix,omitempty"`
}

func (m *FuncToExecute) Reset()      { *m = FuncToExecute{} }
func (*FuncToExecute) ProtoMessage() {}
func (*FuncToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{0}
}
func (m *FuncToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FuncToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FuncToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FuncToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuncToExecute.Merge(m, src)
}
func (m *FuncToExecute) XXX_Size() int {
	return m.Size()
}
func (m *FuncToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_FuncToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_FuncToExecute proto.InternalMessageInfo

func (m *FuncToExecute) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *FuncToExecute) GetArgValues() []*FuncToExecute_ArgValue {
	if m != nil {
		return m.ArgValues
	}
	return nil
}

func (m *FuncToExecute) GetOutputTablePrefix() string {
	if m != nil {
		return m.OutputTablePrefix
	}
	return ""
}

type FuncToExecute_ArgValue struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *FuncToExecute_ArgValue) Reset()      { *m = FuncToExecute_ArgValue{} }
func (*FuncToExecute_ArgValue) ProtoMessage() {}
func (*FuncToExecute_ArgValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{0, 0}
}
func (m *FuncToExecute_ArgValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FuncToExecute_ArgValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FuncToExecute_ArgValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FuncToExecute_ArgValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuncToExecute_ArgValue.Merge(m, src)
}
func (m *FuncToExecute_ArgValue) XXX_Size() int {
	return m.Size()
}
func (m *FuncToExecute_ArgValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FuncToExecute_ArgValue.DiscardUnknown(m)
}

var xxx_messageInfo_FuncToExecute_ArgValue proto.InternalMessageInfo

func (m *FuncToExecute_ArgValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FuncToExecute_ArgValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Configs struct {
	OTelEndpointConfig *Configs_OTelEndpointConfig `protobuf:"bytes,1,opt,name=otel_endpoint_config,json=otelEndpointConfig,proto3" json:"otel_endpoint_config,omitempty"`
	PluginConfig       *Configs_PluginConfig       `protobuf:"bytes,2,opt,name=plugin_config,json=pluginConfig,proto3" json:"plugin_config,omitempty"`
}

func (m *Configs) Reset()      { *m = Configs{} }
func (*Configs) ProtoMessage() {}
func (*Configs) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{1}
}
func (m *Configs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configs.Merge(m, src)
}
func (m *Configs) XXX_Size() int {
	return m.Size()
}
func (m *Configs) XXX_DiscardUnknown() {
	xxx_messageInfo_Configs.DiscardUnknown(m)
}

var xxx_messageInfo_Configs proto.InternalMessageInfo

func (m *Configs) GetOTelEndpointConfig() *Configs_OTelEndpointConfig {
	if m != nil {
		return m.OTelEndpointConfig
	}
	return nil
}

func (m *Configs) GetPluginConfig() *Configs_PluginConfig {
	if m != nil {
		return m.PluginConfig
	}
	return nil
}

type Configs_OTelEndpointConfig struct {
	URL       string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Headers   map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Insecure  bool              `protobuf:"varint,3,opt,name=insecure,proto3" json:"insecure,omitempty"`
	Timeout   int64             `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	BatchSize int64             `protobuf:"varint,5,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (m *Configs_OTelEndpointConfig) Reset()      { *m = Configs_OTelEndpointConfig{} }
func (*Configs_OTelEndpointConfig) ProtoMessage() {}
func (*Configs_OTelEndpointConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{1, 0}
}
func (m *Configs_OTelEndpointConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configs_OTelEndpointConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configs_OTelEndpointConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configs_OTelEndpointConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configs_OTelEndpointConfig.Merge(m, src)
}
func (m *Configs_OTelEndpointConfig) XXX_Size() int {
	return m.Size()
}
func (m *Configs_OTelEndpointConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Configs_OTelEndpointConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Configs_OTelEndpointConfig proto.InternalMessageInfo

func (m *Configs_OTelEndpointConfig) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Configs_OTelEndpointConfig) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Configs_OTelEndpointConfig) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *Configs_OTelEndpointConfig) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Configs_OTelEndpointConfig) GetBatchSize() int64 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

type Configs_PluginConfig struct {
	StartTimeNs int64 `protobuf:"varint,1,opt,name=start_time_ns,json=startTimeNs,proto3" json:"start_time_ns,omitempty"`
	EndTimeNs   int64 `protobuf:"varint,2,opt,name=end_time_ns,json=endTimeNs,proto3" json:"end_time_ns,omitempty"`
}

func (m *Configs_PluginConfig) Reset()      { *m = Configs_PluginConfig{} }
func (*Configs_PluginConfig) ProtoMessage() {}
func (*Configs_PluginConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{1, 1}
}
func (m *Configs_PluginConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configs_PluginConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configs_PluginConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configs_PluginConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configs_PluginConfig.Merge(m, src)
}
func (m *Configs_PluginConfig) XXX_Size() int {
	return m.Size()
}
func (m *Configs_PluginConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Configs_PluginConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Configs_PluginConfig proto.InternalMessageInfo

func (m *Configs_PluginConfig) GetStartTimeNs() int64 {
	if m != nil {
		return m.StartTimeNs
	}
	return 0
}

func (m *Configs_PluginConfig) GetEndTimeNs() int64 {
	if m != nil {
		return m.EndTimeNs
	}
	return 0
}

type QueryRequest struct {
	LogicalPlannerState *distributedpb.LogicalPlannerState `protobuf:"bytes,5,opt,name=logical_planner_state,json=logicalPlannerState,proto3" json:"logical_planner_state,omitempty"`
	QueryStr            string                             `protobuf:"bytes,1,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
	ExecFuncs           []*FuncToExecute                   `protobuf:"bytes,3,rep,name=exec_funcs,json=execFuncs,proto3" json:"exec_funcs,omitempty"`
	Configs             *Configs                           `protobuf:"bytes,4,opt,name=configs,proto3" json:"configs,omitempty"`
}

func (m *QueryRequest) Reset()      { *m = QueryRequest{} }
func (*QueryRequest) ProtoMessage() {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{2}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetLogicalPlannerState() *distributedpb.LogicalPlannerState {
	if m != nil {
		return m.LogicalPlannerState
	}
	return nil
}

func (m *QueryRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

func (m *QueryRequest) GetExecFuncs() []*FuncToExecute {
	if m != nil {
		return m.ExecFuncs
	}
	return nil
}

func (m *QueryRequest) GetConfigs() *Configs {
	if m != nil {
		return m.Configs
	}
	return nil
}

type QueryResponse struct {
	Status *statuspb.Status               `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Plan   *distributedpb.DistributedPlan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *QueryResponse) Reset()      { *m = QueryResponse{} }
func (*QueryResponse) ProtoMessage() {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{3}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetStatus() *statuspb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueryResponse) GetPlan() *distributedpb.DistributedPlan {
	if m != nil {
		return m.Plan
	}
	return nil
}

type CompileMutationsRequest struct {
	LogicalPlannerState *distributedpb.LogicalPlannerState `protobuf:"bytes,5,opt,name=logical_planner_state,json=logicalPlannerState,proto3" json:"logical_planner_state,omitempty"`
	QueryStr            string                             `protobuf:"bytes,1,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
	ExecFuncs           []*FuncToExecute                   `protobuf:"bytes,3,rep,name=exec_funcs,json=execFuncs,proto3" json:"exec_funcs,omitempty"`
	Configs             *Configs                           `protobuf:"bytes,4,opt,name=configs,proto3" json:"configs,omitempty"`
}

func (m *CompileMutationsRequest) Reset()      { *m = CompileMutationsRequest{} }
func (*CompileMutationsRequest) ProtoMessage() {}
func (*CompileMutationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{4}
}
func (m *CompileMutationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompileMutationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompileMutationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompileMutationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompileMutationsRequest.Merge(m, src)
}
func (m *CompileMutationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompileMutationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompileMutationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompileMutationsRequest proto.InternalMessageInfo

func (m *CompileMutationsRequest) GetLogicalPlannerState() *distributedpb.LogicalPlannerState {
	if m != nil {
		return m.LogicalPlannerState
	}
	return nil
}

func (m *CompileMutationsRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

func (m *CompileMutationsRequest) GetExecFuncs() []*FuncToExecute {
	if m != nil {
		return m.ExecFuncs
	}
	return nil
}

func (m *CompileMutationsRequest) GetConfigs() *Configs {
	if m != nil {
		return m.Configs
	}
	return nil
}

type DeleteTracepoint struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteTracepoint) Reset()      { *m = DeleteTracepoint{} }
func (*DeleteTracepoint) ProtoMessage() {}
func (*DeleteTracepoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{5}
}
func (m *DeleteTracepoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTracepoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTracepoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTracepoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTracepoint.Merge(m, src)
}
func (m *DeleteTracepoint) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTracepoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTracepoint.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTracepoint proto.InternalMessageInfo

func (m *DeleteTracepoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ConfigUpdate struct {
	Key          string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value        string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	AgentPodName string `protobuf:"bytes,3,opt,name=agent_pod_name,json=agentPodName,proto3" json:"agent_pod_name,omitempty"`
}

func (m *ConfigUpdate) Reset()      { *m = ConfigUpdate{} }
func (*ConfigUpdate) ProtoMessage() {}
func (*ConfigUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{6}
}
func (m *ConfigUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigUpdate.Merge(m, src)
}
func (m *ConfigUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ConfigUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigUpdate proto.InternalMessageInfo

func (m *ConfigUpdate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigUpdate) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ConfigUpdate) GetAgentPodName() string {
	if m != nil {
		return m.AgentPodName
	}
	return ""
}

type CompileMutation struct {
	// Types that are valid to be assigned to Mutation:
	//	*CompileMutation_Trace
	//	*CompileMutation_DeleteTracepoint
	//	*CompileMutation_ConfigUpdate
	Mutation isCompileMutation_Mutation `protobuf_oneof:"mutation"`
}

func (m *CompileMutation) Reset()      { *m = CompileMutation{} }
func (*CompileMutation) ProtoMessage() {}
func (*CompileMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{7}
}
func (m *CompileMutation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompileMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompileMutation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompileMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompileMutation.Merge(m, src)
}
func (m *CompileMutation) XXX_Size() int {
	return m.Size()
}
func (m *CompileMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_CompileMutation.DiscardUnknown(m)
}

var xxx_messageInfo_CompileMutation proto.InternalMessageInfo

type isCompileMutation_Mutation interface {
	isCompileMutation_Mutation()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CompileMutation_Trace struct {
	Trace *logicalpb.TracepointDeployment `protobuf:"bytes,2,opt,name=trace,proto3,oneof" json:"trace,omitempty"`
}
type CompileMutation_DeleteTracepoint struct {
	DeleteTracepoint *DeleteTracepoint `protobuf:"bytes,3,opt,name=delete_tracepoint,json=deleteTracepoint,proto3,oneof" json:"delete_tracepoint,omitempty"`
}
type CompileMutation_ConfigUpdate struct {
	ConfigUpdate *ConfigUpdate `protobuf:"bytes,4,opt,name=config_update,json=configUpdate,proto3,oneof" json:"config_update,omitempty"`
}

func (*CompileMutation_Trace) isCompileMutation_Mutation()            {}
func (*CompileMutation_DeleteTracepoint) isCompileMutation_Mutation() {}
func (*CompileMutation_ConfigUpdate) isCompileMutation_Mutation()     {}

func (m *CompileMutation) GetMutation() isCompileMutation_Mutation {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *CompileMutation) GetTrace() *logicalpb.TracepointDeployment {
	if x, ok := m.GetMutation().(*CompileMutation_Trace); ok {
		return x.Trace
	}
	return nil
}

func (m *CompileMutation) GetDeleteTracepoint() *DeleteTracepoint {
	if x, ok := m.GetMutation().(*CompileMutation_DeleteTracepoint); ok {
		return x.DeleteTracepoint
	}
	return nil
}

func (m *CompileMutation) GetConfigUpdate() *ConfigUpdate {
	if x, ok := m.GetMutation().(*CompileMutation_ConfigUpdate); ok {
		return x.ConfigUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CompileMutation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CompileMutation_Trace)(nil),
		(*CompileMutation_DeleteTracepoint)(nil),
		(*CompileMutation_ConfigUpdate)(nil),
	}
}

type CompileMutationsResponse struct {
	Status    *statuspb.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Mutations []*CompileMutation `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
}

func (m *CompileMutationsResponse) Reset()      { *m = CompileMutationsResponse{} }
func (*CompileMutationsResponse) ProtoMessage() {}
func (*CompileMutationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{8}
}
func (m *CompileMutationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompileMutationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompileMutationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompileMutationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompileMutationsResponse.Merge(m, src)
}
func (m *CompileMutationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompileMutationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompileMutationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompileMutationsResponse proto.InternalMessageInfo

func (m *CompileMutationsResponse) GetStatus() *statuspb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CompileMutationsResponse) GetMutations() []*CompileMutation {
	if m != nil {
		return m.Mutations
	}
	return nil
}

type GenerateOTelScriptRequest struct {
	LogicalPlannerState *distributedpb.LogicalPlannerState `protobuf:"bytes,1,opt,name=logical_planner_state,json=logicalPlannerState,proto3" json:"logical_planner_state,omitempty"`
	PxlScript           string                             `protobuf:"bytes,2,opt,name=pxl_script,json=pxlScript,proto3" json:"pxl_script,omitempty"`
}

func (m *GenerateOTelScriptRequest) Reset()      { *m = GenerateOTelScriptRequest{} }
func (*GenerateOTelScriptRequest) ProtoMessage() {}
func (*GenerateOTelScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{9}
}
func (m *GenerateOTelScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateOTelScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateOTelScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateOTelScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateOTelScriptRequest.Merge(m, src)
}
func (m *GenerateOTelScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateOTelScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateOTelScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateOTelScriptRequest proto.InternalMessageInfo

func (m *GenerateOTelScriptRequest) GetLogicalPlannerState() *distributedpb.LogicalPlannerState {
	if m != nil {
		return m.LogicalPlannerState
	}
	return nil
}

func (m *GenerateOTelScriptRequest) GetPxlScript() string {
	if m != nil {
		return m.PxlScript
	}
	return ""
}

type GenerateOTelScriptResponse struct {
	Status     *statuspb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OTelScript string           `protobuf:"bytes,2,opt,name=otel_script,json=otelScript,proto3" json:"otel_script,omitempty"`
}

func (m *GenerateOTelScriptResponse) Reset()      { *m = GenerateOTelScriptResponse{} }
func (*GenerateOTelScriptResponse) ProtoMessage() {}
func (*GenerateOTelScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_710b3465b5cdfdeb, []int{10}
}
func (m *GenerateOTelScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateOTelScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateOTelScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateOTelScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateOTelScriptResponse.Merge(m, src)
}
func (m *GenerateOTelScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateOTelScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateOTelScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateOTelScriptResponse proto.InternalMessageInfo

func (m *GenerateOTelScriptResponse) GetStatus() *statuspb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GenerateOTelScriptResponse) GetOTelScript() string {
	if m != nil {
		return m.OTelScript
	}
	return ""
}

func init() {
	proto.RegisterType((*FuncToExecute)(nil), "px.carnot.planner.plannerpb.FuncToExecute")
	proto.RegisterType((*FuncToExecute_ArgValue)(nil), "px.carnot.planner.plannerpb.FuncToExecute.ArgValue")
	proto.RegisterType((*Configs)(nil), "px.carnot.planner.plannerpb.Configs")
	proto.RegisterType((*Configs_OTelEndpointConfig)(nil), "px.carnot.planner.plannerpb.Configs.OTelEndpointConfig")
	proto.RegisterMapType((map[string]string)(nil), "px.carnot.planner.plannerpb.Configs.OTelEndpointConfig.HeadersEntry")
	proto.RegisterType((*Configs_PluginConfig)(nil), "px.carnot.planner.plannerpb.Configs.PluginConfig")
	proto.RegisterType((*QueryRequest)(nil), "px.carnot.planner.plannerpb.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "px.carnot.planner.plannerpb.QueryResponse")
	proto.RegisterType((*CompileMutationsRequest)(nil), "px.carnot.planner.plannerpb.CompileMutationsRequest")
	proto.RegisterType((*DeleteTracepoint)(nil), "px.carnot.planner.plannerpb.DeleteTracepoint")
	proto.RegisterType((*ConfigUpdate)(nil), "px.carnot.planner.plannerpb.ConfigUpdate")
	proto.RegisterType((*CompileMutation)(nil), "px.carnot.planner.plannerpb.CompileMutation")
	proto.RegisterType((*CompileMutationsResponse)(nil), "px.carnot.planner.plannerpb.CompileMutationsResponse")
	proto.RegisterType((*GenerateOTelScriptRequest)(nil), "px.carnot.planner.plannerpb.GenerateOTelScriptRequest")
	proto.RegisterType((*GenerateOTelScriptResponse)(nil), "px.carnot.planner.plannerpb.GenerateOTelScriptResponse")
}

func init() {
	proto.RegisterFile("src/carnot/planner/plannerpb/service.proto", fileDescriptor_710b3465b5cdfdeb)
}

var fileDescriptor_710b3465b5cdfdeb = []byte{
	// 1142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x51, 0x6f, 0x1b, 0x45,
	0x10, 0xf6, 0xd9, 0x69, 0x63, 0x8f, 0x9d, 0x92, 0x6e, 0x0b, 0xb8, 0xae, 0x7a, 0x89, 0x4e, 0x05,
	0x85, 0x40, 0xcf, 0xe0, 0x06, 0x82, 0x2a, 0x01, 0xc2, 0x4d, 0x20, 0x54, 0xa5, 0x84, 0x4b, 0xda,
	0x87, 0xaa, 0xe2, 0x74, 0x3e, 0x4f, 0x9c, 0x13, 0xe7, 0xbd, 0xeb, 0xee, 0x5e, 0xe5, 0xe4, 0x85,
	0x82, 0xc4, 0x3b, 0x12, 0x7f, 0x80, 0x07, 0x84, 0x40, 0xfc, 0x11, 0x1e, 0xf3, 0xd8, 0x07, 0x14,
	0x11, 0x47, 0x42, 0x3c, 0xf6, 0x27, 0xa0, 0xdd, 0xbd, 0x4b, 0x9c, 0xc4, 0x4d, 0x9c, 0x88, 0x47,
	0x9e, 0x6e, 0x67, 0x76, 0xe6, 0x9b, 0xd9, 0x6f, 0x66, 0x76, 0x0f, 0x66, 0x39, 0xf3, 0xeb, 0xbe,
	0xc7, 0x68, 0x24, 0xea, 0x71, 0xe8, 0x51, 0x8a, 0x2c, 0xfb, 0xc6, 0xad, 0x3a, 0x47, 0xf6, 0x24,
	0xf0, 0xd1, 0x8e, 0x59, 0x24, 0x22, 0x72, 0x35, 0xee, 0xd9, 0xda, 0xd4, 0x4e, 0x4d, 0xec, 0x3d,
	0xd3, 0xda, 0x07, 0x43, 0x80, 0xda, 0x1b, 0xd4, 0xeb, 0x06, 0xbe, 0x2b, 0x98, 0xe7, 0x07, 0xb4,
	0x53, 0x0f, 0x58, 0x3d, 0x8c, 0x3a, 0x81, 0xef, 0x85, 0x71, 0x2b, 0x5b, 0x69, 0xec, 0xda, 0x6b,
	0xca, 0x3d, 0xea, 0x76, 0x23, 0x5a, 0x6f, 0x79, 0x1c, 0xeb, 0x5c, 0x78, 0x22, 0xe1, 0x32, 0x07,
	0xb5, 0x48, 0xcd, 0x6e, 0x74, 0x02, 0xb1, 0x9e, 0xb4, 0x6c, 0x3f, 0xea, 0xd6, 0x3b, 0x51, 0x27,
	0xaa, 0x2b, 0x75, 0x2b, 0x59, 0x53, 0x92, 0x12, 0xd4, 0x2a, 0x35, 0x9f, 0x1f, 0x96, 0x54, 0xc0,
	0x05, 0x0b, 0x5a, 0x89, 0xc0, 0x76, 0xdc, 0x1a, 0x94, 0x5c, 0x69, 0xa1, 0x1d, 0xad, 0xbf, 0x0d,
	0x98, 0xf8, 0x24, 0xa1, 0xfe, 0x6a, 0xb4, 0xd8, 0x43, 0x3f, 0x11, 0x48, 0xae, 0x42, 0x69, 0x2d,
	0xa1, 0xbe, 0x4b, 0xbd, 0x2e, 0x56, 0x8d, 0x69, 0x63, 0xa6, 0xe4, 0x14, 0xa5, 0xe2, 0x9e, 0xd7,
	0x45, 0xe2, 0x00, 0x78, 0xac, 0xe3, 0x3e, 0xf1, 0xc2, 0x04, 0x79, 0x35, 0x3f, 0x5d, 0x98, 0x29,
	0x37, 0x6e, 0xda, 0xc7, 0xd0, 0x65, 0x1f, 0x00, 0xb7, 0x3f, 0x66, 0x9d, 0x07, 0xd2, 0xd7, 0x29,
	0x79, 0xe9, 0x8a, 0x13, 0x1b, 0x2e, 0x45, 0x89, 0x88, 0x13, 0xe1, 0x0a, 0xaf, 0x15, 0xa2, 0x1b,
	0x33, 0x5c, 0x0b, 0x7a, 0xd5, 0x82, 0x0a, 0x7d, 0x51, 0x6f, 0xad, 0xca, 0x9d, 0x65, 0xb5, 0x51,
	0x9b, 0x83, 0x62, 0x06, 0x43, 0x08, 0x8c, 0x0d, 0xe4, 0xa9, 0xd6, 0xe4, 0x32, 0x9c, 0x53, 0xf9,
	0x55, 0xf3, 0x4a, 0xa9, 0x05, 0xeb, 0xcf, 0x31, 0x18, 0xbf, 0x1d, 0xd1, 0xb5, 0xa0, 0xc3, 0xc9,
	0xb7, 0x06, 0x5c, 0x8e, 0x04, 0x86, 0x2e, 0xd2, 0x76, 0x1c, 0x05, 0x54, 0xb8, 0xbe, 0xda, 0x51,
	0x30, 0xe5, 0xc6, 0xfc, 0xb1, 0x07, 0x4a, 0x41, 0xec, 0x2f, 0x56, 0x31, 0x5c, 0x4c, 0xfd, 0xb5,
	0xae, 0xf9, 0x4a, 0x7f, 0x7b, 0x8a, 0x1c, 0xd5, 0x3b, 0x44, 0x06, 0x3b, 0xa8, 0x23, 0x0f, 0x60,
	0x22, 0x0e, 0x93, 0x4e, 0x40, 0xb3, 0xd8, 0x79, 0x15, 0xfb, 0x9d, 0x91, 0x62, 0x2f, 0x2b, 0xcf,
	0x14, 0xbd, 0x12, 0x0f, 0x48, 0xb5, 0x9f, 0xf2, 0x30, 0x24, 0x05, 0x72, 0x05, 0x0a, 0x09, 0x0b,
	0x35, 0x4f, 0xcd, 0xf1, 0xfe, 0xf6, 0x54, 0xe1, 0xbe, 0x73, 0xd7, 0x91, 0x3a, 0xf2, 0x15, 0x8c,
	0xaf, 0xa3, 0xd7, 0x46, 0x96, 0x15, 0x74, 0xe1, 0x8c, 0xe7, 0xb7, 0x97, 0x34, 0xcc, 0x22, 0x15,
	0x6c, 0xc3, 0xc9, 0x40, 0x49, 0x0d, 0x8a, 0x01, 0xe5, 0xe8, 0x27, 0x0c, 0x55, 0x51, 0x8b, 0xce,
	0x9e, 0x4c, 0xaa, 0x30, 0x2e, 0x82, 0x2e, 0x46, 0x89, 0xa8, 0x8e, 0x4d, 0x1b, 0x33, 0x05, 0x27,
	0x13, 0xc9, 0x35, 0x80, 0x96, 0x27, 0xfc, 0x75, 0x97, 0x07, 0x9b, 0x58, 0x3d, 0xa7, 0x36, 0x4b,
	0x4a, 0xb3, 0x12, 0x6c, 0x62, 0xed, 0x16, 0x54, 0x06, 0xa3, 0x91, 0x49, 0x28, 0x7c, 0x8d, 0x1b,
	0x69, 0x1f, 0xc8, 0xe5, 0xf0, 0x36, 0xb8, 0x95, 0x7f, 0xdf, 0xa8, 0x39, 0x50, 0x19, 0x24, 0x90,
	0x58, 0x30, 0xc1, 0x85, 0xc7, 0x84, 0x2b, 0x63, 0xbb, 0x94, 0x2b, 0x94, 0x82, 0x53, 0x56, 0xca,
	0xd5, 0xa0, 0x8b, 0xf7, 0x38, 0x31, 0xa1, 0x8c, 0xb4, 0xbd, 0x67, 0x91, 0xd7, 0xf9, 0x20, 0x6d,
	0xeb, 0x7d, 0xeb, 0x97, 0x3c, 0x54, 0xbe, 0x4c, 0x90, 0x6d, 0x38, 0xf8, 0x38, 0x41, 0x2e, 0xc8,
	0x3a, 0xbc, 0x9c, 0x0e, 0xbe, 0x9b, 0x72, 0xe7, 0xca, 0x01, 0xd7, 0x47, 0x29, 0x37, 0xe6, 0x86,
	0x70, 0x7c, 0x60, 0x60, 0xed, 0xbb, 0xda, 0x7b, 0x59, 0x6f, 0xae, 0x48, 0x5f, 0xe7, 0x52, 0x78,
	0x54, 0x29, 0x07, 0xf6, 0xb1, 0x8c, 0xec, 0x72, 0xc1, 0xb2, 0x81, 0x55, 0x8a, 0x15, 0xc1, 0xc8,
	0x67, 0x00, 0xd8, 0x43, 0xdf, 0x95, 0x13, 0xcc, 0xab, 0x05, 0x55, 0xdf, 0xd9, 0xd1, 0x07, 0xd6,
	0x29, 0x49, 0x6f, 0xa9, 0xe2, 0xe4, 0x43, 0x18, 0xd7, 0xad, 0xca, 0x55, 0xad, 0xca, 0x8d, 0xeb,
	0xa3, 0xf4, 0x89, 0x93, 0x39, 0xdd, 0x19, 0x2b, 0xe6, 0x27, 0x0b, 0xd6, 0x77, 0x06, 0x4c, 0xa4,
	0x44, 0xf1, 0x38, 0xa2, 0x1c, 0xc9, 0x9b, 0x70, 0x5e, 0x5f, 0x7d, 0xe9, 0xf8, 0x5d, 0x92, 0xb0,
	0xd9, 0xad, 0x68, 0xaf, 0xa8, 0x85, 0x93, 0x9a, 0x90, 0x05, 0x18, 0x93, 0x21, 0xd2, 0x69, 0x79,
	0xfb, 0x44, 0x16, 0x17, 0xf6, 0x25, 0x49, 0x9a, 0xa3, 0xbc, 0xad, 0xdf, 0xf3, 0xf0, 0xea, 0xed,
	0xa8, 0x1b, 0x07, 0x21, 0x7e, 0x9e, 0x08, 0x4f, 0x04, 0x11, 0xe5, 0xff, 0x17, 0xee, 0x05, 0x85,
	0xb3, 0x5e, 0x87, 0xc9, 0x05, 0x0c, 0x51, 0xe0, 0x2a, 0xf3, 0x7c, 0x54, 0x03, 0x3f, 0xec, 0xe2,
	0xb5, 0x1e, 0x41, 0x45, 0xfb, 0xde, 0x8f, 0xdb, 0xf2, 0x7c, 0x23, 0xce, 0x24, 0xb9, 0x0e, 0x17,
	0xbc, 0x0e, 0x52, 0xe1, 0xc6, 0x51, 0x5b, 0x3f, 0x3b, 0xfa, 0xee, 0xaf, 0x28, 0xed, 0x72, 0xd4,
	0x96, 0x4f, 0x8f, 0xf5, 0x5b, 0x1e, 0x5e, 0x3a, 0x54, 0x33, 0xf2, 0x10, 0xce, 0xc9, 0x27, 0x17,
	0xd3, 0x76, 0x68, 0x0e, 0xab, 0xcd, 0xc1, 0xa7, 0xd9, 0x0e, 0x98, 0x9d, 0x3d, 0xc8, 0xfb, 0xc7,
	0x59, 0xc0, 0x38, 0x8c, 0x36, 0xba, 0x48, 0xc5, 0x52, 0xce, 0xd1, 0x90, 0xe4, 0x11, 0x5c, 0x6c,
	0xab, 0x53, 0x2b, 0x57, 0x6d, 0xa7, 0x12, 0x2b, 0x37, 0x6e, 0x1c, 0xcb, 0xdf, 0x61, 0xae, 0x96,
	0x72, 0xce, 0x64, 0xfb, 0x30, 0x7f, 0xcb, 0x30, 0xa1, 0xe9, 0x75, 0x13, 0x45, 0x56, 0x5a, 0x99,
	0x37, 0x46, 0xa8, 0x8c, 0x66, 0x77, 0x29, 0xe7, 0x54, 0xfc, 0x01, 0xb9, 0x09, 0x50, 0xec, 0xa6,
	0xbc, 0x58, 0x3f, 0x1a, 0x50, 0x3d, 0xda, 0xdf, 0x67, 0x99, 0xb7, 0x3b, 0x50, 0xca, 0x50, 0xb3,
	0xe7, 0xe1, 0xad, 0x13, 0x72, 0x3c, 0x10, 0xd6, 0xd9, 0x77, 0xb7, 0x7e, 0x36, 0xe0, 0xca, 0xa7,
	0x48, 0x91, 0x79, 0x02, 0xe5, 0xeb, 0xb1, 0xe2, 0xb3, 0x20, 0x16, 0x27, 0xce, 0x9d, 0xf1, 0x5f,
	0xcf, 0xdd, 0x35, 0x80, 0xb8, 0x17, 0xba, 0x5c, 0x85, 0x4f, 0x5b, 0xb1, 0x14, 0xf7, 0xd2, 0x7c,
	0xac, 0x4d, 0xa8, 0x0d, 0xcb, 0xf2, 0x2c, 0xec, 0xd5, 0xa1, 0xac, 0xfe, 0x33, 0x06, 0x43, 0x35,
	0x2f, 0xf4, 0xb7, 0xa7, 0x60, 0x00, 0x19, 0xa4, 0x89, 0x5e, 0x37, 0x9e, 0x16, 0xe0, 0x42, 0x96,
	0xab, 0xfe, 0x25, 0x25, 0x28, 0xa7, 0x4a, 0x71, 0xaa, 0xae, 0x4d, 0x72, 0x7c, 0x8b, 0x0c, 0xbe,
	0x41, 0xb5, 0xd9, 0x51, 0x4c, 0xd3, 0x73, 0x7d, 0x03, 0x93, 0x87, 0x3b, 0x86, 0xcc, 0x9d, 0xa6,
	0xd2, 0xd9, 0x05, 0x5a, 0x7b, 0xf7, 0x94, 0x5e, 0x69, 0x02, 0xdf, 0x1b, 0x40, 0x8e, 0xf2, 0x4e,
	0xde, 0x3b, 0x16, 0xed, 0x85, 0xed, 0x54, 0x9b, 0x3f, 0xb5, 0x9f, 0xce, 0xa3, 0xf9, 0xd1, 0xd6,
	0x8e, 0x99, 0x7b, 0xb6, 0x63, 0xe6, 0x9e, 0xef, 0x98, 0xc6, 0xd3, 0xbe, 0x69, 0xfc, 0xda, 0x37,
	0x8d, 0x3f, 0xfa, 0xa6, 0xb1, 0xd5, 0x37, 0x8d, 0xbf, 0xfa, 0xa6, 0xf1, 0x4f, 0xdf, 0xcc, 0x3d,
	0xef, 0x9b, 0xc6, 0x0f, 0xbb, 0x66, 0x6e, 0x6b, 0xd7, 0xcc, 0x3d, 0xdb, 0x35, 0x73, 0x0f, 0x4b,
	0x7b, 0xd8, 0xad, 0xf3, 0xea, 0xcf, 0xfa, 0xe6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0xcc,
	0xf5, 0x61, 0x72, 0x0c, 0x00, 0x00,
}

func (this *FuncToExecute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FuncToExecute)
	if !ok {
		that2, ok := that.(FuncToExecute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FuncName != that1.FuncName {
		return false
	}
	if len(this.ArgValues) != len(that1.ArgValues) {
		return false
	}
	for i := range this.ArgValues {
		if !this.ArgValues[i].Equal(that1.ArgValues[i]) {
			return false
		}
	}
	if this.OutputTablePrefix != that1.OutputTablePrefix {
		return false
	}
	return true
}
func (this *FuncToExecute_ArgValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FuncToExecute_ArgValue)
	if !ok {
		that2, ok := that.(FuncToExecute_ArgValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Configs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Configs)
	if !ok {
		that2, ok := that.(Configs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OTelEndpointConfig.Equal(that1.OTelEndpointConfig) {
		return false
	}
	if !this.PluginConfig.Equal(that1.PluginConfig) {
		return false
	}
	return true
}
func (this *Configs_OTelEndpointConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Configs_OTelEndpointConfig)
	if !ok {
		that2, ok := that.(Configs_OTelEndpointConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	if this.Insecure != that1.Insecure {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.BatchSize != that1.BatchSize {
		return false
	}
	return true
}
func (this *Configs_PluginConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Configs_PluginConfig)
	if !ok {
		that2, ok := that.(Configs_PluginConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartTimeNs != that1.StartTimeNs {
		return false
	}
	if this.EndTimeNs != that1.EndTimeNs {
		return false
	}
	return true
}
func (this *QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogicalPlannerState.Equal(that1.LogicalPlannerState) {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	if len(this.ExecFuncs) != len(that1.ExecFuncs) {
		return false
	}
	for i := range this.ExecFuncs {
		if !this.ExecFuncs[i].Equal(that1.ExecFuncs[i]) {
			return false
		}
	}
	if !this.Configs.Equal(that1.Configs) {
		return false
	}
	return true
}
func (this *QueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryResponse)
	if !ok {
		that2, ok := that.(QueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Plan.Equal(that1.Plan) {
		return false
	}
	return true
}
func (this *CompileMutationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutationsRequest)
	if !ok {
		that2, ok := that.(CompileMutationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogicalPlannerState.Equal(that1.LogicalPlannerState) {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	if len(this.ExecFuncs) != len(that1.ExecFuncs) {
		return false
	}
	for i := range this.ExecFuncs {
		if !this.ExecFuncs[i].Equal(that1.ExecFuncs[i]) {
			return false
		}
	}
	if !this.Configs.Equal(that1.Configs) {
		return false
	}
	return true
}
func (this *DeleteTracepoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteTracepoint)
	if !ok {
		that2, ok := that.(DeleteTracepoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ConfigUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigUpdate)
	if !ok {
		that2, ok := that.(ConfigUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.AgentPodName != that1.AgentPodName {
		return false
	}
	return true
}
func (this *CompileMutation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutation)
	if !ok {
		that2, ok := that.(CompileMutation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Mutation == nil {
		if this.Mutation != nil {
			return false
		}
	} else if this.Mutation == nil {
		return false
	} else if !this.Mutation.Equal(that1.Mutation) {
		return false
	}
	return true
}
func (this *CompileMutation_Trace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutation_Trace)
	if !ok {
		that2, ok := that.(CompileMutation_Trace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *CompileMutation_DeleteTracepoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutation_DeleteTracepoint)
	if !ok {
		that2, ok := that.(CompileMutation_DeleteTracepoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeleteTracepoint.Equal(that1.DeleteTracepoint) {
		return false
	}
	return true
}
func (this *CompileMutation_ConfigUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutation_ConfigUpdate)
	if !ok {
		that2, ok := that.(CompileMutation_ConfigUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConfigUpdate.Equal(that1.ConfigUpdate) {
		return false
	}
	return true
}
func (this *CompileMutationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutationsResponse)
	if !ok {
		that2, ok := that.(CompileMutationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if len(this.Mutations) != len(that1.Mutations) {
		return false
	}
	for i := range this.Mutations {
		if !this.Mutations[i].Equal(that1.Mutations[i]) {
			return false
		}
	}
	return true
}
func (this *GenerateOTelScriptRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateOTelScriptRequest)
	if !ok {
		that2, ok := that.(GenerateOTelScriptRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogicalPlannerState.Equal(that1.LogicalPlannerState) {
		return false
	}
	if this.PxlScript != that1.PxlScript {
		return false
	}
	return true
}
func (this *GenerateOTelScriptResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateOTelScriptResponse)
	if !ok {
		that2, ok := that.(GenerateOTelScriptResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.OTelScript != that1.OTelScript {
		return false
	}
	return true
}
func (this *FuncToExecute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&plannerpb.FuncToExecute{")
	s = append(s, "FuncName: "+fmt.Sprintf("%#v", this.FuncName)+",\n")
	if this.ArgValues != nil {
		s = append(s, "ArgValues: "+fmt.Sprintf("%#v", this.ArgValues)+",\n")
	}
	s = append(s, "OutputTablePrefix: "+fmt.Sprintf("%#v", this.OutputTablePrefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FuncToExecute_ArgValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.FuncToExecute_ArgValue{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Configs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.Configs{")
	if this.OTelEndpointConfig != nil {
		s = append(s, "OTelEndpointConfig: "+fmt.Sprintf("%#v", this.OTelEndpointConfig)+",\n")
	}
	if this.PluginConfig != nil {
		s = append(s, "PluginConfig: "+fmt.Sprintf("%#v", this.PluginConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Configs_OTelEndpointConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&plannerpb.Configs_OTelEndpointConfig{")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%#v: %#v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	if this.Headers != nil {
		s = append(s, "Headers: "+mapStringForHeaders+",\n")
	}
	s = append(s, "Insecure: "+fmt.Sprintf("%#v", this.Insecure)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "BatchSize: "+fmt.Sprintf("%#v", this.BatchSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Configs_PluginConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.Configs_PluginConfig{")
	s = append(s, "StartTimeNs: "+fmt.Sprintf("%#v", this.StartTimeNs)+",\n")
	s = append(s, "EndTimeNs: "+fmt.Sprintf("%#v", this.EndTimeNs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&plannerpb.QueryRequest{")
	if this.LogicalPlannerState != nil {
		s = append(s, "LogicalPlannerState: "+fmt.Sprintf("%#v", this.LogicalPlannerState)+",\n")
	}
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	if this.ExecFuncs != nil {
		s = append(s, "ExecFuncs: "+fmt.Sprintf("%#v", this.ExecFuncs)+",\n")
	}
	if this.Configs != nil {
		s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.QueryResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Plan != nil {
		s = append(s, "Plan: "+fmt.Sprintf("%#v", this.Plan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompileMutationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&plannerpb.CompileMutationsRequest{")
	if this.LogicalPlannerState != nil {
		s = append(s, "LogicalPlannerState: "+fmt.Sprintf("%#v", this.LogicalPlannerState)+",\n")
	}
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	if this.ExecFuncs != nil {
		s = append(s, "ExecFuncs: "+fmt.Sprintf("%#v", this.ExecFuncs)+",\n")
	}
	if this.Configs != nil {
		s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTracepoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&plannerpb.DeleteTracepoint{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&plannerpb.ConfigUpdate{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "AgentPodName: "+fmt.Sprintf("%#v", this.AgentPodName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompileMutation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&plannerpb.CompileMutation{")
	if this.Mutation != nil {
		s = append(s, "Mutation: "+fmt.Sprintf("%#v", this.Mutation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompileMutation_Trace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&plannerpb.CompileMutation_Trace{` +
		`Trace:` + fmt.Sprintf("%#v", this.Trace) + `}`}, ", ")
	return s
}
func (this *CompileMutation_DeleteTracepoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&plannerpb.CompileMutation_DeleteTracepoint{` +
		`DeleteTracepoint:` + fmt.Sprintf("%#v", this.DeleteTracepoint) + `}`}, ", ")
	return s
}
func (this *CompileMutation_ConfigUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&plannerpb.CompileMutation_ConfigUpdate{` +
		`ConfigUpdate:` + fmt.Sprintf("%#v", this.ConfigUpdate) + `}`}, ", ")
	return s
}
func (this *CompileMutationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.CompileMutationsResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Mutations != nil {
		s = append(s, "Mutations: "+fmt.Sprintf("%#v", this.Mutations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateOTelScriptRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.GenerateOTelScriptRequest{")
	if this.LogicalPlannerState != nil {
		s = append(s, "LogicalPlannerState: "+fmt.Sprintf("%#v", this.LogicalPlannerState)+",\n")
	}
	s = append(s, "PxlScript: "+fmt.Sprintf("%#v", this.PxlScript)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateOTelScriptResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.GenerateOTelScriptResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "OTelScript: "+fmt.Sprintf("%#v", this.OTelScript)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlannerServiceClient is the client API for PlannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlannerServiceClient interface {
	CompileQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	CompileMutations(ctx context.Context, in *CompileMutationsRequest, opts ...grpc.CallOption) (*CompileMutationsResponse, error)
	GenerateOTelScript(ctx context.Context, in *GenerateOTelScriptRequest, opts ...grpc.CallOption) (*GenerateOTelScriptResponse, error)
}

type plannerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlannerServiceClient(cc *grpc.ClientConn) PlannerServiceClient {
	return &plannerServiceClient{cc}
}

func (c *plannerServiceClient) CompileQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/px.carnot.planner.plannerpb.PlannerService/CompileQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plannerServiceClient) CompileMutations(ctx context.Context, in *CompileMutationsRequest, opts ...grpc.CallOption) (*CompileMutationsResponse, error) {
	out := new(CompileMutationsResponse)
	err := c.cc.Invoke(ctx, "/px.carnot.planner.plannerpb.PlannerService/CompileMutations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plannerServiceClient) GenerateOTelScript(ctx context.Context, in *GenerateOTelScriptRequest, opts ...grpc.CallOption) (*GenerateOTelScriptResponse, error) {
	out := new(GenerateOTelScriptResponse)
	err := c.cc.Invoke(ctx, "/px.carnot.planner.plannerpb.PlannerService/GenerateOTelScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlannerServiceServer is the server API for PlannerService service.
type PlannerServiceServer interface {
	CompileQuery(context.Context, *QueryRequest) (*QueryResponse, error)
	CompileMutations(context.Context, *CompileMutationsRequest) (*CompileMutationsResponse, error)
	GenerateOTelScript(context.Context, *GenerateOTelScriptRequest) (*GenerateOTelScriptResponse, error)
}

// UnimplementedPlannerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPlannerServiceServer struct {
}

func (*UnimplementedPlannerServiceServer) CompileQuery(ctx context.Context, req *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileQuery not implemented")
}
func (*UnimplementedPlannerServiceServer) CompileMutations(ctx context.Context, req *CompileMutationsRequest) (*CompileMutationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileMutations not implemented")
}
func (*UnimplementedPlannerServiceServer) GenerateOTelScript(ctx context.Context, req *GenerateOTelScriptRequest) (*GenerateOTelScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOTelScript not implemented")
}

func RegisterPlannerServiceServer(s *grpc.Server, srv PlannerServiceServer) {
	s.RegisterService(&_PlannerService_serviceDesc, srv)
}

func _PlannerService_CompileQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannerServiceServer).CompileQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.carnot.planner.plannerpb.PlannerService/CompileQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannerServiceServer).CompileQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlannerService_CompileMutations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileMutationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannerServiceServer).CompileMutations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.carnot.planner.plannerpb.PlannerService/CompileMutations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannerServiceServer).CompileMutations(ctx, req.(*CompileMutationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlannerService_GenerateOTelScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOTelScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannerServiceServer).GenerateOTelScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.carnot.planner.plannerpb.PlannerService/GenerateOTelScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannerServiceServer).GenerateOTelScript(ctx, req.(*GenerateOTelScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlannerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.carnot.planner.plannerpb.PlannerService",
	HandlerType: (*PlannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompileQuery",
			Handler:    _PlannerService_CompileQuery_Handler,
		},
		{
			MethodName: "CompileMutations",
			Handler:    _PlannerService_CompileMutations_Handler,
		},
		{
			MethodName: "GenerateOTelScript",
			Handler:    _PlannerService_GenerateOTelScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/carnot/planner/plannerpb/service.proto",
}

func (m *FuncToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FuncToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FuncToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputTablePrefix) > 0 {
		i -= len(m.OutputTablePrefix)
		copy(dAtA[i:], m.OutputTablePrefix)
		i = encodeVarintService(dAtA, i, uint64(len(m.OutputTablePrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArgValues) > 0 {
		for iNdEx := len(m.ArgValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ArgValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FuncName) > 0 {
		i -= len(m.FuncName)
		copy(dAtA[i:], m.FuncName)
		i = encodeVarintService(dAtA, i, uint64(len(m.FuncName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FuncToExecute_ArgValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FuncToExecute_ArgValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FuncToExecute_ArgValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Configs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PluginConfig != nil {
		{
			size, err := m.PluginConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OTelEndpointConfig != nil {
		{
			size, err := m.OTelEndpointConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Configs_OTelEndpointConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configs_OTelEndpointConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configs_OTelEndpointConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchSize != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BatchSize))
		i--
		dAtA[i] = 0x28
	}
	if m.Timeout != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x20
	}
	if m.Insecure {
		i--
		if m.Insecure {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintService(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Configs_PluginConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configs_PluginConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configs_PluginConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTimeNs != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.EndTimeNs))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTimeNs != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.StartTimeNs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogicalPlannerState != nil {
		{
			size, err := m.LogicalPlannerState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Configs != nil {
		{
			size, err := m.Configs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExecFuncs) > 0 {
		for iNdEx := len(m.ExecFuncs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecFuncs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QueryStr) > 0 {
		i -= len(m.QueryStr)
		copy(dAtA[i:], m.QueryStr)
		i = encodeVarintService(dAtA, i, uint64(len(m.QueryStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Plan != nil {
		{
			size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompileMutationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompileMutationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogicalPlannerState != nil {
		{
			size, err := m.LogicalPlannerState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Configs != nil {
		{
			size, err := m.Configs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExecFuncs) > 0 {
		for iNdEx := len(m.ExecFuncs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecFuncs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QueryStr) > 0 {
		i -= len(m.QueryStr)
		copy(dAtA[i:], m.QueryStr)
		i = encodeVarintService(dAtA, i, uint64(len(m.QueryStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTracepoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTracepoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTracepoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AgentPodName) > 0 {
		i -= len(m.AgentPodName)
		copy(dAtA[i:], m.AgentPodName)
		i = encodeVarintService(dAtA, i, uint64(len(m.AgentPodName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintService(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompileMutation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompileMutation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mutation != nil {
		{
			size := m.Mutation.Size()
			i -= size
			if _, err := m.Mutation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompileMutation_Trace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutation_Trace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Trace != nil {
		{
			size, err := m.Trace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CompileMutation_DeleteTracepoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutation_DeleteTracepoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteTracepoint != nil {
		{
			size, err := m.DeleteTracepoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CompileMutation_ConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutation_ConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfigUpdate != nil {
		{
			size, err := m.ConfigUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CompileMutationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompileMutationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mutations) > 0 {
		for iNdEx := len(m.Mutations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mutations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateOTelScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateOTelScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateOTelScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PxlScript) > 0 {
		i -= len(m.PxlScript)
		copy(dAtA[i:], m.PxlScript)
		i = encodeVarintService(dAtA, i, uint64(len(m.PxlScript)))
		i--
		dAtA[i] = 0x12
	}
	if m.LogicalPlannerState != nil {
		{
			size, err := m.LogicalPlannerState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateOTelScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateOTelScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateOTelScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OTelScript) > 0 {
		i -= len(m.OTelScript)
		copy(dAtA[i:], m.OTelScript)
		i = encodeVarintService(dAtA, i, uint64(len(m.OTelScript)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FuncToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FuncName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.ArgValues) > 0 {
		for _, e := range m.ArgValues {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.OutputTablePrefix)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *FuncToExecute_ArgValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *Configs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OTelEndpointConfig != nil {
		l = m.OTelEndpointConfig.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.PluginConfig != nil {
		l = m.PluginConfig.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *Configs_OTelEndpointConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if m.Insecure {
		n += 2
	}
	if m.Timeout != 0 {
		n += 1 + sovService(uint64(m.Timeout))
	}
	if m.BatchSize != 0 {
		n += 1 + sovService(uint64(m.BatchSize))
	}
	return n
}

func (m *Configs_PluginConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTimeNs != 0 {
		n += 1 + sovService(uint64(m.StartTimeNs))
	}
	if m.EndTimeNs != 0 {
		n += 1 + sovService(uint64(m.EndTimeNs))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.ExecFuncs) > 0 {
		for _, e := range m.ExecFuncs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Configs != nil {
		l = m.Configs.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.LogicalPlannerState != nil {
		l = m.LogicalPlannerState.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CompileMutationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.ExecFuncs) > 0 {
		for _, e := range m.ExecFuncs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Configs != nil {
		l = m.Configs.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.LogicalPlannerState != nil {
		l = m.LogicalPlannerState.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DeleteTracepoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AgentPodName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CompileMutation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mutation != nil {
		n += m.Mutation.Size()
	}
	return n
}

func (m *CompileMutation_Trace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *CompileMutation_DeleteTracepoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteTracepoint != nil {
		l = m.DeleteTracepoint.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *CompileMutation_ConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigUpdate != nil {
		l = m.ConfigUpdate.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *CompileMutationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Mutations) > 0 {
		for _, e := range m.Mutations {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GenerateOTelScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogicalPlannerState != nil {
		l = m.LogicalPlannerState.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.PxlScript)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GenerateOTelScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.OTelScript)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FuncToExecute) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgValues := "[]*FuncToExecute_ArgValue{"
	for _, f := range this.ArgValues {
		repeatedStringForArgValues += strings.Replace(fmt.Sprintf("%v", f), "FuncToExecute_ArgValue", "FuncToExecute_ArgValue", 1) + ","
	}
	repeatedStringForArgValues += "}"
	s := strings.Join([]string{`&FuncToExecute{`,
		`FuncName:` + fmt.Sprintf("%v", this.FuncName) + `,`,
		`ArgValues:` + repeatedStringForArgValues + `,`,
		`OutputTablePrefix:` + fmt.Sprintf("%v", this.OutputTablePrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FuncToExecute_ArgValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FuncToExecute_ArgValue{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Configs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Configs{`,
		`OTelEndpointConfig:` + strings.Replace(fmt.Sprintf("%v", this.OTelEndpointConfig), "Configs_OTelEndpointConfig", "Configs_OTelEndpointConfig", 1) + `,`,
		`PluginConfig:` + strings.Replace(fmt.Sprintf("%v", this.PluginConfig), "Configs_PluginConfig", "Configs_PluginConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Configs_OTelEndpointConfig) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&Configs_OTelEndpointConfig{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`Insecure:` + fmt.Sprintf("%v", this.Insecure) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`BatchSize:` + fmt.Sprintf("%v", this.BatchSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Configs_PluginConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Configs_PluginConfig{`,
		`StartTimeNs:` + fmt.Sprintf("%v", this.StartTimeNs) + `,`,
		`EndTimeNs:` + fmt.Sprintf("%v", this.EndTimeNs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecFuncs := "[]*FuncToExecute{"
	for _, f := range this.ExecFuncs {
		repeatedStringForExecFuncs += strings.Replace(f.String(), "FuncToExecute", "FuncToExecute", 1) + ","
	}
	repeatedStringForExecFuncs += "}"
	s := strings.Join([]string{`&QueryRequest{`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`ExecFuncs:` + repeatedStringForExecFuncs + `,`,
		`Configs:` + strings.Replace(this.Configs.String(), "Configs", "Configs", 1) + `,`,
		`LogicalPlannerState:` + strings.Replace(fmt.Sprintf("%v", this.LogicalPlannerState), "LogicalPlannerState", "distributedpb.LogicalPlannerState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "statuspb.Status", 1) + `,`,
		`Plan:` + strings.Replace(fmt.Sprintf("%v", this.Plan), "DistributedPlan", "distributedpb.DistributedPlan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecFuncs := "[]*FuncToExecute{"
	for _, f := range this.ExecFuncs {
		repeatedStringForExecFuncs += strings.Replace(f.String(), "FuncToExecute", "FuncToExecute", 1) + ","
	}
	repeatedStringForExecFuncs += "}"
	s := strings.Join([]string{`&CompileMutationsRequest{`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`ExecFuncs:` + repeatedStringForExecFuncs + `,`,
		`Configs:` + strings.Replace(this.Configs.String(), "Configs", "Configs", 1) + `,`,
		`LogicalPlannerState:` + strings.Replace(fmt.Sprintf("%v", this.LogicalPlannerState), "LogicalPlannerState", "distributedpb.LogicalPlannerState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTracepoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTracepoint{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigUpdate{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`AgentPodName:` + fmt.Sprintf("%v", this.AgentPodName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompileMutation{`,
		`Mutation:` + fmt.Sprintf("%v", this.Mutation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutation_Trace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompileMutation_Trace{`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "TracepointDeployment", "logicalpb.TracepointDeployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutation_DeleteTracepoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompileMutation_DeleteTracepoint{`,
		`DeleteTracepoint:` + strings.Replace(fmt.Sprintf("%v", this.DeleteTracepoint), "DeleteTracepoint", "DeleteTracepoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutation_ConfigUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompileMutation_ConfigUpdate{`,
		`ConfigUpdate:` + strings.Replace(fmt.Sprintf("%v", this.ConfigUpdate), "ConfigUpdate", "ConfigUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMutations := "[]*CompileMutation{"
	for _, f := range this.Mutations {
		repeatedStringForMutations += strings.Replace(f.String(), "CompileMutation", "CompileMutation", 1) + ","
	}
	repeatedStringForMutations += "}"
	s := strings.Join([]string{`&CompileMutationsResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "statuspb.Status", 1) + `,`,
		`Mutations:` + repeatedStringForMutations + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateOTelScriptRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateOTelScriptRequest{`,
		`LogicalPlannerState:` + strings.Replace(fmt.Sprintf("%v", this.LogicalPlannerState), "LogicalPlannerState", "distributedpb.LogicalPlannerState", 1) + `,`,
		`PxlScript:` + fmt.Sprintf("%v", this.PxlScript) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateOTelScriptResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateOTelScriptResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "statuspb.Status", 1) + `,`,
		`OTelScript:` + fmt.Sprintf("%v", this.OTelScript) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FuncToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuncToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuncToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuncName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArgValues = append(m.ArgValues, &FuncToExecute_ArgValue{})
			if err := m.ArgValues[len(m.ArgValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTablePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputTablePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FuncToExecute_ArgValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OTelEndpointConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OTelEndpointConfig == nil {
				m.OTelEndpointConfig = &Configs_OTelEndpointConfig{}
			}
			if err := m.OTelEndpointConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PluginConfig == nil {
				m.PluginConfig = &Configs_PluginConfig{}
			}
			if err := m.PluginConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configs_OTelEndpointConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OTelEndpointConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OTelEndpointConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insecure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Insecure = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configs_PluginConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeNs", wireType)
			}
			m.StartTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeNs", wireType)
			}
			m.EndTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFuncs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecFuncs = append(m.ExecFuncs, &FuncToExecute{})
			if err := m.ExecFuncs[len(m.ExecFuncs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configs == nil {
				m.Configs = &Configs{}
			}
			if err := m.Configs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalPlannerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogicalPlannerState == nil {
				m.LogicalPlannerState = &distributedpb.LogicalPlannerState{}
			}
			if err := m.LogicalPlannerState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &statuspb.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &distributedpb.DistributedPlan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompileMutationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompileMutationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompileMutationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFuncs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecFuncs = append(m.ExecFuncs, &FuncToExecute{})
			if err := m.ExecFuncs[len(m.ExecFuncs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configs == nil {
				m.Configs = &Configs{}
			}
			if err := m.Configs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalPlannerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogicalPlannerState == nil {
				m.LogicalPlannerState = &distributedpb.LogicalPlannerState{}
			}
			if err := m.LogicalPlannerState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTracepoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTracepoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTracepoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentPodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompileMutation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompileMutation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompileMutation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &logicalpb.TracepointDeployment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Mutation = &CompileMutation_Trace{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTracepoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteTracepoint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Mutation = &CompileMutation_DeleteTracepoint{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfigUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Mutation = &CompileMutation_ConfigUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompileMutationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompileMutationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompileMutationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &statuspb.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mutations = append(m.Mutations, &CompileMutation{})
			if err := m.Mutations[len(m.Mutations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateOTelScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateOTelScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateOTelScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalPlannerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogicalPlannerState == nil {
				m.LogicalPlannerState = &distributedpb.LogicalPlannerState{}
			}
			if err := m.LogicalPlannerState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxlScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PxlScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateOTelScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateOTelScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateOTelScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &statuspb.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OTelScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OTelScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
