// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/services/shared/agentpb/agent.proto

package agentpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AgentState int32

const (
	AGENT_STATE_UNKNOWN      AgentState = 0
	AGENT_STATE_HEALTHY      AgentState = 1
	AGENT_STATE_UNRESPONSIVE AgentState = 2
	AGENT_STATE_DISCONNECTED AgentState = 3
)

var AgentState_name = map[int32]string{
	0: "AGENT_STATE_UNKNOWN",
	1: "AGENT_STATE_HEALTHY",
	2: "AGENT_STATE_UNRESPONSIVE",
	3: "AGENT_STATE_DISCONNECTED",
}

var AgentState_value = map[string]int32{
	"AGENT_STATE_UNKNOWN":      0,
	"AGENT_STATE_HEALTHY":      1,
	"AGENT_STATE_UNRESPONSIVE": 2,
	"AGENT_STATE_DISCONNECTED": 3,
}

func (AgentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fef0af3bd5248f34, []int{0}
}

type AgentCapabilities struct {
	CollectsData bool `protobuf:"varint,1,opt,name=collects_data,json=collectsData,proto3" json:"collects_data,omitempty"`
}

func (m *AgentCapabilities) Reset()      { *m = AgentCapabilities{} }
func (*AgentCapabilities) ProtoMessage() {}
func (*AgentCapabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef0af3bd5248f34, []int{0}
}
func (m *AgentCapabilities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentCapabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentCapabilities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentCapabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentCapabilities.Merge(m, src)
}
func (m *AgentCapabilities) XXX_Size() int {
	return m.Size()
}
func (m *AgentCapabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentCapabilities.DiscardUnknown(m)
}

var xxx_messageInfo_AgentCapabilities proto.InternalMessageInfo

func (m *AgentCapabilities) GetCollectsData() bool {
	if m != nil {
		return m.CollectsData
	}
	return false
}

type AgentParameters struct {
	ProfilerStackTraceSamplePeriodMS int32 `protobuf:"varint,1,opt,name=profiler_stack_trace_sample_period_ms,json=profilerStackTraceSamplePeriodMs,proto3" json:"profiler_stack_trace_sample_period_ms,omitempty"`
}

func (m *AgentParameters) Reset()      { *m = AgentParameters{} }
func (*AgentParameters) ProtoMessage() {}
func (*AgentParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef0af3bd5248f34, []int{1}
}
func (m *AgentParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentParameters.Merge(m, src)
}
func (m *AgentParameters) XXX_Size() int {
	return m.Size()
}
func (m *AgentParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentParameters.DiscardUnknown(m)
}

var xxx_messageInfo_AgentParameters proto.InternalMessageInfo

func (m *AgentParameters) GetProfilerStackTraceSamplePeriodMS() int32 {
	if m != nil {
		return m.ProfilerStackTraceSamplePeriodMS
	}
	return 0
}

type AgentInfo struct {
	AgentID      *uuidpb.UUID       `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	HostInfo     *HostInfo          `protobuf:"bytes,2,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
	IPAddress    string             `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Capabilities *AgentCapabilities `protobuf:"bytes,4,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Parameters   *AgentParameters   `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *AgentInfo) Reset()      { *m = AgentInfo{} }
func (*AgentInfo) ProtoMessage() {}
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef0af3bd5248f34, []int{2}
}
func (m *AgentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfo.Merge(m, src)
}
func (m *AgentInfo) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfo proto.InternalMessageInfo

func (m *AgentInfo) GetAgentID() *uuidpb.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentInfo) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

func (m *AgentInfo) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *AgentInfo) GetCapabilities() *AgentCapabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *AgentInfo) GetParameters() *AgentParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type KernelVersion struct {
	Version  uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	MajorRev uint32 `protobuf:"varint,2,opt,name=major_rev,json=majorRev,proto3" json:"major_rev,omitempty"`
	MinorRev uint32 `protobuf:"varint,3,opt,name=minor_rev,json=minorRev,proto3" json:"minor_rev,omitempty"`
}

func (m *KernelVersion) Reset()      { *m = KernelVersion{} }
func (*KernelVersion) ProtoMessage() {}
func (*KernelVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef0af3bd5248f34, []int{3}
}
func (m *KernelVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KernelVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KernelVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KernelVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KernelVersion.Merge(m, src)
}
func (m *KernelVersion) XXX_Size() int {
	return m.Size()
}
func (m *KernelVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_KernelVersion.DiscardUnknown(m)
}

var xxx_messageInfo_KernelVersion proto.InternalMessageInfo

func (m *KernelVersion) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *KernelVersion) GetMajorRev() uint32 {
	if m != nil {
		return m.MajorRev
	}
	return 0
}

func (m *KernelVersion) GetMinorRev() uint32 {
	if m != nil {
		return m.MinorRev
	}
	return 0
}

type HostInfo struct {
	Hostname               string         `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	PodName                string         `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	HostIP                 string         `protobuf:"bytes,3,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
	Kernel                 *KernelVersion `protobuf:"bytes,4,opt,name=kernel,proto3" json:"kernel,omitempty"`
	KernelHeadersInstalled bool           `protobuf:"varint,5,opt,name=kernel_headers_installed,json=kernelHeadersInstalled,proto3" json:"kernel_headers_installed,omitempty"`
}

func (m *HostInfo) Reset()      { *m = HostInfo{} }
func (*HostInfo) ProtoMessage() {}
func (*HostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef0af3bd5248f34, []int{4}
}
func (m *HostInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostInfo.Merge(m, src)
}
func (m *HostInfo) XXX_Size() int {
	return m.Size()
}
func (m *HostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HostInfo proto.InternalMessageInfo

func (m *HostInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostInfo) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *HostInfo) GetHostIP() string {
	if m != nil {
		return m.HostIP
	}
	return ""
}

func (m *HostInfo) GetKernel() *KernelVersion {
	if m != nil {
		return m.Kernel
	}
	return nil
}

func (m *HostInfo) GetKernelHeadersInstalled() bool {
	if m != nil {
		return m.KernelHeadersInstalled
	}
	return false
}

type Agent struct {
	Info            *AgentInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	CreateTimeNS    int64      `protobuf:"varint,2,opt,name=create_time_ns,json=createTimeNs,proto3" json:"create_time_ns,omitempty"`
	LastHeartbeatNS int64      `protobuf:"varint,3,opt,name=last_heartbeat_ns,json=lastHeartbeatNs,proto3" json:"last_heartbeat_ns,omitempty"`
	ASID            uint32     `protobuf:"varint,4,opt,name=asid,proto3" json:"asid,omitempty"`
}

func (m *Agent) Reset()      { *m = Agent{} }
func (*Agent) ProtoMessage() {}
func (*Agent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef0af3bd5248f34, []int{5}
}
func (m *Agent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agent.Merge(m, src)
}
func (m *Agent) XXX_Size() int {
	return m.Size()
}
func (m *Agent) XXX_DiscardUnknown() {
	xxx_messageInfo_Agent.DiscardUnknown(m)
}

var xxx_messageInfo_Agent proto.InternalMessageInfo

func (m *Agent) GetInfo() *AgentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Agent) GetCreateTimeNS() int64 {
	if m != nil {
		return m.CreateTimeNS
	}
	return 0
}

func (m *Agent) GetLastHeartbeatNS() int64 {
	if m != nil {
		return m.LastHeartbeatNS
	}
	return 0
}

func (m *Agent) GetASID() uint32 {
	if m != nil {
		return m.ASID
	}
	return 0
}

type AgentStatus struct {
	NSSinceLastHeartbeat int64      `protobuf:"varint,1,opt,name=ns_since_last_heartbeat,json=nsSinceLastHeartbeat,proto3" json:"ns_since_last_heartbeat,omitempty"`
	State                AgentState `protobuf:"varint,2,opt,name=state,proto3,enum=px.vizier.services.shared.agent.AgentState" json:"state,omitempty"`
}

func (m *AgentStatus) Reset()      { *m = AgentStatus{} }
func (*AgentStatus) ProtoMessage() {}
func (*AgentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef0af3bd5248f34, []int{6}
}
func (m *AgentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentStatus.Merge(m, src)
}
func (m *AgentStatus) XXX_Size() int {
	return m.Size()
}
func (m *AgentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AgentStatus proto.InternalMessageInfo

func (m *AgentStatus) GetNSSinceLastHeartbeat() int64 {
	if m != nil {
		return m.NSSinceLastHeartbeat
	}
	return 0
}

func (m *AgentStatus) GetState() AgentState {
	if m != nil {
		return m.State
	}
	return AGENT_STATE_UNKNOWN
}

func init() {
	proto.RegisterEnum("px.vizier.services.shared.agent.AgentState", AgentState_name, AgentState_value)
	proto.RegisterType((*AgentCapabilities)(nil), "px.vizier.services.shared.agent.AgentCapabilities")
	proto.RegisterType((*AgentParameters)(nil), "px.vizier.services.shared.agent.AgentParameters")
	proto.RegisterType((*AgentInfo)(nil), "px.vizier.services.shared.agent.AgentInfo")
	proto.RegisterType((*KernelVersion)(nil), "px.vizier.services.shared.agent.KernelVersion")
	proto.RegisterType((*HostInfo)(nil), "px.vizier.services.shared.agent.HostInfo")
	proto.RegisterType((*Agent)(nil), "px.vizier.services.shared.agent.Agent")
	proto.RegisterType((*AgentStatus)(nil), "px.vizier.services.shared.agent.AgentStatus")
}

func init() {
	proto.RegisterFile("src/vizier/services/shared/agentpb/agent.proto", fileDescriptor_fef0af3bd5248f34)
}

var fileDescriptor_fef0af3bd5248f34 = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xc6, 0x49, 0x6c, 0x4f, 0xe2, 0xc6, 0x9d, 0x56, 0xd4, 0x84, 0x6a, 0x37, 0x72, 0x41,
	0x2a, 0x05, 0xd6, 0x28, 0x48, 0xd0, 0x0b, 0x20, 0x3b, 0x76, 0xb1, 0xd5, 0xb2, 0xb1, 0x66, 0x9d,
	0x20, 0xb8, 0x8c, 0xc6, 0xbb, 0x93, 0x78, 0xe8, 0x7a, 0x77, 0x34, 0x33, 0xb6, 0xaa, 0x9e, 0x38,
	0x72, 0xe4, 0x2f, 0x70, 0xe3, 0xa7, 0x70, 0xcc, 0xb1, 0x27, 0x8b, 0x6c, 0x38, 0xf4, 0xd8, 0x9f,
	0x80, 0xf6, 0xad, 0xdd, 0xd4, 0x8d, 0x44, 0x72, 0xda, 0xf7, 0xde, 0xf7, 0x7d, 0xef, 0xcd, 0x7c,
	0x6f, 0x64, 0x23, 0x57, 0xab, 0xa0, 0x39, 0x13, 0x2f, 0x05, 0x57, 0x4d, 0xcd, 0xd5, 0x4c, 0x04,
	0x5c, 0x37, 0xf5, 0x98, 0x29, 0x1e, 0x36, 0xd9, 0x29, 0x8f, 0x8d, 0x1c, 0xe5, 0x5f, 0x57, 0xaa,
	0xc4, 0x24, 0xd8, 0x91, 0x2f, 0xdc, 0x9c, 0xee, 0x2e, 0xe9, 0x6e, 0x4e, 0x77, 0x81, 0xb6, 0xfb,
	0xc5, 0xa9, 0x30, 0xe3, 0xe9, 0xc8, 0x0d, 0x92, 0x49, 0xf3, 0x34, 0x39, 0x4d, 0x9a, 0xa0, 0x1b,
	0x4d, 0x4f, 0x20, 0x83, 0x04, 0xa2, 0xbc, 0xdf, 0xae, 0x93, 0xcd, 0x67, 0x52, 0xe4, 0xb4, 0xe6,
	0x74, 0x2a, 0x42, 0x39, 0x82, 0x4f, 0x4e, 0x68, 0x3c, 0x46, 0xb7, 0x5b, 0x59, 0xe3, 0x03, 0x26,
	0xd9, 0x48, 0x44, 0xc2, 0x08, 0xae, 0xf1, 0x03, 0x54, 0x0d, 0x92, 0x28, 0xe2, 0x81, 0xd1, 0x34,
	0x64, 0x86, 0xd5, 0xad, 0x3d, 0xeb, 0x61, 0x99, 0x6c, 0x2f, 0x8b, 0x1d, 0x66, 0x58, 0xe3, 0x77,
	0x0b, 0xed, 0x80, 0x74, 0xc0, 0x14, 0x9b, 0x70, 0xc3, 0x95, 0xc6, 0x53, 0xf4, 0x89, 0x54, 0xc9,
	0x89, 0x88, 0xb8, 0xa2, 0xda, 0xb0, 0xe0, 0x39, 0x35, 0x8a, 0x05, 0x9c, 0x6a, 0x36, 0x91, 0x11,
	0xa7, 0x92, 0x2b, 0x91, 0x84, 0x74, 0xa2, 0xa1, 0xe1, 0x46, 0xfb, 0xe3, 0x74, 0xee, 0xec, 0x0d,
	0x16, 0x02, 0x3f, 0xe3, 0x0f, 0x33, 0xba, 0x0f, 0xec, 0x01, 0x90, 0x7f, 0xf4, 0xc9, 0x9e, 0xfc,
	0x7f, 0x86, 0x6e, 0xfc, 0xbb, 0x86, 0x2a, 0x70, 0x94, 0x7e, 0x7c, 0x92, 0xe0, 0x6f, 0x50, 0x19,
	0xbc, 0xa2, 0x22, 0x84, 0x39, 0x5b, 0xfb, 0x3b, 0xae, 0x7c, 0xe1, 0xe6, 0x77, 0x77, 0x8f, 0x8e,
	0xfa, 0x9d, 0xf6, 0x56, 0x3a, 0x77, 0x4a, 0xb9, 0xa2, 0x43, 0x4a, 0xc0, 0xee, 0x87, 0xf8, 0x09,
	0xaa, 0x8c, 0x13, 0x6d, 0xa8, 0x88, 0x4f, 0x92, 0xfa, 0x1a, 0x28, 0x3f, 0x75, 0xaf, 0x59, 0x88,
	0xdb, 0x4b, 0x34, 0x8c, 0x25, 0xe5, 0xf1, 0x22, 0xc2, 0x9f, 0x23, 0x24, 0x24, 0x65, 0x61, 0xa8,
	0xb8, 0xd6, 0xf5, 0xe2, 0x9e, 0xf5, 0xb0, 0xd2, 0xae, 0xa6, 0x73, 0xa7, 0xd2, 0x1f, 0xb4, 0xf2,
	0x22, 0xa9, 0x08, 0xb9, 0x08, 0xf1, 0x31, 0xda, 0x0e, 0xde, 0x31, 0xbf, 0xbe, 0x0e, 0x83, 0xf7,
	0xaf, 0x1d, 0x7c, 0x65, 0x6d, 0x64, 0xa5, 0x0f, 0x1e, 0x20, 0x24, 0xdf, 0x6e, 0xa6, 0xbe, 0x01,
	0x5d, 0xbf, 0xbc, 0x59, 0xd7, 0xcb, 0x8d, 0x92, 0x77, 0x7a, 0x34, 0x02, 0x54, 0x7d, 0xca, 0x55,
	0xcc, 0xa3, 0x63, 0xae, 0xb4, 0x48, 0x62, 0x5c, 0x47, 0xa5, 0x59, 0x1e, 0x82, 0xd1, 0x55, 0xb2,
	0x4c, 0xf1, 0x47, 0xa8, 0x32, 0x61, 0xbf, 0x26, 0x8a, 0x2a, 0x3e, 0x03, 0x2b, 0xab, 0xa4, 0x0c,
	0x05, 0xc2, 0x67, 0x00, 0x8a, 0x78, 0x01, 0x16, 0x17, 0x60, 0x56, 0x20, 0x7c, 0xd6, 0x78, 0x6d,
	0xa1, 0xf2, 0xd2, 0x53, 0xbc, 0x8b, 0xc0, 0xd5, 0x98, 0x4d, 0x38, 0x4c, 0xa8, 0x90, 0xb7, 0x39,
	0xfe, 0x10, 0x95, 0x65, 0x12, 0x52, 0xc0, 0xd6, 0x00, 0x2b, 0xc9, 0x24, 0xf4, 0x32, 0xe8, 0x01,
	0x2a, 0xe5, 0x8b, 0x94, 0x0b, 0xf7, 0x51, 0x3a, 0x77, 0x36, 0xa1, 0xeb, 0x80, 0x6c, 0xc2, 0x9e,
	0x24, 0x7e, 0x82, 0x36, 0x9f, 0xc3, 0x6d, 0x16, 0x8e, 0xbb, 0xd7, 0x7a, 0xb3, 0x72, 0x79, 0xb2,
	0x50, 0xe3, 0xc7, 0xa8, 0x9e, 0x47, 0x74, 0xcc, 0x59, 0xc8, 0x95, 0xa6, 0x22, 0xd6, 0x86, 0x45,
	0x11, 0x0f, 0xc1, 0xf5, 0x32, 0xf9, 0x20, 0xc7, 0x7b, 0x39, 0xdc, 0x5f, 0xa2, 0x8d, 0xb9, 0x85,
	0x36, 0xc0, 0x6f, 0xfc, 0x1d, 0x5a, 0x87, 0x47, 0x97, 0x3f, 0xd7, 0x47, 0x37, 0xdb, 0x12, 0xbc,
	0x3a, 0xd0, 0xe1, 0xaf, 0xd1, 0xad, 0x40, 0x71, 0x66, 0x38, 0x35, 0x62, 0xc2, 0x69, 0xac, 0xc1,
	0x91, 0x62, 0xbb, 0x96, 0xce, 0x9d, 0xed, 0x03, 0x40, 0x86, 0x62, 0xc2, 0x3d, 0x9f, 0x6c, 0x07,
	0x97, 0x99, 0xc6, 0xdf, 0xa3, 0xdb, 0x11, 0xd3, 0x26, 0x3b, 0xb9, 0x32, 0x23, 0xce, 0x4c, 0x26,
	0x2d, 0x82, 0xf4, 0x4e, 0x3a, 0x77, 0x76, 0x9e, 0x31, 0x6d, 0x7a, 0x4b, 0xcc, 0xf3, 0xc9, 0x4e,
	0xb4, 0x52, 0xd0, 0xf8, 0x3e, 0x5a, 0x67, 0x5a, 0x84, 0x60, 0x61, 0xb5, 0x5d, 0x4e, 0xe7, 0xce,
	0x7a, 0xcb, 0xef, 0x77, 0x08, 0x54, 0x1b, 0x7f, 0x5a, 0x68, 0x0b, 0x8e, 0xea, 0x1b, 0x66, 0xa6,
	0x1a, 0x1f, 0xa2, 0x7b, 0xb1, 0xa6, 0x5a, 0xc4, 0x01, 0xa7, 0xab, 0x73, 0xe1, 0xe6, 0xc5, 0x76,
	0x3d, 0x9d, 0x3b, 0x77, 0x3d, 0xdf, 0xcf, 0x18, 0x2b, 0xb3, 0xc9, 0xdd, 0x58, 0x5f, 0xad, 0xe2,
	0x16, 0xda, 0xd0, 0x86, 0x99, 0xfc, 0x01, 0xdc, 0xda, 0xff, 0xec, 0x66, 0xc6, 0x65, 0xa7, 0xe1,
	0x24, 0x57, 0x3e, 0x7a, 0x89, 0xd0, 0x65, 0x11, 0xdf, 0x43, 0x77, 0x5a, 0x3f, 0x74, 0xbd, 0x21,
	0xf5, 0x87, 0xad, 0x61, 0x97, 0x1e, 0x79, 0x4f, 0xbd, 0xc3, 0x9f, 0xbc, 0x5a, 0xe1, 0x7d, 0xa0,
	0xd7, 0x6d, 0x3d, 0x1b, 0xf6, 0x7e, 0xae, 0x59, 0xf8, 0x3e, 0xaa, 0xaf, 0x2a, 0x48, 0xd7, 0x1f,
	0x1c, 0x7a, 0x7e, 0xff, 0xb8, 0x5b, 0x5b, 0x7b, 0x1f, 0xed, 0xf4, 0xfd, 0x83, 0x43, 0xcf, 0xeb,
	0x1e, 0x0c, 0xbb, 0x9d, 0x5a, 0xb1, 0xfd, 0xed, 0xd9, 0xb9, 0x5d, 0x78, 0x75, 0x6e, 0x17, 0xde,
	0x9c, 0xdb, 0xd6, 0x6f, 0xa9, 0x6d, 0xfd, 0x95, 0xda, 0xd6, 0xdf, 0xa9, 0x6d, 0x9d, 0xa5, 0xb6,
	0xf5, 0x4f, 0x6a, 0x5b, 0xaf, 0x53, 0xbb, 0xf0, 0x26, 0xb5, 0xad, 0x3f, 0x2e, 0xec, 0xc2, 0xd9,
	0x85, 0x5d, 0x78, 0x75, 0x61, 0x17, 0x7e, 0x29, 0x2d, 0xfe, 0x38, 0x46, 0x9b, 0xf0, 0x13, 0xfe,
	0xd5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xa6, 0x4a, 0x57, 0x65, 0x06, 0x00, 0x00,
}

func (x AgentState) String() string {
	s, ok := AgentState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AgentCapabilities) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentCapabilities)
	if !ok {
		that2, ok := that.(AgentCapabilities)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CollectsData != that1.CollectsData {
		return false
	}
	return true
}
func (this *AgentParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentParameters)
	if !ok {
		that2, ok := that.(AgentParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProfilerStackTraceSamplePeriodMS != that1.ProfilerStackTraceSamplePeriodMS {
		return false
	}
	return true
}
func (this *AgentInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfo)
	if !ok {
		that2, ok := that.(AgentInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.HostInfo.Equal(that1.HostInfo) {
		return false
	}
	if this.IPAddress != that1.IPAddress {
		return false
	}
	if !this.Capabilities.Equal(that1.Capabilities) {
		return false
	}
	if !this.Parameters.Equal(that1.Parameters) {
		return false
	}
	return true
}
func (this *KernelVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KernelVersion)
	if !ok {
		that2, ok := that.(KernelVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.MajorRev != that1.MajorRev {
		return false
	}
	if this.MinorRev != that1.MinorRev {
		return false
	}
	return true
}
func (this *HostInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostInfo)
	if !ok {
		that2, ok := that.(HostInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.PodName != that1.PodName {
		return false
	}
	if this.HostIP != that1.HostIP {
		return false
	}
	if !this.Kernel.Equal(that1.Kernel) {
		return false
	}
	if this.KernelHeadersInstalled != that1.KernelHeadersInstalled {
		return false
	}
	return true
}
func (this *Agent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Agent)
	if !ok {
		that2, ok := that.(Agent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.CreateTimeNS != that1.CreateTimeNS {
		return false
	}
	if this.LastHeartbeatNS != that1.LastHeartbeatNS {
		return false
	}
	if this.ASID != that1.ASID {
		return false
	}
	return true
}
func (this *AgentStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentStatus)
	if !ok {
		that2, ok := that.(AgentStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NSSinceLastHeartbeat != that1.NSSinceLastHeartbeat {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *AgentCapabilities) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&agentpb.AgentCapabilities{")
	s = append(s, "CollectsData: "+fmt.Sprintf("%#v", this.CollectsData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&agentpb.AgentParameters{")
	s = append(s, "ProfilerStackTraceSamplePeriodMS: "+fmt.Sprintf("%#v", this.ProfilerStackTraceSamplePeriodMS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&agentpb.AgentInfo{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.HostInfo != nil {
		s = append(s, "HostInfo: "+fmt.Sprintf("%#v", this.HostInfo)+",\n")
	}
	s = append(s, "IPAddress: "+fmt.Sprintf("%#v", this.IPAddress)+",\n")
	if this.Capabilities != nil {
		s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	}
	if this.Parameters != nil {
		s = append(s, "Parameters: "+fmt.Sprintf("%#v", this.Parameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KernelVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&agentpb.KernelVersion{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "MajorRev: "+fmt.Sprintf("%#v", this.MajorRev)+",\n")
	s = append(s, "MinorRev: "+fmt.Sprintf("%#v", this.MinorRev)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&agentpb.HostInfo{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "PodName: "+fmt.Sprintf("%#v", this.PodName)+",\n")
	s = append(s, "HostIP: "+fmt.Sprintf("%#v", this.HostIP)+",\n")
	if this.Kernel != nil {
		s = append(s, "Kernel: "+fmt.Sprintf("%#v", this.Kernel)+",\n")
	}
	s = append(s, "KernelHeadersInstalled: "+fmt.Sprintf("%#v", this.KernelHeadersInstalled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Agent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&agentpb.Agent{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "CreateTimeNS: "+fmt.Sprintf("%#v", this.CreateTimeNS)+",\n")
	s = append(s, "LastHeartbeatNS: "+fmt.Sprintf("%#v", this.LastHeartbeatNS)+",\n")
	s = append(s, "ASID: "+fmt.Sprintf("%#v", this.ASID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&agentpb.AgentStatus{")
	s = append(s, "NSSinceLastHeartbeat: "+fmt.Sprintf("%#v", this.NSSinceLastHeartbeat)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAgent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AgentCapabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentCapabilities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentCapabilities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectsData {
		i--
		if m.CollectsData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AgentParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProfilerStackTraceSamplePeriodMS != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ProfilerStackTraceSamplePeriodMS))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AgentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Capabilities != nil {
		{
			size, err := m.Capabilities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.IPAddress) > 0 {
		i -= len(m.IPAddress)
		copy(dAtA[i:], m.IPAddress)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.IPAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HostInfo != nil {
		{
			size, err := m.HostInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KernelVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KernelVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KernelVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinorRev != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MinorRev))
		i--
		dAtA[i] = 0x18
	}
	if m.MajorRev != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MajorRev))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HostInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KernelHeadersInstalled {
		i--
		if m.KernelHeadersInstalled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Kernel != nil {
		{
			size, err := m.Kernel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.HostIP) > 0 {
		i -= len(m.HostIP)
		copy(dAtA[i:], m.HostIP)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.HostIP)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Agent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Agent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ASID != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ASID))
		i--
		dAtA[i] = 0x20
	}
	if m.LastHeartbeatNS != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.LastHeartbeatNS))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateTimeNS != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CreateTimeNS))
		i--
		dAtA[i] = 0x10
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.NSSinceLastHeartbeat != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NSSinceLastHeartbeat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgent(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AgentCapabilities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectsData {
		n += 2
	}
	return n
}

func (m *AgentParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProfilerStackTraceSamplePeriodMS != 0 {
		n += 1 + sovAgent(uint64(m.ProfilerStackTraceSamplePeriodMS))
	}
	return n
}

func (m *AgentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.HostInfo != nil {
		l = m.HostInfo.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Capabilities != nil {
		l = m.Capabilities.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	return n
}

func (m *KernelVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovAgent(uint64(m.Version))
	}
	if m.MajorRev != 0 {
		n += 1 + sovAgent(uint64(m.MajorRev))
	}
	if m.MinorRev != 0 {
		n += 1 + sovAgent(uint64(m.MinorRev))
	}
	return n
}

func (m *HostInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.HostIP)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Kernel != nil {
		l = m.Kernel.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.KernelHeadersInstalled {
		n += 2
	}
	return n
}

func (m *Agent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CreateTimeNS != 0 {
		n += 1 + sovAgent(uint64(m.CreateTimeNS))
	}
	if m.LastHeartbeatNS != 0 {
		n += 1 + sovAgent(uint64(m.LastHeartbeatNS))
	}
	if m.ASID != 0 {
		n += 1 + sovAgent(uint64(m.ASID))
	}
	return n
}

func (m *AgentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NSSinceLastHeartbeat != 0 {
		n += 1 + sovAgent(uint64(m.NSSinceLastHeartbeat))
	}
	if m.State != 0 {
		n += 1 + sovAgent(uint64(m.State))
	}
	return n
}

func sovAgent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgent(x uint64) (n int) {
	return sovAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AgentCapabilities) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentCapabilities{`,
		`CollectsData:` + fmt.Sprintf("%v", this.CollectsData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentParameters{`,
		`ProfilerStackTraceSamplePeriodMS:` + fmt.Sprintf("%v", this.ProfilerStackTraceSamplePeriodMS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfo{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "uuidpb.UUID", 1) + `,`,
		`HostInfo:` + strings.Replace(this.HostInfo.String(), "HostInfo", "HostInfo", 1) + `,`,
		`IPAddress:` + fmt.Sprintf("%v", this.IPAddress) + `,`,
		`Capabilities:` + strings.Replace(this.Capabilities.String(), "AgentCapabilities", "AgentCapabilities", 1) + `,`,
		`Parameters:` + strings.Replace(this.Parameters.String(), "AgentParameters", "AgentParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KernelVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KernelVersion{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`MajorRev:` + fmt.Sprintf("%v", this.MajorRev) + `,`,
		`MinorRev:` + fmt.Sprintf("%v", this.MinorRev) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostInfo{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`HostIP:` + fmt.Sprintf("%v", this.HostIP) + `,`,
		`Kernel:` + strings.Replace(this.Kernel.String(), "KernelVersion", "KernelVersion", 1) + `,`,
		`KernelHeadersInstalled:` + fmt.Sprintf("%v", this.KernelHeadersInstalled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Agent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Agent{`,
		`Info:` + strings.Replace(this.Info.String(), "AgentInfo", "AgentInfo", 1) + `,`,
		`CreateTimeNS:` + fmt.Sprintf("%v", this.CreateTimeNS) + `,`,
		`LastHeartbeatNS:` + fmt.Sprintf("%v", this.LastHeartbeatNS) + `,`,
		`ASID:` + fmt.Sprintf("%v", this.ASID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentStatus{`,
		`NSSinceLastHeartbeat:` + fmt.Sprintf("%v", this.NSSinceLastHeartbeat) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAgent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AgentCapabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentCapabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentCapabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectsData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectsData = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilerStackTraceSamplePeriodMS", wireType)
			}
			m.ProfilerStackTraceSamplePeriodMS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfilerStackTraceSamplePeriodMS |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &uuidpb.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostInfo == nil {
				m.HostInfo = &HostInfo{}
			}
			if err := m.HostInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capabilities == nil {
				m.Capabilities = &AgentCapabilities{}
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &AgentParameters{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KernelVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KernelVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KernelVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorRev", wireType)
			}
			m.MajorRev = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorRev |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorRev", wireType)
			}
			m.MinorRev = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorRev |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kernel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kernel == nil {
				m.Kernel = &KernelVersion{}
			}
			if err := m.Kernel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelHeadersInstalled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KernelHeadersInstalled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AgentInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimeNS", wireType)
			}
			m.CreateTimeNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimeNS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatNS", wireType)
			}
			m.LastHeartbeatNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatNS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASID", wireType)
			}
			m.ASID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ASID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSSinceLastHeartbeat", wireType)
			}
			m.NSSinceLastHeartbeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NSSinceLastHeartbeat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AgentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgent = fmt.Errorf("proto: unexpected end of group")
)
