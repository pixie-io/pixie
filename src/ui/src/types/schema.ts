/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  noop: boolean;
  artifacts: GQLArtifactsInfo;
  user: GQLUserInfo;
  org: GQLOrgInfo;
  userSettings: GQLUserSettings;
  userAttributes: GQLUserAttributes;
  orgUsers: Array<GQLUserInfo>;
  cluster: GQLClusterInfo;
  clusterByName: GQLClusterInfo;
  clusters: Array<GQLClusterInfo>;
  clusterConnection: GQLClusterConnectionInfo;
  cliArtifact: GQLCLIArtifact;
  autocomplete: GQLAutocompleteResult;
  autocompleteField?: Array<GQLAutocompleteSuggestion | null>;
  liveViews: Array<GQLLiveViewMetadata>;
  liveViewContents: GQLLiveViewContents;
  scripts: Array<GQLScriptMetadata>;
  scriptContents: GQLScriptContents;
  deploymentKeys: Array<GQLDeploymentKeyMetadata>;
  deploymentKey: GQLDeploymentKey;
  apiKeys: Array<GQLAPIKeyMetadata>;
  apiKey: GQLAPIKey;
}

export interface GQLMutation {
  noop: boolean;
  
  /**
   * 
   * @deprecated Clusters are now created via px deploy
   */
  CreateCluster?: GQLClusterInfo;
  UpdateVizierConfig: GQLClusterInfo;
  CreateDeploymentKey: GQLDeploymentKey;
  DeleteDeploymentKey: boolean;
  CreateAPIKey: GQLAPIKey;
  DeleteAPIKey: boolean;
  UpdateUserSettings: GQLUserSettings;
  SetUserAttributes: GQLUserAttributes;
  InviteUser: GQLUserInvite;
  UpdateUserPermissions: GQLUserInfo;
  UpdateOrgSettings: GQLOrgInfo;
}

export interface GQLArtifactsInfo {
  items: Array<GQLArtifact>;
}

export interface GQLArtifact {
  version: string;
  changelog: string;
  timestampMs: number;
}

export interface GQLUserInfo {
  id: string;
  name: string;
  email: string;
  picture: string;
  orgName: string;
  orgID: string;
  isApproved: boolean;
}

export interface GQLIDEPath {
  IDEName: string;
  path: string;
}

export interface GQLOrgInfo {
  id: string;
  name: string;
  enableApprovals: boolean;
  idePaths: Array<GQLIDEPath>;
}

export interface GQLUserSettings {
  analyticsOptout: boolean;
  id: string;
}

export interface GQLUserAttributes {
  tourSeen: boolean;
  id: string;
}

export interface GQLEditableUserAttributes {
  tourSeen?: boolean;
}

export interface GQLEditableUserSettings {
  analyticsOptout?: boolean;
}

export interface GQLAPIKeyMetadata {
  id: string;
  createdAtMs: number;
  desc: string;
}

export interface GQLAPIKey {
  id: string;
  key: string;
  createdAtMs: number;
  desc: string;
}

export interface GQLDeploymentKeyMetadata {
  id: string;
  createdAtMs: number;
  desc: string;
}

export interface GQLDeploymentKey {
  id: string;
  key: string;
  createdAtMs: number;
  desc: string;
}

export enum GQLAutocompleteEntityState {
  AES_UNKNOWN = 'AES_UNKNOWN',
  AES_PENDING = 'AES_PENDING',
  AES_RUNNING = 'AES_RUNNING',
  AES_FAILED = 'AES_FAILED',
  AES_TERMINATED = 'AES_TERMINATED'
}

export enum GQLAutocompleteActionType {
  AAT_UNKNOWN = 'AAT_UNKNOWN',
  AAT_EDIT = 'AAT_EDIT',
  AAT_SELECT = 'AAT_SELECT'
}

export enum GQLAutocompleteEntityKind {
  AEK_UNKNOWN = 'AEK_UNKNOWN',
  AEK_POD = 'AEK_POD',
  AEK_SVC = 'AEK_SVC',
  AEK_SCRIPT = 'AEK_SCRIPT',
  AEK_NAMESPACE = 'AEK_NAMESPACE'
}

export interface GQLAutocompleteSuggestion {
  kind?: GQLAutocompleteEntityKind;
  name?: string;
  description?: string;
  matchedIndexes?: Array<number | null>;
  state?: GQLAutocompleteEntityState;
}

export interface GQLTabSuggestion {
  tabIndex?: number;
  executableAfterSelect?: boolean;
  suggestions?: Array<GQLAutocompleteSuggestion | null>;
}

export interface GQLAutocompleteResult {
  formattedInput?: string;
  isExecutable?: boolean;
  tabSuggestions?: Array<GQLTabSuggestion | null>;
}

export interface GQLContainerStatus {
  name: string;
  createdAtMs: number;
  state: string;
  message: string;
  reason: string;
  restartCount: number;
}

export interface GQLK8sEvent {
  message: string;
  firstTimeMs: number;
  lastTimeMs: number;
}

export interface GQLPodStatus {
  name: string;
  createdAtMs: number;
  status: string;
  message: string;
  reason: string;
  containers: Array<GQLContainerStatus>;
  events: Array<GQLK8sEvent>;
  restartCount: number;
}

export enum GQLClusterStatus {
  CS_UNKNOWN = 'CS_UNKNOWN',
  CS_HEALTHY = 'CS_HEALTHY',
  CS_UNHEALTHY = 'CS_UNHEALTHY',
  CS_DISCONNECTED = 'CS_DISCONNECTED',
  CS_UPDATING = 'CS_UPDATING',
  CS_CONNECTED = 'CS_CONNECTED',
  CS_UPDATE_FAILED = 'CS_UPDATE_FAILED'
}

export interface GQLVizierConfig {
  passthroughEnabled: boolean;
}

export interface GQLClusterInfo {
  id: string;
  status: GQLClusterStatus;
  lastHeartbeatMs: number;
  vizierConfig: GQLVizierConfig;
  vizierVersion: string;
  clusterVersion: string;
  clusterName: string;
  prettyClusterName: string;
  clusterUID: string;
  controlPlanePodStatuses: Array<GQLPodStatus>;
  unhealthyDataPlanePodStatuses: Array<GQLPodStatus>;
  numNodes: number;
  numInstrumentedNodes: number;
  statusMessage: string;
  previousStatus?: GQLClusterStatus;
  previousStatusTimeMs?: number;
}

export interface GQLClusterConnectionInfo {
  ipAddress: string;
  token: string;
}

export interface GQLUserInvite {
  email: string;
  inviteLink: string;
}

export interface GQLLiveViewMetadata {
  id: string;
  name: string;
  desc: string;
}

export interface GQLLiveViewContents {
  metadata: GQLLiveViewMetadata;
  pxlContents: string;
  visJSON: string;
}

export interface GQLScriptMetadata {
  id: string;
  name: string;
  desc: string;
  hasLiveView: boolean;
}

export interface GQLScriptContents {
  metadata: GQLScriptMetadata;
  contents: string;
}

export enum GQLArtifactType {
  AT_UNKNOWN = 'AT_UNKNOWN',
  AT_LINUX_AMD64 = 'AT_LINUX_AMD64',
  AT_DARWIN_AMD64 = 'AT_DARWIN_AMD64',
  AT_CONTAINER_SET_YAMLS = 'AT_CONTAINER_SET_YAMLS',
  AT_CONTAINER_SET_LINUX_AMD64 = 'AT_CONTAINER_SET_LINUX_AMD64',
  AT_CONTAINER_SET_TEMPLATE_YAMLS = 'AT_CONTAINER_SET_TEMPLATE_YAMLS'
}

export interface GQLCLIArtifact {
  url: string;
  sha256: string;
}

export interface GQLEditableVizierConfig {
  passthroughEnabled?: boolean;
}

export interface GQLEditableUserPermissions {
  isApproved?: boolean;
}

export interface GQLEditableOrgSettings {
  enableApprovals?: boolean;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  ArtifactsInfo?: GQLArtifactsInfoTypeResolver;
  Artifact?: GQLArtifactTypeResolver;
  UserInfo?: GQLUserInfoTypeResolver;
  IDEPath?: GQLIDEPathTypeResolver;
  OrgInfo?: GQLOrgInfoTypeResolver;
  UserSettings?: GQLUserSettingsTypeResolver;
  UserAttributes?: GQLUserAttributesTypeResolver;
  APIKeyMetadata?: GQLAPIKeyMetadataTypeResolver;
  APIKey?: GQLAPIKeyTypeResolver;
  DeploymentKeyMetadata?: GQLDeploymentKeyMetadataTypeResolver;
  DeploymentKey?: GQLDeploymentKeyTypeResolver;
  AutocompleteSuggestion?: GQLAutocompleteSuggestionTypeResolver;
  TabSuggestion?: GQLTabSuggestionTypeResolver;
  AutocompleteResult?: GQLAutocompleteResultTypeResolver;
  ContainerStatus?: GQLContainerStatusTypeResolver;
  K8sEvent?: GQLK8sEventTypeResolver;
  PodStatus?: GQLPodStatusTypeResolver;
  VizierConfig?: GQLVizierConfigTypeResolver;
  ClusterInfo?: GQLClusterInfoTypeResolver;
  ClusterConnectionInfo?: GQLClusterConnectionInfoTypeResolver;
  UserInvite?: GQLUserInviteTypeResolver;
  LiveViewMetadata?: GQLLiveViewMetadataTypeResolver;
  LiveViewContents?: GQLLiveViewContentsTypeResolver;
  ScriptMetadata?: GQLScriptMetadataTypeResolver;
  ScriptContents?: GQLScriptContentsTypeResolver;
  CLIArtifact?: GQLCLIArtifactTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  noop?: QueryToNoopResolver<TParent>;
  artifacts?: QueryToArtifactsResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  org?: QueryToOrgResolver<TParent>;
  userSettings?: QueryToUserSettingsResolver<TParent>;
  userAttributes?: QueryToUserAttributesResolver<TParent>;
  orgUsers?: QueryToOrgUsersResolver<TParent>;
  cluster?: QueryToClusterResolver<TParent>;
  clusterByName?: QueryToClusterByNameResolver<TParent>;
  clusters?: QueryToClustersResolver<TParent>;
  clusterConnection?: QueryToClusterConnectionResolver<TParent>;
  cliArtifact?: QueryToCliArtifactResolver<TParent>;
  autocomplete?: QueryToAutocompleteResolver<TParent>;
  autocompleteField?: QueryToAutocompleteFieldResolver<TParent>;
  liveViews?: QueryToLiveViewsResolver<TParent>;
  liveViewContents?: QueryToLiveViewContentsResolver<TParent>;
  scripts?: QueryToScriptsResolver<TParent>;
  scriptContents?: QueryToScriptContentsResolver<TParent>;
  deploymentKeys?: QueryToDeploymentKeysResolver<TParent>;
  deploymentKey?: QueryToDeploymentKeyResolver<TParent>;
  apiKeys?: QueryToApiKeysResolver<TParent>;
  apiKey?: QueryToApiKeyResolver<TParent>;
}

export interface QueryToNoopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToArtifactsArgs {
  artifactName: string;
}
export interface QueryToArtifactsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToArtifactsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrgResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrgUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToClusterArgs {
  id: string;
}
export interface QueryToClusterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToClusterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToClusterByNameArgs {
  name: string;
}
export interface QueryToClusterByNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToClusterByNameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToClustersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToClusterConnectionArgs {
  id: string;
}
export interface QueryToClusterConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToClusterConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCliArtifactArgs {
  artifactType: GQLArtifactType;
}
export interface QueryToCliArtifactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCliArtifactArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAutocompleteArgs {
  input?: string;
  cursorPos?: number;
  action?: GQLAutocompleteActionType;
  clusterUID?: string;
}
export interface QueryToAutocompleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAutocompleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAutocompleteFieldArgs {
  input?: string;
  fieldType?: GQLAutocompleteEntityKind;
  requiredArgTypes?: Array<GQLAutocompleteEntityKind | null>;
  clusterUID?: string;
}
export interface QueryToAutocompleteFieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAutocompleteFieldArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLiveViewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLiveViewContentsArgs {
  id: string;
}
export interface QueryToLiveViewContentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToLiveViewContentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToScriptsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToScriptContentsArgs {
  id: string;
}
export interface QueryToScriptContentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToScriptContentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToDeploymentKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToDeploymentKeyArgs {
  id: string;
}
export interface QueryToDeploymentKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToDeploymentKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToApiKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToApiKeyArgs {
  id: string;
}
export interface QueryToApiKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToApiKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  noop?: MutationToNoopResolver<TParent>;
  CreateCluster?: MutationToCreateClusterResolver<TParent>;
  UpdateVizierConfig?: MutationToUpdateVizierConfigResolver<TParent>;
  CreateDeploymentKey?: MutationToCreateDeploymentKeyResolver<TParent>;
  DeleteDeploymentKey?: MutationToDeleteDeploymentKeyResolver<TParent>;
  CreateAPIKey?: MutationToCreateAPIKeyResolver<TParent>;
  DeleteAPIKey?: MutationToDeleteAPIKeyResolver<TParent>;
  UpdateUserSettings?: MutationToUpdateUserSettingsResolver<TParent>;
  SetUserAttributes?: MutationToSetUserAttributesResolver<TParent>;
  InviteUser?: MutationToInviteUserResolver<TParent>;
  UpdateUserPermissions?: MutationToUpdateUserPermissionsResolver<TParent>;
  UpdateOrgSettings?: MutationToUpdateOrgSettingsResolver<TParent>;
}

export interface MutationToNoopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateClusterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateVizierConfigArgs {
  clusterID: string;
  vizierConfig: GQLEditableVizierConfig;
}
export interface MutationToUpdateVizierConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateVizierConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateDeploymentKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteDeploymentKeyArgs {
  id: string;
}
export interface MutationToDeleteDeploymentKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteDeploymentKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateAPIKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteAPIKeyArgs {
  id: string;
}
export interface MutationToDeleteAPIKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteAPIKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserSettingsArgs {
  settings: GQLEditableUserSettings;
}
export interface MutationToUpdateUserSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserSettingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetUserAttributesArgs {
  attributes: GQLEditableUserAttributes;
}
export interface MutationToSetUserAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetUserAttributesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToInviteUserArgs {
  email: string;
  firstName: string;
  lastName: string;
}
export interface MutationToInviteUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToInviteUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserPermissionsArgs {
  userID: string;
  userPermissions: GQLEditableUserPermissions;
}
export interface MutationToUpdateUserPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserPermissionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateOrgSettingsArgs {
  orgID: string;
  orgSettings: GQLEditableOrgSettings;
}
export interface MutationToUpdateOrgSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateOrgSettingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArtifactsInfoTypeResolver<TParent = any> {
  items?: ArtifactsInfoToItemsResolver<TParent>;
}

export interface ArtifactsInfoToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArtifactTypeResolver<TParent = any> {
  version?: ArtifactToVersionResolver<TParent>;
  changelog?: ArtifactToChangelogResolver<TParent>;
  timestampMs?: ArtifactToTimestampMsResolver<TParent>;
}

export interface ArtifactToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArtifactToChangelogResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArtifactToTimestampMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserInfoTypeResolver<TParent = any> {
  id?: UserInfoToIdResolver<TParent>;
  name?: UserInfoToNameResolver<TParent>;
  email?: UserInfoToEmailResolver<TParent>;
  picture?: UserInfoToPictureResolver<TParent>;
  orgName?: UserInfoToOrgNameResolver<TParent>;
  orgID?: UserInfoToOrgIDResolver<TParent>;
  isApproved?: UserInfoToIsApprovedResolver<TParent>;
}

export interface UserInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToPictureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToOrgNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToOrgIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToIsApprovedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIDEPathTypeResolver<TParent = any> {
  IDEName?: IDEPathToIDENameResolver<TParent>;
  path?: IDEPathToPathResolver<TParent>;
}

export interface IDEPathToIDENameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDEPathToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgInfoTypeResolver<TParent = any> {
  id?: OrgInfoToIdResolver<TParent>;
  name?: OrgInfoToNameResolver<TParent>;
  enableApprovals?: OrgInfoToEnableApprovalsResolver<TParent>;
  idePaths?: OrgInfoToIdePathsResolver<TParent>;
}

export interface OrgInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInfoToEnableApprovalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInfoToIdePathsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserSettingsTypeResolver<TParent = any> {
  analyticsOptout?: UserSettingsToAnalyticsOptoutResolver<TParent>;
  id?: UserSettingsToIdResolver<TParent>;
}

export interface UserSettingsToAnalyticsOptoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserSettingsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserAttributesTypeResolver<TParent = any> {
  tourSeen?: UserAttributesToTourSeenResolver<TParent>;
  id?: UserAttributesToIdResolver<TParent>;
}

export interface UserAttributesToTourSeenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserAttributesToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAPIKeyMetadataTypeResolver<TParent = any> {
  id?: APIKeyMetadataToIdResolver<TParent>;
  createdAtMs?: APIKeyMetadataToCreatedAtMsResolver<TParent>;
  desc?: APIKeyMetadataToDescResolver<TParent>;
}

export interface APIKeyMetadataToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface APIKeyMetadataToCreatedAtMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface APIKeyMetadataToDescResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAPIKeyTypeResolver<TParent = any> {
  id?: APIKeyToIdResolver<TParent>;
  key?: APIKeyToKeyResolver<TParent>;
  createdAtMs?: APIKeyToCreatedAtMsResolver<TParent>;
  desc?: APIKeyToDescResolver<TParent>;
}

export interface APIKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface APIKeyToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface APIKeyToCreatedAtMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface APIKeyToDescResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentKeyMetadataTypeResolver<TParent = any> {
  id?: DeploymentKeyMetadataToIdResolver<TParent>;
  createdAtMs?: DeploymentKeyMetadataToCreatedAtMsResolver<TParent>;
  desc?: DeploymentKeyMetadataToDescResolver<TParent>;
}

export interface DeploymentKeyMetadataToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentKeyMetadataToCreatedAtMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentKeyMetadataToDescResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentKeyTypeResolver<TParent = any> {
  id?: DeploymentKeyToIdResolver<TParent>;
  key?: DeploymentKeyToKeyResolver<TParent>;
  createdAtMs?: DeploymentKeyToCreatedAtMsResolver<TParent>;
  desc?: DeploymentKeyToDescResolver<TParent>;
}

export interface DeploymentKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentKeyToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentKeyToCreatedAtMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentKeyToDescResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAutocompleteSuggestionTypeResolver<TParent = any> {
  kind?: AutocompleteSuggestionToKindResolver<TParent>;
  name?: AutocompleteSuggestionToNameResolver<TParent>;
  description?: AutocompleteSuggestionToDescriptionResolver<TParent>;
  matchedIndexes?: AutocompleteSuggestionToMatchedIndexesResolver<TParent>;
  state?: AutocompleteSuggestionToStateResolver<TParent>;
}

export interface AutocompleteSuggestionToKindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteSuggestionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteSuggestionToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteSuggestionToMatchedIndexesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteSuggestionToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTabSuggestionTypeResolver<TParent = any> {
  tabIndex?: TabSuggestionToTabIndexResolver<TParent>;
  executableAfterSelect?: TabSuggestionToExecutableAfterSelectResolver<TParent>;
  suggestions?: TabSuggestionToSuggestionsResolver<TParent>;
}

export interface TabSuggestionToTabIndexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TabSuggestionToExecutableAfterSelectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TabSuggestionToSuggestionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAutocompleteResultTypeResolver<TParent = any> {
  formattedInput?: AutocompleteResultToFormattedInputResolver<TParent>;
  isExecutable?: AutocompleteResultToIsExecutableResolver<TParent>;
  tabSuggestions?: AutocompleteResultToTabSuggestionsResolver<TParent>;
}

export interface AutocompleteResultToFormattedInputResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteResultToIsExecutableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteResultToTabSuggestionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContainerStatusTypeResolver<TParent = any> {
  name?: ContainerStatusToNameResolver<TParent>;
  createdAtMs?: ContainerStatusToCreatedAtMsResolver<TParent>;
  state?: ContainerStatusToStateResolver<TParent>;
  message?: ContainerStatusToMessageResolver<TParent>;
  reason?: ContainerStatusToReasonResolver<TParent>;
  restartCount?: ContainerStatusToRestartCountResolver<TParent>;
}

export interface ContainerStatusToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContainerStatusToCreatedAtMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContainerStatusToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContainerStatusToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContainerStatusToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContainerStatusToRestartCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLK8sEventTypeResolver<TParent = any> {
  message?: K8sEventToMessageResolver<TParent>;
  firstTimeMs?: K8sEventToFirstTimeMsResolver<TParent>;
  lastTimeMs?: K8sEventToLastTimeMsResolver<TParent>;
}

export interface K8sEventToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface K8sEventToFirstTimeMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface K8sEventToLastTimeMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPodStatusTypeResolver<TParent = any> {
  name?: PodStatusToNameResolver<TParent>;
  createdAtMs?: PodStatusToCreatedAtMsResolver<TParent>;
  status?: PodStatusToStatusResolver<TParent>;
  message?: PodStatusToMessageResolver<TParent>;
  reason?: PodStatusToReasonResolver<TParent>;
  containers?: PodStatusToContainersResolver<TParent>;
  events?: PodStatusToEventsResolver<TParent>;
  restartCount?: PodStatusToRestartCountResolver<TParent>;
}

export interface PodStatusToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PodStatusToCreatedAtMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PodStatusToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PodStatusToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PodStatusToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PodStatusToContainersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PodStatusToEventsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PodStatusToRestartCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVizierConfigTypeResolver<TParent = any> {
  passthroughEnabled?: VizierConfigToPassthroughEnabledResolver<TParent>;
}

export interface VizierConfigToPassthroughEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClusterInfoTypeResolver<TParent = any> {
  id?: ClusterInfoToIdResolver<TParent>;
  status?: ClusterInfoToStatusResolver<TParent>;
  lastHeartbeatMs?: ClusterInfoToLastHeartbeatMsResolver<TParent>;
  vizierConfig?: ClusterInfoToVizierConfigResolver<TParent>;
  vizierVersion?: ClusterInfoToVizierVersionResolver<TParent>;
  clusterVersion?: ClusterInfoToClusterVersionResolver<TParent>;
  clusterName?: ClusterInfoToClusterNameResolver<TParent>;
  prettyClusterName?: ClusterInfoToPrettyClusterNameResolver<TParent>;
  clusterUID?: ClusterInfoToClusterUIDResolver<TParent>;
  controlPlanePodStatuses?: ClusterInfoToControlPlanePodStatusesResolver<TParent>;
  unhealthyDataPlanePodStatuses?: ClusterInfoToUnhealthyDataPlanePodStatusesResolver<TParent>;
  numNodes?: ClusterInfoToNumNodesResolver<TParent>;
  numInstrumentedNodes?: ClusterInfoToNumInstrumentedNodesResolver<TParent>;
  statusMessage?: ClusterInfoToStatusMessageResolver<TParent>;
  previousStatus?: ClusterInfoToPreviousStatusResolver<TParent>;
  previousStatusTimeMs?: ClusterInfoToPreviousStatusTimeMsResolver<TParent>;
}

export interface ClusterInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToLastHeartbeatMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToVizierConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToVizierVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToClusterVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToClusterNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToPrettyClusterNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToClusterUIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToControlPlanePodStatusesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToUnhealthyDataPlanePodStatusesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToNumNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToNumInstrumentedNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToStatusMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToPreviousStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToPreviousStatusTimeMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClusterConnectionInfoTypeResolver<TParent = any> {
  ipAddress?: ClusterConnectionInfoToIpAddressResolver<TParent>;
  token?: ClusterConnectionInfoToTokenResolver<TParent>;
}

export interface ClusterConnectionInfoToIpAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterConnectionInfoToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserInviteTypeResolver<TParent = any> {
  email?: UserInviteToEmailResolver<TParent>;
  inviteLink?: UserInviteToInviteLinkResolver<TParent>;
}

export interface UserInviteToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInviteToInviteLinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLiveViewMetadataTypeResolver<TParent = any> {
  id?: LiveViewMetadataToIdResolver<TParent>;
  name?: LiveViewMetadataToNameResolver<TParent>;
  desc?: LiveViewMetadataToDescResolver<TParent>;
}

export interface LiveViewMetadataToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LiveViewMetadataToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LiveViewMetadataToDescResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLiveViewContentsTypeResolver<TParent = any> {
  metadata?: LiveViewContentsToMetadataResolver<TParent>;
  pxlContents?: LiveViewContentsToPxlContentsResolver<TParent>;
  visJSON?: LiveViewContentsToVisJSONResolver<TParent>;
}

export interface LiveViewContentsToMetadataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LiveViewContentsToPxlContentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LiveViewContentsToVisJSONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLScriptMetadataTypeResolver<TParent = any> {
  id?: ScriptMetadataToIdResolver<TParent>;
  name?: ScriptMetadataToNameResolver<TParent>;
  desc?: ScriptMetadataToDescResolver<TParent>;
  hasLiveView?: ScriptMetadataToHasLiveViewResolver<TParent>;
}

export interface ScriptMetadataToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScriptMetadataToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScriptMetadataToDescResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScriptMetadataToHasLiveViewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLScriptContentsTypeResolver<TParent = any> {
  metadata?: ScriptContentsToMetadataResolver<TParent>;
  contents?: ScriptContentsToContentsResolver<TParent>;
}

export interface ScriptContentsToMetadataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScriptContentsToContentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCLIArtifactTypeResolver<TParent = any> {
  url?: CLIArtifactToUrlResolver<TParent>;
  sha256?: CLIArtifactToSha256Resolver<TParent>;
}

export interface CLIArtifactToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CLIArtifactToSha256Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
