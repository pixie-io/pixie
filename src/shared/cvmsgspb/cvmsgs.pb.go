// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/cvmsgspb/cvmsgs.proto

package cvmsgspb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	vizierpb "px.dev/pixie/src/api/proto/vizierpb"
	metadatapb "px.dev/pixie/src/shared/k8s/metadatapb"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VizierStatus int32

const (
	VZ_ST_UNKNOWN       VizierStatus = 0
	VZ_ST_HEALTHY       VizierStatus = 1
	VZ_ST_UNHEALTHY     VizierStatus = 2
	VZ_ST_DISCONNECTED  VizierStatus = 3
	VZ_ST_UPDATING      VizierStatus = 4
	VZ_ST_CONNECTED     VizierStatus = 5
	VZ_ST_UPDATE_FAILED VizierStatus = 6
	VZ_ST_DEGRADED      VizierStatus = 7
)

var VizierStatus_name = map[int32]string{
	0: "VZ_ST_UNKNOWN",
	1: "VZ_ST_HEALTHY",
	2: "VZ_ST_UNHEALTHY",
	3: "VZ_ST_DISCONNECTED",
	4: "VZ_ST_UPDATING",
	5: "VZ_ST_CONNECTED",
	6: "VZ_ST_UPDATE_FAILED",
	7: "VZ_ST_DEGRADED",
}

var VizierStatus_value = map[string]int32{
	"VZ_ST_UNKNOWN":       0,
	"VZ_ST_HEALTHY":       1,
	"VZ_ST_UNHEALTHY":     2,
	"VZ_ST_DISCONNECTED":  3,
	"VZ_ST_UPDATING":      4,
	"VZ_ST_CONNECTED":     5,
	"VZ_ST_UPDATE_FAILED": 6,
	"VZ_ST_DEGRADED":      7,
}

func (VizierStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{0}
}

type RegisterVizierAck_RegistrationStatus int32

const (
	ST_UNKNOWN          RegisterVizierAck_RegistrationStatus = 0
	ST_OK               RegisterVizierAck_RegistrationStatus = 1
	ST_FAILED_NOT_FOUND RegisterVizierAck_RegistrationStatus = 2
)

var RegisterVizierAck_RegistrationStatus_name = map[int32]string{
	0: "ST_UNKNOWN",
	1: "ST_OK",
	2: "ST_FAILED_NOT_FOUND",
}

var RegisterVizierAck_RegistrationStatus_value = map[string]int32{
	"ST_UNKNOWN":          0,
	"ST_OK":               1,
	"ST_FAILED_NOT_FOUND": 2,
}

func (RegisterVizierAck_RegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{2, 0}
}

type VizierHeartbeatAck_HeartbeatStatus int32

const (
	HB_UNKNOWN VizierHeartbeatAck_HeartbeatStatus = 0
	HB_OK      VizierHeartbeatAck_HeartbeatStatus = 1
	HB_ERROR   VizierHeartbeatAck_HeartbeatStatus = 2
)

var VizierHeartbeatAck_HeartbeatStatus_name = map[int32]string{
	0: "HB_UNKNOWN",
	1: "HB_OK",
	2: "HB_ERROR",
}

var VizierHeartbeatAck_HeartbeatStatus_value = map[string]int32{
	"HB_UNKNOWN": 0,
	"HB_OK":      1,
	"HB_ERROR":   2,
}

func (VizierHeartbeatAck_HeartbeatStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{7, 0}
}

type RegisterVizierRequest struct {
	VizierID    *uuidpb.UUID       `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	JwtKey      string             `protobuf:"bytes,2,opt,name=jwt_key,json=jwtKey,proto3" json:"jwt_key,omitempty"`
	ClusterInfo *VizierClusterInfo `protobuf:"bytes,4,opt,name=cluster_info,json=clusterInfo,proto3" json:"cluster_info,omitempty"`
}

func (m *RegisterVizierRequest) Reset()      { *m = RegisterVizierRequest{} }
func (*RegisterVizierRequest) ProtoMessage() {}
func (*RegisterVizierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{0}
}
func (m *RegisterVizierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterVizierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterVizierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterVizierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterVizierRequest.Merge(m, src)
}
func (m *RegisterVizierRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterVizierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterVizierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterVizierRequest proto.InternalMessageInfo

func (m *RegisterVizierRequest) GetVizierID() *uuidpb.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *RegisterVizierRequest) GetJwtKey() string {
	if m != nil {
		return m.JwtKey
	}
	return ""
}

func (m *RegisterVizierRequest) GetClusterInfo() *VizierClusterInfo {
	if m != nil {
		return m.ClusterInfo
	}
	return nil
}

type VizierClusterInfo struct {
	ClusterUID    string `protobuf:"bytes,1,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
	ClusterName   string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	VizierVersion string `protobuf:"bytes,4,opt,name=vizier_version,json=vizierVersion,proto3" json:"vizier_version,omitempty"`
}

func (m *VizierClusterInfo) Reset()      { *m = VizierClusterInfo{} }
func (*VizierClusterInfo) ProtoMessage() {}
func (*VizierClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{1}
}
func (m *VizierClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierClusterInfo.Merge(m, src)
}
func (m *VizierClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *VizierClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VizierClusterInfo proto.InternalMessageInfo

func (m *VizierClusterInfo) GetClusterUID() string {
	if m != nil {
		return m.ClusterUID
	}
	return ""
}

func (m *VizierClusterInfo) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *VizierClusterInfo) GetVizierVersion() string {
	if m != nil {
		return m.VizierVersion
	}
	return ""
}

type RegisterVizierAck struct {
	Status     RegisterVizierAck_RegistrationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=px.cvmsgspb.RegisterVizierAck_RegistrationStatus" json:"status,omitempty"`
	VizierName string                               `protobuf:"bytes,2,opt,name=vizier_name,json=vizierName,proto3" json:"vizier_name,omitempty"`
}

func (m *RegisterVizierAck) Reset()      { *m = RegisterVizierAck{} }
func (*RegisterVizierAck) ProtoMessage() {}
func (*RegisterVizierAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{2}
}
func (m *RegisterVizierAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterVizierAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterVizierAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterVizierAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterVizierAck.Merge(m, src)
}
func (m *RegisterVizierAck) XXX_Size() int {
	return m.Size()
}
func (m *RegisterVizierAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterVizierAck.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterVizierAck proto.InternalMessageInfo

func (m *RegisterVizierAck) GetStatus() RegisterVizierAck_RegistrationStatus {
	if m != nil {
		return m.Status
	}
	return ST_UNKNOWN
}

func (m *RegisterVizierAck) GetVizierName() string {
	if m != nil {
		return m.VizierName
	}
	return ""
}

type VizierHeartbeat struct {
	VizierID                      *uuidpb.UUID          `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	Time                          int64                 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	SequenceNumber                int64                 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	PodStatuses                   map[string]*PodStatus `protobuf:"bytes,6,rep,name=pod_statuses,json=podStatuses,proto3" json:"pod_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnhealthyDataPlanePodStatuses map[string]*PodStatus `protobuf:"bytes,15,rep,name=unhealthy_data_plane_pod_statuses,json=unhealthyDataPlanePodStatuses,proto3" json:"unhealthy_data_plane_pod_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PodStatusesLastUpdated        int64                 `protobuf:"varint,7,opt,name=pod_statuses_last_updated,json=podStatusesLastUpdated,proto3" json:"pod_statuses_last_updated,omitempty"`
	Status                        VizierStatus          `protobuf:"varint,8,opt,name=status,proto3,enum=px.cvmsgspb.VizierStatus" json:"status,omitempty"`
	NumNodes                      int32                 `protobuf:"varint,11,opt,name=num_nodes,json=numNodes,proto3" json:"num_nodes,omitempty"`
	NumInstrumentedNodes          int32                 `protobuf:"varint,12,opt,name=num_instrumented_nodes,json=numInstrumentedNodes,proto3" json:"num_instrumented_nodes,omitempty"`
	DisableAutoUpdate             bool                  `protobuf:"varint,13,opt,name=disable_auto_update,json=disableAutoUpdate,proto3" json:"disable_auto_update,omitempty"`
	StatusMessage                 string                `protobuf:"bytes,14,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	K8sClusterVersion             string                `protobuf:"bytes,16,opt,name=k8s_cluster_version,json=k8sClusterVersion,proto3" json:"k8s_cluster_version,omitempty"`
	OperatorVersion               string                `protobuf:"bytes,17,opt,name=operator_version,json=operatorVersion,proto3" json:"operator_version,omitempty"`
}

func (m *VizierHeartbeat) Reset()      { *m = VizierHeartbeat{} }
func (*VizierHeartbeat) ProtoMessage() {}
func (*VizierHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{3}
}
func (m *VizierHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierHeartbeat.Merge(m, src)
}
func (m *VizierHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *VizierHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_VizierHeartbeat proto.InternalMessageInfo

func (m *VizierHeartbeat) GetVizierID() *uuidpb.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *VizierHeartbeat) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VizierHeartbeat) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *VizierHeartbeat) GetPodStatuses() map[string]*PodStatus {
	if m != nil {
		return m.PodStatuses
	}
	return nil
}

func (m *VizierHeartbeat) GetUnhealthyDataPlanePodStatuses() map[string]*PodStatus {
	if m != nil {
		return m.UnhealthyDataPlanePodStatuses
	}
	return nil
}

func (m *VizierHeartbeat) GetPodStatusesLastUpdated() int64 {
	if m != nil {
		return m.PodStatusesLastUpdated
	}
	return 0
}

func (m *VizierHeartbeat) GetStatus() VizierStatus {
	if m != nil {
		return m.Status
	}
	return VZ_ST_UNKNOWN
}

func (m *VizierHeartbeat) GetNumNodes() int32 {
	if m != nil {
		return m.NumNodes
	}
	return 0
}

func (m *VizierHeartbeat) GetNumInstrumentedNodes() int32 {
	if m != nil {
		return m.NumInstrumentedNodes
	}
	return 0
}

func (m *VizierHeartbeat) GetDisableAutoUpdate() bool {
	if m != nil {
		return m.DisableAutoUpdate
	}
	return false
}

func (m *VizierHeartbeat) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *VizierHeartbeat) GetK8sClusterVersion() string {
	if m != nil {
		return m.K8sClusterVersion
	}
	return ""
}

func (m *VizierHeartbeat) GetOperatorVersion() string {
	if m != nil {
		return m.OperatorVersion
	}
	return ""
}

type PodStatus struct {
	Name          string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        metadatapb.PodPhase `protobuf:"varint,2,opt,name=status,proto3,enum=px.shared.k8s.metadatapb.PodPhase" json:"status,omitempty"`
	StatusMessage string              `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	Reason        string              `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Containers    []*ContainerStatus  `protobuf:"bytes,5,rep,name=containers,proto3" json:"containers,omitempty"`
	CreatedAt     *types.Timestamp    `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Events        []*K8SEvent         `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	RestartCount  int64               `protobuf:"varint,8,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
}

func (m *PodStatus) Reset()      { *m = PodStatus{} }
func (*PodStatus) ProtoMessage() {}
func (*PodStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{4}
}
func (m *PodStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatus.Merge(m, src)
}
func (m *PodStatus) XXX_Size() int {
	return m.Size()
}
func (m *PodStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatus proto.InternalMessageInfo

func (m *PodStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodStatus) GetStatus() metadatapb.PodPhase {
	if m != nil {
		return m.Status
	}
	return metadatapb.PHASE_UNKNOWN
}

func (m *PodStatus) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *PodStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodStatus) GetContainers() []*ContainerStatus {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodStatus) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PodStatus) GetEvents() []*K8SEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *PodStatus) GetRestartCount() int64 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

type K8SEvent struct {
	Message   string           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	FirstTime *types.Timestamp `protobuf:"bytes,2,opt,name=first_time,json=firstTime,proto3" json:"first_time,omitempty"`
	LastTime  *types.Timestamp `protobuf:"bytes,3,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
}

func (m *K8SEvent) Reset()      { *m = K8SEvent{} }
func (*K8SEvent) ProtoMessage() {}
func (*K8SEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{5}
}
func (m *K8SEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K8SEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K8SEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K8SEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SEvent.Merge(m, src)
}
func (m *K8SEvent) XXX_Size() int {
	return m.Size()
}
func (m *K8SEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SEvent.DiscardUnknown(m)
}

var xxx_messageInfo_K8SEvent proto.InternalMessageInfo

func (m *K8SEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *K8SEvent) GetFirstTime() *types.Timestamp {
	if m != nil {
		return m.FirstTime
	}
	return nil
}

func (m *K8SEvent) GetLastTime() *types.Timestamp {
	if m != nil {
		return m.LastTime
	}
	return nil
}

type ContainerStatus struct {
	Name         string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State        metadatapb.ContainerState `protobuf:"varint,2,opt,name=state,proto3,enum=px.shared.k8s.metadatapb.ContainerState" json:"state,omitempty"`
	Message      string                    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Reason       string                    `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	CreatedAt    *types.Timestamp          `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	RestartCount int64                     `protobuf:"varint,7,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
}

func (m *ContainerStatus) Reset()      { *m = ContainerStatus{} }
func (*ContainerStatus) ProtoMessage() {}
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{6}
}
func (m *ContainerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStatus.Merge(m, src)
}
func (m *ContainerStatus) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStatus proto.InternalMessageInfo

func (m *ContainerStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerStatus) GetState() metadatapb.ContainerState {
	if m != nil {
		return m.State
	}
	return metadatapb.CONTAINER_STATE_UNKNOWN
}

func (m *ContainerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ContainerStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ContainerStatus) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ContainerStatus) GetRestartCount() int64 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

type VizierHeartbeatAck struct {
	Status         VizierHeartbeatAck_HeartbeatStatus `protobuf:"varint,1,opt,name=status,proto3,enum=px.cvmsgspb.VizierHeartbeatAck_HeartbeatStatus" json:"status,omitempty"`
	Time           int64                              `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	SequenceNumber int64                              `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ErrorMessage   string                             `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *VizierHeartbeatAck) Reset()      { *m = VizierHeartbeatAck{} }
func (*VizierHeartbeatAck) ProtoMessage() {}
func (*VizierHeartbeatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{7}
}
func (m *VizierHeartbeatAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierHeartbeatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierHeartbeatAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierHeartbeatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierHeartbeatAck.Merge(m, src)
}
func (m *VizierHeartbeatAck) XXX_Size() int {
	return m.Size()
}
func (m *VizierHeartbeatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierHeartbeatAck.DiscardUnknown(m)
}

var xxx_messageInfo_VizierHeartbeatAck proto.InternalMessageInfo

func (m *VizierHeartbeatAck) GetStatus() VizierHeartbeatAck_HeartbeatStatus {
	if m != nil {
		return m.Status
	}
	return HB_UNKNOWN
}

func (m *VizierHeartbeatAck) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VizierHeartbeatAck) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *VizierHeartbeatAck) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type VizierConfig struct {
}

func (m *VizierConfig) Reset()      { *m = VizierConfig{} }
func (*VizierConfig) ProtoMessage() {}
func (*VizierConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{8}
}
func (m *VizierConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierConfig.Merge(m, src)
}
func (m *VizierConfig) XXX_Size() int {
	return m.Size()
}
func (m *VizierConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VizierConfig proto.InternalMessageInfo

type VizierConfigUpdate struct {
}

func (m *VizierConfigUpdate) Reset()      { *m = VizierConfigUpdate{} }
func (*VizierConfigUpdate) ProtoMessage() {}
func (*VizierConfigUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{9}
}
func (m *VizierConfigUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierConfigUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierConfigUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierConfigUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierConfigUpdate.Merge(m, src)
}
func (m *VizierConfigUpdate) XXX_Size() int {
	return m.Size()
}
func (m *VizierConfigUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierConfigUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_VizierConfigUpdate proto.InternalMessageInfo

type VizierInfo struct {
	VizierID                      *uuidpb.UUID          `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty" db:vizier_id`
	Status                        VizierStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=px.cvmsgspb.VizierStatus" json:"status,omitempty"`
	LastHeartbeatNs               int64                 `protobuf:"varint,3,opt,name=last_heartbeat_ns,json=lastHeartbeatNs,proto3" json:"last_heartbeat_ns,omitempty" db:last_heartbeat`
	Config                        *VizierConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	ClusterUID                    string                `protobuf:"bytes,5,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
	ClusterName                   string                `protobuf:"bytes,6,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	ClusterVersion                string                `protobuf:"bytes,7,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
	OperatorVersion               string                `protobuf:"bytes,17,opt,name=operator_version,json=operatorVersion,proto3" json:"operator_version,omitempty"`
	VizierVersion                 string                `protobuf:"bytes,8,opt,name=vizier_version,json=vizierVersion,proto3" json:"vizier_version,omitempty"`
	ControlPlanePodStatuses       map[string]*PodStatus `protobuf:"bytes,9,rep,name=control_plane_pod_statuses,json=controlPlanePodStatuses,proto3" json:"control_plane_pod_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnhealthyDataPlanePodStatuses map[string]*PodStatus `protobuf:"bytes,14,rep,name=unhealthy_data_plane_pod_statuses,json=unhealthyDataPlanePodStatuses,proto3" json:"unhealthy_data_plane_pod_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumNodes                      int32                 `protobuf:"varint,11,opt,name=num_nodes,json=numNodes,proto3" json:"num_nodes,omitempty"`
	NumInstrumentedNodes          int32                 `protobuf:"varint,12,opt,name=num_instrumented_nodes,json=numInstrumentedNodes,proto3" json:"num_instrumented_nodes,omitempty"`
	StatusMessage                 string                `protobuf:"bytes,13,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	PreviousStatus                VizierStatus          `protobuf:"varint,15,opt,name=previous_status,json=previousStatus,proto3,enum=px.cvmsgspb.VizierStatus" json:"previous_status,omitempty"`
	PreviousStatusTime            *types.Timestamp      `protobuf:"bytes,16,opt,name=previous_status_time,json=previousStatusTime,proto3" json:"previous_status_time,omitempty"`
}

func (m *VizierInfo) Reset()      { *m = VizierInfo{} }
func (*VizierInfo) ProtoMessage() {}
func (*VizierInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{10}
}
func (m *VizierInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierInfo.Merge(m, src)
}
func (m *VizierInfo) XXX_Size() int {
	return m.Size()
}
func (m *VizierInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VizierInfo proto.InternalMessageInfo

func (m *VizierInfo) GetVizierID() *uuidpb.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *VizierInfo) GetStatus() VizierStatus {
	if m != nil {
		return m.Status
	}
	return VZ_ST_UNKNOWN
}

func (m *VizierInfo) GetLastHeartbeatNs() int64 {
	if m != nil {
		return m.LastHeartbeatNs
	}
	return 0
}

func (m *VizierInfo) GetConfig() *VizierConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *VizierInfo) GetClusterUID() string {
	if m != nil {
		return m.ClusterUID
	}
	return ""
}

func (m *VizierInfo) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *VizierInfo) GetClusterVersion() string {
	if m != nil {
		return m.ClusterVersion
	}
	return ""
}

func (m *VizierInfo) GetOperatorVersion() string {
	if m != nil {
		return m.OperatorVersion
	}
	return ""
}

func (m *VizierInfo) GetVizierVersion() string {
	if m != nil {
		return m.VizierVersion
	}
	return ""
}

func (m *VizierInfo) GetControlPlanePodStatuses() map[string]*PodStatus {
	if m != nil {
		return m.ControlPlanePodStatuses
	}
	return nil
}

func (m *VizierInfo) GetUnhealthyDataPlanePodStatuses() map[string]*PodStatus {
	if m != nil {
		return m.UnhealthyDataPlanePodStatuses
	}
	return nil
}

func (m *VizierInfo) GetNumNodes() int32 {
	if m != nil {
		return m.NumNodes
	}
	return 0
}

func (m *VizierInfo) GetNumInstrumentedNodes() int32 {
	if m != nil {
		return m.NumInstrumentedNodes
	}
	return 0
}

func (m *VizierInfo) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *VizierInfo) GetPreviousStatus() VizierStatus {
	if m != nil {
		return m.PreviousStatus
	}
	return VZ_ST_UNKNOWN
}

func (m *VizierInfo) GetPreviousStatusTime() *types.Timestamp {
	if m != nil {
		return m.PreviousStatusTime
	}
	return nil
}

type UpdateVizierConfigRequest struct {
	VizierID     *uuidpb.UUID        `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty" db:vizier_id`
	ConfigUpdate *VizierConfigUpdate `protobuf:"bytes,2,opt,name=config_update,json=configUpdate,proto3" json:"config_update,omitempty"`
}

func (m *UpdateVizierConfigRequest) Reset()      { *m = UpdateVizierConfigRequest{} }
func (*UpdateVizierConfigRequest) ProtoMessage() {}
func (*UpdateVizierConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{11}
}
func (m *UpdateVizierConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVizierConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVizierConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVizierConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVizierConfigRequest.Merge(m, src)
}
func (m *UpdateVizierConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVizierConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVizierConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVizierConfigRequest proto.InternalMessageInfo

func (m *UpdateVizierConfigRequest) GetVizierID() *uuidpb.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *UpdateVizierConfigRequest) GetConfigUpdate() *VizierConfigUpdate {
	if m != nil {
		return m.ConfigUpdate
	}
	return nil
}

type UpdateVizierConfigResponse struct {
}

func (m *UpdateVizierConfigResponse) Reset()      { *m = UpdateVizierConfigResponse{} }
func (*UpdateVizierConfigResponse) ProtoMessage() {}
func (*UpdateVizierConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{12}
}
func (m *UpdateVizierConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVizierConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVizierConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVizierConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVizierConfigResponse.Merge(m, src)
}
func (m *UpdateVizierConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVizierConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVizierConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVizierConfigResponse proto.InternalMessageInfo

type UpdateOrInstallVizierRequest struct {
	VizierID     *uuidpb.UUID `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	Version      string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Token        string       `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	RedeployEtcd bool         `protobuf:"varint,4,opt,name=redeploy_etcd,json=redeployEtcd,proto3" json:"redeploy_etcd,omitempty"`
}

func (m *UpdateOrInstallVizierRequest) Reset()      { *m = UpdateOrInstallVizierRequest{} }
func (*UpdateOrInstallVizierRequest) ProtoMessage() {}
func (*UpdateOrInstallVizierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{13}
}
func (m *UpdateOrInstallVizierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrInstallVizierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrInstallVizierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrInstallVizierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrInstallVizierRequest.Merge(m, src)
}
func (m *UpdateOrInstallVizierRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrInstallVizierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrInstallVizierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrInstallVizierRequest proto.InternalMessageInfo

func (m *UpdateOrInstallVizierRequest) GetVizierID() *uuidpb.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *UpdateOrInstallVizierRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UpdateOrInstallVizierRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UpdateOrInstallVizierRequest) GetRedeployEtcd() bool {
	if m != nil {
		return m.RedeployEtcd
	}
	return false
}

type UpdateOrInstallVizierResponse struct {
	UpdateStarted bool `protobuf:"varint,1,opt,name=update_started,json=updateStarted,proto3" json:"update_started,omitempty"`
}

func (m *UpdateOrInstallVizierResponse) Reset()      { *m = UpdateOrInstallVizierResponse{} }
func (*UpdateOrInstallVizierResponse) ProtoMessage() {}
func (*UpdateOrInstallVizierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{14}
}
func (m *UpdateOrInstallVizierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrInstallVizierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrInstallVizierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrInstallVizierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrInstallVizierResponse.Merge(m, src)
}
func (m *UpdateOrInstallVizierResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrInstallVizierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrInstallVizierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrInstallVizierResponse proto.InternalMessageInfo

func (m *UpdateOrInstallVizierResponse) GetUpdateStarted() bool {
	if m != nil {
		return m.UpdateStarted
	}
	return false
}

type VizierConnectionInfo struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *VizierConnectionInfo) Reset()      { *m = VizierConnectionInfo{} }
func (*VizierConnectionInfo) ProtoMessage() {}
func (*VizierConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{15}
}
func (m *VizierConnectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierConnectionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierConnectionInfo.Merge(m, src)
}
func (m *VizierConnectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *VizierConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VizierConnectionInfo proto.InternalMessageInfo

func (m *VizierConnectionInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VLogMessage struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *VLogMessage) Reset()      { *m = VLogMessage{} }
func (*VLogMessage) ProtoMessage() {}
func (*VLogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{16}
}
func (m *VLogMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VLogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VLogMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VLogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VLogMessage.Merge(m, src)
}
func (m *VLogMessage) XXX_Size() int {
	return m.Size()
}
func (m *VLogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VLogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VLogMessage proto.InternalMessageInfo

func (m *VLogMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2VAPIStreamRequest struct {
	RequestID string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*C2VAPIStreamRequest_ExecReq
	//	*C2VAPIStreamRequest_HcReq
	//	*C2VAPIStreamRequest_CancelReq
	//	*C2VAPIStreamRequest_DebugLogReq
	//	*C2VAPIStreamRequest_DebugPodsReq
	//	*C2VAPIStreamRequest_GenerateOTelScriptReq
	Msg isC2VAPIStreamRequest_Msg `protobuf_oneof:"msg"`
}

func (m *C2VAPIStreamRequest) Reset()      { *m = C2VAPIStreamRequest{} }
func (*C2VAPIStreamRequest) ProtoMessage() {}
func (*C2VAPIStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{17}
}
func (m *C2VAPIStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2VAPIStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2VAPIStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2VAPIStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2VAPIStreamRequest.Merge(m, src)
}
func (m *C2VAPIStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *C2VAPIStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_C2VAPIStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_C2VAPIStreamRequest proto.InternalMessageInfo

type isC2VAPIStreamRequest_Msg interface {
	isC2VAPIStreamRequest_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type C2VAPIStreamRequest_ExecReq struct {
	ExecReq *vizierpb.ExecuteScriptRequest `protobuf:"bytes,3,opt,name=exec_req,json=execReq,proto3,oneof" json:"exec_req,omitempty"`
}
type C2VAPIStreamRequest_HcReq struct {
	HcReq *vizierpb.HealthCheckRequest `protobuf:"bytes,4,opt,name=hc_req,json=hcReq,proto3,oneof" json:"hc_req,omitempty"`
}
type C2VAPIStreamRequest_CancelReq struct {
	CancelReq *C2VAPIStreamCancel `protobuf:"bytes,5,opt,name=cancel_req,json=cancelReq,proto3,oneof" json:"cancel_req,omitempty"`
}
type C2VAPIStreamRequest_DebugLogReq struct {
	DebugLogReq *vizierpb.DebugLogRequest `protobuf:"bytes,8,opt,name=debug_log_req,json=debugLogReq,proto3,oneof" json:"debug_log_req,omitempty"`
}
type C2VAPIStreamRequest_DebugPodsReq struct {
	DebugPodsReq *vizierpb.DebugPodsRequest `protobuf:"bytes,9,opt,name=debug_pods_req,json=debugPodsReq,proto3,oneof" json:"debug_pods_req,omitempty"`
}
type C2VAPIStreamRequest_GenerateOTelScriptReq struct {
	GenerateOTelScriptReq *vizierpb.GenerateOTelScriptRequest `protobuf:"bytes,10,opt,name=generate_otel_script_req,json=generateOtelScriptReq,proto3,oneof" json:"generate_otel_script_req,omitempty"`
}

func (*C2VAPIStreamRequest_ExecReq) isC2VAPIStreamRequest_Msg()               {}
func (*C2VAPIStreamRequest_HcReq) isC2VAPIStreamRequest_Msg()                 {}
func (*C2VAPIStreamRequest_CancelReq) isC2VAPIStreamRequest_Msg()             {}
func (*C2VAPIStreamRequest_DebugLogReq) isC2VAPIStreamRequest_Msg()           {}
func (*C2VAPIStreamRequest_DebugPodsReq) isC2VAPIStreamRequest_Msg()          {}
func (*C2VAPIStreamRequest_GenerateOTelScriptReq) isC2VAPIStreamRequest_Msg() {}

func (m *C2VAPIStreamRequest) GetMsg() isC2VAPIStreamRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *C2VAPIStreamRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *C2VAPIStreamRequest) GetExecReq() *vizierpb.ExecuteScriptRequest {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_ExecReq); ok {
		return x.ExecReq
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetHcReq() *vizierpb.HealthCheckRequest {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_HcReq); ok {
		return x.HcReq
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetCancelReq() *C2VAPIStreamCancel {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_CancelReq); ok {
		return x.CancelReq
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetDebugLogReq() *vizierpb.DebugLogRequest {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_DebugLogReq); ok {
		return x.DebugLogReq
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetDebugPodsReq() *vizierpb.DebugPodsRequest {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_DebugPodsReq); ok {
		return x.DebugPodsReq
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetGenerateOTelScriptReq() *vizierpb.GenerateOTelScriptRequest {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_GenerateOTelScriptReq); ok {
		return x.GenerateOTelScriptReq
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*C2VAPIStreamRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*C2VAPIStreamRequest_ExecReq)(nil),
		(*C2VAPIStreamRequest_HcReq)(nil),
		(*C2VAPIStreamRequest_CancelReq)(nil),
		(*C2VAPIStreamRequest_DebugLogReq)(nil),
		(*C2VAPIStreamRequest_DebugPodsReq)(nil),
		(*C2VAPIStreamRequest_GenerateOTelScriptReq)(nil),
	}
}

type C2VAPIStreamCancel struct {
}

func (m *C2VAPIStreamCancel) Reset()      { *m = C2VAPIStreamCancel{} }
func (*C2VAPIStreamCancel) ProtoMessage() {}
func (*C2VAPIStreamCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{18}
}
func (m *C2VAPIStreamCancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2VAPIStreamCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2VAPIStreamCancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2VAPIStreamCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2VAPIStreamCancel.Merge(m, src)
}
func (m *C2VAPIStreamCancel) XXX_Size() int {
	return m.Size()
}
func (m *C2VAPIStreamCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_C2VAPIStreamCancel.DiscardUnknown(m)
}

var xxx_messageInfo_C2VAPIStreamCancel proto.InternalMessageInfo

type V2CAPIStreamResponse struct {
	RequestID string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*V2CAPIStreamResponse_ExecResp
	//	*V2CAPIStreamResponse_HcResp
	//	*V2CAPIStreamResponse_Status
	//	*V2CAPIStreamResponse_DebugLogResp
	//	*V2CAPIStreamResponse_DebugPodsResp
	//	*V2CAPIStreamResponse_GenerateOTelScriptResp
	Msg isV2CAPIStreamResponse_Msg `protobuf_oneof:"msg"`
}

func (m *V2CAPIStreamResponse) Reset()      { *m = V2CAPIStreamResponse{} }
func (*V2CAPIStreamResponse) ProtoMessage() {}
func (*V2CAPIStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{19}
}
func (m *V2CAPIStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2CAPIStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2CAPIStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2CAPIStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2CAPIStreamResponse.Merge(m, src)
}
func (m *V2CAPIStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *V2CAPIStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_V2CAPIStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_V2CAPIStreamResponse proto.InternalMessageInfo

type isV2CAPIStreamResponse_Msg interface {
	isV2CAPIStreamResponse_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type V2CAPIStreamResponse_ExecResp struct {
	ExecResp *vizierpb.ExecuteScriptResponse `protobuf:"bytes,2,opt,name=exec_resp,json=execResp,proto3,oneof" json:"exec_resp,omitempty"`
}
type V2CAPIStreamResponse_HcResp struct {
	HcResp *vizierpb.HealthCheckResponse `protobuf:"bytes,3,opt,name=hc_resp,json=hcResp,proto3,oneof" json:"hc_resp,omitempty"`
}
type V2CAPIStreamResponse_Status struct {
	Status *vizierpb.Status `protobuf:"bytes,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
}
type V2CAPIStreamResponse_DebugLogResp struct {
	DebugLogResp *vizierpb.DebugLogResponse `protobuf:"bytes,7,opt,name=debug_log_resp,json=debugLogResp,proto3,oneof" json:"debug_log_resp,omitempty"`
}
type V2CAPIStreamResponse_DebugPodsResp struct {
	DebugPodsResp *vizierpb.DebugPodsResponse `protobuf:"bytes,8,opt,name=debug_pods_resp,json=debugPodsResp,proto3,oneof" json:"debug_pods_resp,omitempty"`
}
type V2CAPIStreamResponse_GenerateOTelScriptResp struct {
	GenerateOTelScriptResp *vizierpb.GenerateOTelScriptResponse `protobuf:"bytes,9,opt,name=generate_otel_script_resp,json=generateOtelScriptResp,proto3,oneof" json:"generate_otel_script_resp,omitempty"`
}

func (*V2CAPIStreamResponse_ExecResp) isV2CAPIStreamResponse_Msg()               {}
func (*V2CAPIStreamResponse_HcResp) isV2CAPIStreamResponse_Msg()                 {}
func (*V2CAPIStreamResponse_Status) isV2CAPIStreamResponse_Msg()                 {}
func (*V2CAPIStreamResponse_DebugLogResp) isV2CAPIStreamResponse_Msg()           {}
func (*V2CAPIStreamResponse_DebugPodsResp) isV2CAPIStreamResponse_Msg()          {}
func (*V2CAPIStreamResponse_GenerateOTelScriptResp) isV2CAPIStreamResponse_Msg() {}

func (m *V2CAPIStreamResponse) GetMsg() isV2CAPIStreamResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *V2CAPIStreamResponse) GetExecResp() *vizierpb.ExecuteScriptResponse {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_ExecResp); ok {
		return x.ExecResp
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetHcResp() *vizierpb.HealthCheckResponse {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_HcResp); ok {
		return x.HcResp
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetStatus() *vizierpb.Status {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_Status); ok {
		return x.Status
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetDebugLogResp() *vizierpb.DebugLogResponse {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_DebugLogResp); ok {
		return x.DebugLogResp
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetDebugPodsResp() *vizierpb.DebugPodsResponse {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_DebugPodsResp); ok {
		return x.DebugPodsResp
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetGenerateOTelScriptResp() *vizierpb.GenerateOTelScriptResponse {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_GenerateOTelScriptResp); ok {
		return x.GenerateOTelScriptResp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*V2CAPIStreamResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*V2CAPIStreamResponse_ExecResp)(nil),
		(*V2CAPIStreamResponse_HcResp)(nil),
		(*V2CAPIStreamResponse_Status)(nil),
		(*V2CAPIStreamResponse_DebugLogResp)(nil),
		(*V2CAPIStreamResponse_DebugPodsResp)(nil),
		(*V2CAPIStreamResponse_GenerateOTelScriptResp)(nil),
	}
}

type V2CMessage struct {
	VizierID   string     `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	ClusterUID string     `protobuf:"bytes,2,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
	SessionId  int64      `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Msg        *types.Any `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *V2CMessage) Reset()      { *m = V2CMessage{} }
func (*V2CMessage) ProtoMessage() {}
func (*V2CMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{20}
}
func (m *V2CMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2CMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2CMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2CMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2CMessage.Merge(m, src)
}
func (m *V2CMessage) XXX_Size() int {
	return m.Size()
}
func (m *V2CMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_V2CMessage.DiscardUnknown(m)
}

var xxx_messageInfo_V2CMessage proto.InternalMessageInfo

func (m *V2CMessage) GetVizierID() string {
	if m != nil {
		return m.VizierID
	}
	return ""
}

func (m *V2CMessage) GetClusterUID() string {
	if m != nil {
		return m.ClusterUID
	}
	return ""
}

func (m *V2CMessage) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *V2CMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type C2VMessage struct {
	VizierID string     `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	Msg      *types.Any `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C2VMessage) Reset()      { *m = C2VMessage{} }
func (*C2VMessage) ProtoMessage() {}
func (*C2VMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{21}
}
func (m *C2VMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2VMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2VMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2VMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2VMessage.Merge(m, src)
}
func (m *C2VMessage) XXX_Size() int {
	return m.Size()
}
func (m *C2VMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_C2VMessage.DiscardUnknown(m)
}

var xxx_messageInfo_C2VMessage proto.InternalMessageInfo

func (m *C2VMessage) GetVizierID() string {
	if m != nil {
		return m.VizierID
	}
	return ""
}

func (m *C2VMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type CronScript struct {
	ID             *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Script         string       `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	CronExpression string       `protobuf:"bytes,3,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
	Configs        string       `protobuf:"bytes,4,opt,name=configs,proto3" json:"configs,omitempty"`
	FrequencyS     int64        `protobuf:"varint,5,opt,name=frequency_s,json=frequencyS,proto3" json:"frequency_s,omitempty"`
}

func (m *CronScript) Reset()      { *m = CronScript{} }
func (*CronScript) ProtoMessage() {}
func (*CronScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{22}
}
func (m *CronScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronScript.Merge(m, src)
}
func (m *CronScript) XXX_Size() int {
	return m.Size()
}
func (m *CronScript) XXX_DiscardUnknown() {
	xxx_messageInfo_CronScript.DiscardUnknown(m)
}

var xxx_messageInfo_CronScript proto.InternalMessageInfo

func (m *CronScript) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *CronScript) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *CronScript) GetCronExpression() string {
	if m != nil {
		return m.CronExpression
	}
	return ""
}

func (m *CronScript) GetConfigs() string {
	if m != nil {
		return m.Configs
	}
	return ""
}

func (m *CronScript) GetFrequencyS() int64 {
	if m != nil {
		return m.FrequencyS
	}
	return 0
}

type GetCronScriptsChecksumRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *GetCronScriptsChecksumRequest) Reset()      { *m = GetCronScriptsChecksumRequest{} }
func (*GetCronScriptsChecksumRequest) ProtoMessage() {}
func (*GetCronScriptsChecksumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{23}
}
func (m *GetCronScriptsChecksumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCronScriptsChecksumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCronScriptsChecksumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCronScriptsChecksumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCronScriptsChecksumRequest.Merge(m, src)
}
func (m *GetCronScriptsChecksumRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCronScriptsChecksumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCronScriptsChecksumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCronScriptsChecksumRequest proto.InternalMessageInfo

func (m *GetCronScriptsChecksumRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type GetCronScriptsChecksumResponse struct {
	Checksum string `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *GetCronScriptsChecksumResponse) Reset()      { *m = GetCronScriptsChecksumResponse{} }
func (*GetCronScriptsChecksumResponse) ProtoMessage() {}
func (*GetCronScriptsChecksumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{24}
}
func (m *GetCronScriptsChecksumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCronScriptsChecksumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCronScriptsChecksumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCronScriptsChecksumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCronScriptsChecksumResponse.Merge(m, src)
}
func (m *GetCronScriptsChecksumResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCronScriptsChecksumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCronScriptsChecksumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCronScriptsChecksumResponse proto.InternalMessageInfo

func (m *GetCronScriptsChecksumResponse) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

type GetCronScriptsRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *GetCronScriptsRequest) Reset()      { *m = GetCronScriptsRequest{} }
func (*GetCronScriptsRequest) ProtoMessage() {}
func (*GetCronScriptsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{25}
}
func (m *GetCronScriptsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCronScriptsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCronScriptsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCronScriptsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCronScriptsRequest.Merge(m, src)
}
func (m *GetCronScriptsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCronScriptsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCronScriptsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCronScriptsRequest proto.InternalMessageInfo

func (m *GetCronScriptsRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type GetCronScriptsResponse struct {
	Scripts map[string]*CronScript `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetCronScriptsResponse) Reset()      { *m = GetCronScriptsResponse{} }
func (*GetCronScriptsResponse) ProtoMessage() {}
func (*GetCronScriptsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{26}
}
func (m *GetCronScriptsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCronScriptsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCronScriptsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCronScriptsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCronScriptsResponse.Merge(m, src)
}
func (m *GetCronScriptsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCronScriptsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCronScriptsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCronScriptsResponse proto.InternalMessageInfo

func (m *GetCronScriptsResponse) GetScripts() map[string]*CronScript {
	if m != nil {
		return m.Scripts
	}
	return nil
}

type RegisterOrUpdateCronScriptRequest struct {
	Script *CronScript `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *RegisterOrUpdateCronScriptRequest) Reset()      { *m = RegisterOrUpdateCronScriptRequest{} }
func (*RegisterOrUpdateCronScriptRequest) ProtoMessage() {}
func (*RegisterOrUpdateCronScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{27}
}
func (m *RegisterOrUpdateCronScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOrUpdateCronScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOrUpdateCronScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOrUpdateCronScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOrUpdateCronScriptRequest.Merge(m, src)
}
func (m *RegisterOrUpdateCronScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOrUpdateCronScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOrUpdateCronScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOrUpdateCronScriptRequest proto.InternalMessageInfo

func (m *RegisterOrUpdateCronScriptRequest) GetScript() *CronScript {
	if m != nil {
		return m.Script
	}
	return nil
}

type RegisterOrUpdateCronScriptResponse struct {
}

func (m *RegisterOrUpdateCronScriptResponse) Reset()      { *m = RegisterOrUpdateCronScriptResponse{} }
func (*RegisterOrUpdateCronScriptResponse) ProtoMessage() {}
func (*RegisterOrUpdateCronScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{28}
}
func (m *RegisterOrUpdateCronScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOrUpdateCronScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOrUpdateCronScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOrUpdateCronScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOrUpdateCronScriptResponse.Merge(m, src)
}
func (m *RegisterOrUpdateCronScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOrUpdateCronScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOrUpdateCronScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOrUpdateCronScriptResponse proto.InternalMessageInfo

type DeleteCronScriptRequest struct {
	ScriptID *uuidpb.UUID `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
}

func (m *DeleteCronScriptRequest) Reset()      { *m = DeleteCronScriptRequest{} }
func (*DeleteCronScriptRequest) ProtoMessage() {}
func (*DeleteCronScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{29}
}
func (m *DeleteCronScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCronScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCronScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCronScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCronScriptRequest.Merge(m, src)
}
func (m *DeleteCronScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCronScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCronScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCronScriptRequest proto.InternalMessageInfo

func (m *DeleteCronScriptRequest) GetScriptID() *uuidpb.UUID {
	if m != nil {
		return m.ScriptID
	}
	return nil
}

type DeleteCronScriptResponse struct {
}

func (m *DeleteCronScriptResponse) Reset()      { *m = DeleteCronScriptResponse{} }
func (*DeleteCronScriptResponse) ProtoMessage() {}
func (*DeleteCronScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{30}
}
func (m *DeleteCronScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCronScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCronScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCronScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCronScriptResponse.Merge(m, src)
}
func (m *DeleteCronScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCronScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCronScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCronScriptResponse proto.InternalMessageInfo

type CronScriptUpdate struct {
	// Types that are valid to be assigned to Msg:
	//	*CronScriptUpdate_UpsertReq
	//	*CronScriptUpdate_DeleteReq
	Msg       isCronScriptUpdate_Msg `protobuf_oneof:"msg"`
	RequestID string                 `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Timestamp int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *CronScriptUpdate) Reset()      { *m = CronScriptUpdate{} }
func (*CronScriptUpdate) ProtoMessage() {}
func (*CronScriptUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{31}
}
func (m *CronScriptUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronScriptUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronScriptUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronScriptUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronScriptUpdate.Merge(m, src)
}
func (m *CronScriptUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CronScriptUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CronScriptUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CronScriptUpdate proto.InternalMessageInfo

type isCronScriptUpdate_Msg interface {
	isCronScriptUpdate_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CronScriptUpdate_UpsertReq struct {
	UpsertReq *RegisterOrUpdateCronScriptRequest `protobuf:"bytes,1,opt,name=upsert_req,json=upsertReq,proto3,oneof" json:"upsert_req,omitempty"`
}
type CronScriptUpdate_DeleteReq struct {
	DeleteReq *DeleteCronScriptRequest `protobuf:"bytes,2,opt,name=delete_req,json=deleteReq,proto3,oneof" json:"delete_req,omitempty"`
}

func (*CronScriptUpdate_UpsertReq) isCronScriptUpdate_Msg() {}
func (*CronScriptUpdate_DeleteReq) isCronScriptUpdate_Msg() {}

func (m *CronScriptUpdate) GetMsg() isCronScriptUpdate_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CronScriptUpdate) GetUpsertReq() *RegisterOrUpdateCronScriptRequest {
	if x, ok := m.GetMsg().(*CronScriptUpdate_UpsertReq); ok {
		return x.UpsertReq
	}
	return nil
}

func (m *CronScriptUpdate) GetDeleteReq() *DeleteCronScriptRequest {
	if x, ok := m.GetMsg().(*CronScriptUpdate_DeleteReq); ok {
		return x.DeleteReq
	}
	return nil
}

func (m *CronScriptUpdate) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *CronScriptUpdate) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CronScriptUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CronScriptUpdate_UpsertReq)(nil),
		(*CronScriptUpdate_DeleteReq)(nil),
	}
}

func init() {
	proto.RegisterEnum("px.cvmsgspb.VizierStatus", VizierStatus_name, VizierStatus_value)
	proto.RegisterEnum("px.cvmsgspb.RegisterVizierAck_RegistrationStatus", RegisterVizierAck_RegistrationStatus_name, RegisterVizierAck_RegistrationStatus_value)
	proto.RegisterEnum("px.cvmsgspb.VizierHeartbeatAck_HeartbeatStatus", VizierHeartbeatAck_HeartbeatStatus_name, VizierHeartbeatAck_HeartbeatStatus_value)
	proto.RegisterType((*RegisterVizierRequest)(nil), "px.cvmsgspb.RegisterVizierRequest")
	proto.RegisterType((*VizierClusterInfo)(nil), "px.cvmsgspb.VizierClusterInfo")
	proto.RegisterType((*RegisterVizierAck)(nil), "px.cvmsgspb.RegisterVizierAck")
	proto.RegisterType((*VizierHeartbeat)(nil), "px.cvmsgspb.VizierHeartbeat")
	proto.RegisterMapType((map[string]*PodStatus)(nil), "px.cvmsgspb.VizierHeartbeat.PodStatusesEntry")
	proto.RegisterMapType((map[string]*PodStatus)(nil), "px.cvmsgspb.VizierHeartbeat.UnhealthyDataPlanePodStatusesEntry")
	proto.RegisterType((*PodStatus)(nil), "px.cvmsgspb.PodStatus")
	proto.RegisterType((*K8SEvent)(nil), "px.cvmsgspb.K8sEvent")
	proto.RegisterType((*ContainerStatus)(nil), "px.cvmsgspb.ContainerStatus")
	proto.RegisterType((*VizierHeartbeatAck)(nil), "px.cvmsgspb.VizierHeartbeatAck")
	proto.RegisterType((*VizierConfig)(nil), "px.cvmsgspb.VizierConfig")
	proto.RegisterType((*VizierConfigUpdate)(nil), "px.cvmsgspb.VizierConfigUpdate")
	proto.RegisterType((*VizierInfo)(nil), "px.cvmsgspb.VizierInfo")
	proto.RegisterMapType((map[string]*PodStatus)(nil), "px.cvmsgspb.VizierInfo.ControlPlanePodStatusesEntry")
	proto.RegisterMapType((map[string]*PodStatus)(nil), "px.cvmsgspb.VizierInfo.UnhealthyDataPlanePodStatusesEntry")
	proto.RegisterType((*UpdateVizierConfigRequest)(nil), "px.cvmsgspb.UpdateVizierConfigRequest")
	proto.RegisterType((*UpdateVizierConfigResponse)(nil), "px.cvmsgspb.UpdateVizierConfigResponse")
	proto.RegisterType((*UpdateOrInstallVizierRequest)(nil), "px.cvmsgspb.UpdateOrInstallVizierRequest")
	proto.RegisterType((*UpdateOrInstallVizierResponse)(nil), "px.cvmsgspb.UpdateOrInstallVizierResponse")
	proto.RegisterType((*VizierConnectionInfo)(nil), "px.cvmsgspb.VizierConnectionInfo")
	proto.RegisterType((*VLogMessage)(nil), "px.cvmsgspb.VLogMessage")
	proto.RegisterType((*C2VAPIStreamRequest)(nil), "px.cvmsgspb.C2VAPIStreamRequest")
	proto.RegisterType((*C2VAPIStreamCancel)(nil), "px.cvmsgspb.C2VAPIStreamCancel")
	proto.RegisterType((*V2CAPIStreamResponse)(nil), "px.cvmsgspb.V2CAPIStreamResponse")
	proto.RegisterType((*V2CMessage)(nil), "px.cvmsgspb.V2CMessage")
	proto.RegisterType((*C2VMessage)(nil), "px.cvmsgspb.C2VMessage")
	proto.RegisterType((*CronScript)(nil), "px.cvmsgspb.CronScript")
	proto.RegisterType((*GetCronScriptsChecksumRequest)(nil), "px.cvmsgspb.GetCronScriptsChecksumRequest")
	proto.RegisterType((*GetCronScriptsChecksumResponse)(nil), "px.cvmsgspb.GetCronScriptsChecksumResponse")
	proto.RegisterType((*GetCronScriptsRequest)(nil), "px.cvmsgspb.GetCronScriptsRequest")
	proto.RegisterType((*GetCronScriptsResponse)(nil), "px.cvmsgspb.GetCronScriptsResponse")
	proto.RegisterMapType((map[string]*CronScript)(nil), "px.cvmsgspb.GetCronScriptsResponse.ScriptsEntry")
	proto.RegisterType((*RegisterOrUpdateCronScriptRequest)(nil), "px.cvmsgspb.RegisterOrUpdateCronScriptRequest")
	proto.RegisterType((*RegisterOrUpdateCronScriptResponse)(nil), "px.cvmsgspb.RegisterOrUpdateCronScriptResponse")
	proto.RegisterType((*DeleteCronScriptRequest)(nil), "px.cvmsgspb.DeleteCronScriptRequest")
	proto.RegisterType((*DeleteCronScriptResponse)(nil), "px.cvmsgspb.DeleteCronScriptResponse")
	proto.RegisterType((*CronScriptUpdate)(nil), "px.cvmsgspb.CronScriptUpdate")
}

func init() { proto.RegisterFile("src/shared/cvmsgspb/cvmsgs.proto", fileDescriptor_5a48c2306678667b) }

var fileDescriptor_5a48c2306678667b = []byte{
	// 2525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x4b, 0x6f, 0xe3, 0xd6,
	0x15, 0x36, 0xf5, 0xa4, 0x8e, 0x65, 0x8b, 0xbe, 0xe3, 0x87, 0x46, 0x9d, 0x91, 0x3c, 0xcc, 0xcb,
	0x49, 0x33, 0x72, 0xe3, 0xa6, 0xe8, 0xc4, 0x08, 0x92, 0x5a, 0x8f, 0x19, 0xc9, 0xe3, 0xda, 0x06,
	0xfd, 0x28, 0x9a, 0x0d, 0x41, 0x91, 0x77, 0x64, 0xc5, 0x12, 0xc9, 0xe1, 0xa5, 0x9c, 0x71, 0x57,
	0x59, 0x14, 0x05, 0xba, 0xeb, 0xa2, 0x8b, 0xfe, 0x80, 0x2e, 0xba, 0x29, 0x8a, 0x16, 0x28, 0x8a,
	0xfe, 0x81, 0xa2, 0x05, 0xba, 0xc8, 0x32, 0x2b, 0xa3, 0x51, 0x36, 0x5d, 0x06, 0x59, 0x74, 0x53,
	0x14, 0x28, 0xee, 0x83, 0xd4, 0x8b, 0xb2, 0x27, 0xc9, 0x74, 0xd1, 0x95, 0x79, 0xcf, 0x3d, 0xe7,
	0x3b, 0xe7, 0x9e, 0x7b, 0x5e, 0x57, 0x86, 0x75, 0xe2, 0x99, 0x9b, 0xe4, 0xcc, 0xf0, 0xb0, 0xb5,
	0x69, 0x5e, 0xf4, 0x48, 0x9b, 0xb8, 0x2d, 0xf1, 0x51, 0x76, 0x3d, 0xc7, 0x77, 0xd0, 0xbc, 0xfb,
	0xac, 0x1c, 0xec, 0x14, 0x96, 0xdb, 0x4e, 0xdb, 0x61, 0xf4, 0x4d, 0xfa, 0xc5, 0x59, 0x0a, 0xb7,
	0xdb, 0x8e, 0xd3, 0xee, 0xe2, 0x4d, 0xb6, 0x6a, 0xf5, 0x9f, 0x6c, 0x1a, 0xf6, 0xa5, 0xd8, 0x2a,
	0x4d, 0x6e, 0xf9, 0x9d, 0x1e, 0x26, 0xbe, 0xd1, 0x73, 0x03, 0x06, 0x6a, 0x80, 0xe1, 0x76, 0x38,
	0xc7, 0x66, 0xbf, 0xdf, 0xb1, 0xdc, 0x16, 0xfb, 0x23, 0x18, 0x5e, 0x1d, 0x67, 0xb8, 0xe8, 0xfc,
	0xa4, 0x83, 0x3d, 0xb7, 0x25, 0x3e, 0x0c, 0xb7, 0x23, 0xf8, 0x36, 0x46, 0x4e, 0x72, 0xfe, 0x80,
	0x6c, 0xf6, 0xb0, 0x6f, 0x58, 0x86, 0x6f, 0xb8, 0xad, 0xf0, 0x93, 0x73, 0xaa, 0x7f, 0x94, 0x60,
	0x45, 0xc3, 0xed, 0x0e, 0xf1, 0xb1, 0x77, 0xca, 0x50, 0x34, 0xfc, 0xb4, 0x8f, 0x89, 0x8f, 0xb6,
	0x21, 0xc3, 0x61, 0xf5, 0x8e, 0x95, 0x97, 0xd6, 0xa5, 0x8d, 0xf9, 0xad, 0x5c, 0xd9, 0x7d, 0x56,
	0xe6, 0x56, 0x95, 0x4f, 0x4e, 0x9a, 0xb5, 0x4a, 0x76, 0x70, 0x55, 0x92, 0xb9, 0x58, 0xb3, 0xa6,
	0xc9, 0x9c, 0xbf, 0x69, 0xa1, 0x35, 0x48, 0x7f, 0xf8, 0x91, 0xaf, 0x9f, 0xe3, 0xcb, 0x7c, 0x6c,
	0x5d, 0xda, 0xc8, 0x68, 0xa9, 0x0f, 0x3f, 0xf2, 0x1f, 0xe3, 0x4b, 0xb4, 0x03, 0x59, 0xb3, 0xdb,
	0xa7, 0xca, 0xf4, 0x8e, 0xfd, 0xc4, 0xc9, 0x27, 0x18, 0x6e, 0xb1, 0x3c, 0xe2, 0xd7, 0x32, 0xc7,
	0xab, 0x72, 0xb6, 0xa6, 0xfd, 0xc4, 0xd1, 0xe6, 0xcd, 0xe1, 0x62, 0x37, 0x21, 0xc7, 0x95, 0x84,
	0xfa, 0x4b, 0x09, 0x96, 0xa6, 0x18, 0xd1, 0x26, 0x04, 0xac, 0x7a, 0x5f, 0x58, 0x9d, 0xa9, 0x2c,
	0x0e, 0xae, 0x4a, 0x20, 0xb8, 0x4e, 0x9a, 0x35, 0x0d, 0x04, 0xcb, 0x49, 0xc7, 0x42, 0xf7, 0x86,
	0xf6, 0xd8, 0x46, 0x0f, 0x0b, 0x6b, 0x03, 0x90, 0x7d, 0xa3, 0x87, 0xd1, 0x2b, 0xb0, 0x28, 0xfc,
	0x70, 0x81, 0x3d, 0xd2, 0x71, 0x6c, 0x66, 0x74, 0x46, 0x5b, 0xe0, 0xd4, 0x53, 0x4e, 0x14, 0x66,
	0xfd, 0x4d, 0x82, 0xa5, 0x71, 0x77, 0xee, 0x98, 0xe7, 0xa8, 0x09, 0x29, 0xe2, 0x1b, 0x7e, 0x9f,
	0x30, 0x8b, 0x16, 0xb7, 0xde, 0x1a, 0x3b, 0xef, 0x14, 0xbf, 0xa0, 0x78, 0x86, 0xdf, 0x71, 0xec,
	0x23, 0x26, 0xa8, 0x09, 0x00, 0x54, 0x82, 0x79, 0x61, 0xcd, 0x88, 0xbd, 0xc0, 0x49, 0xd4, 0x5c,
	0xb5, 0x01, 0x68, 0x5a, 0x1c, 0x2d, 0x02, 0x1c, 0x1d, 0xeb, 0x27, 0xfb, 0x8f, 0xf7, 0x0f, 0x7e,
	0xb4, 0xaf, 0xcc, 0xa1, 0x0c, 0x24, 0x8f, 0x8e, 0xf5, 0x83, 0xc7, 0x8a, 0x84, 0xd6, 0xe0, 0xd6,
	0xd1, 0xb1, 0xfe, 0x70, 0xa7, 0xb9, 0x57, 0xaf, 0xe9, 0xfb, 0x07, 0xc7, 0xfa, 0xc3, 0x83, 0x93,
	0xfd, 0x9a, 0x12, 0x53, 0xff, 0x9e, 0x86, 0x1c, 0xb7, 0xa9, 0x81, 0x0d, 0xcf, 0x6f, 0x61, 0xe3,
	0x9b, 0x05, 0x05, 0x82, 0x04, 0x0d, 0x78, 0x66, 0x73, 0x5c, 0x63, 0xdf, 0xe8, 0x35, 0xc8, 0x11,
	0x1a, 0x6f, 0xb6, 0x89, 0x75, 0xbb, 0xdf, 0x6b, 0x61, 0x2f, 0x1f, 0x67, 0xdb, 0x8b, 0x01, 0x79,
	0x9f, 0x51, 0xd1, 0x21, 0x64, 0x5d, 0xc7, 0xd2, 0xb9, 0x17, 0x30, 0xc9, 0xa7, 0xd6, 0xe3, 0x1b,
	0xf3, 0x5b, 0xf7, 0x23, 0x02, 0x27, 0x34, 0xb6, 0x7c, 0xe8, 0x58, 0x47, 0x82, 0xbf, 0x6e, 0xfb,
	0xde, 0xa5, 0x36, 0xef, 0x0e, 0x29, 0xe8, 0xe7, 0x12, 0xdc, 0xeb, 0xdb, 0x67, 0xd8, 0xe8, 0xfa,
	0x67, 0x97, 0x3a, 0x4d, 0x09, 0xdd, 0xed, 0x1a, 0x36, 0xd6, 0xc7, 0xf4, 0xe4, 0x98, 0x9e, 0xf7,
	0xaf, 0xd5, 0x73, 0x12, 0xa0, 0xd4, 0x0c, 0xdf, 0x38, 0xa4, 0x18, 0x53, 0x9a, 0xef, 0xf6, 0xaf,
	0xe3, 0x41, 0xef, 0xc0, 0xed, 0x51, 0xad, 0x7a, 0xd7, 0x20, 0xbe, 0xde, 0x77, 0x2d, 0xc3, 0xc7,
	0x56, 0x3e, 0xcd, 0x1c, 0xb2, 0x3a, 0x62, 0xfb, 0x9e, 0x41, 0xfc, 0x13, 0xbe, 0x8b, 0xde, 0x0a,
	0x63, 0x4b, 0x66, 0xb1, 0x75, 0x3b, 0xc2, 0xd4, 0x89, 0x18, 0xfa, 0x16, 0x64, 0xec, 0x7e, 0x4f,
	0xb7, 0x1d, 0x0b, 0x93, 0xfc, 0xfc, 0xba, 0xb4, 0x91, 0xd4, 0x64, 0xbb, 0xdf, 0xdb, 0xa7, 0x6b,
	0xf4, 0x36, 0xac, 0xd2, 0xcd, 0x8e, 0x4d, 0x7c, 0xaf, 0xdf, 0xc3, 0xb6, 0x8f, 0x2d, 0xc1, 0x99,
	0x65, 0x9c, 0xcb, 0x76, 0xbf, 0xd7, 0x1c, 0xd9, 0xe4, 0x52, 0x65, 0xb8, 0x65, 0x75, 0x88, 0xd1,
	0xea, 0x62, 0xdd, 0xe8, 0xfb, 0x8e, 0xb0, 0x3d, 0xbf, 0xb0, 0x2e, 0x6d, 0xc8, 0xda, 0x92, 0xd8,
	0xda, 0xe9, 0xfb, 0x0e, 0x37, 0x9b, 0x26, 0x15, 0x37, 0x46, 0xef, 0x61, 0x42, 0x8c, 0x36, 0xce,
	0x2f, 0xf2, 0xa4, 0xe2, 0xd4, 0x1f, 0x72, 0x22, 0xaa, 0xc3, 0xad, 0xf3, 0x07, 0x44, 0x0f, 0x52,
	0x34, 0x48, 0x40, 0x85, 0xe5, 0xf5, 0xca, 0xe0, 0xaa, 0xb4, 0xf4, 0xf8, 0x01, 0x11, 0xa9, 0x2d,
	0x12, 0x51, 0x5b, 0x3a, 0x9f, 0x24, 0xa1, 0xd7, 0x41, 0x71, 0x5c, 0xec, 0x19, 0xbe, 0x33, 0xc4,
	0x58, 0x62, 0xfa, 0x72, 0x01, 0x5d, 0xb0, 0x16, 0x4e, 0x41, 0x99, 0xbc, 0x3c, 0xa4, 0x40, 0x9c,
	0x56, 0x32, 0x56, 0x4d, 0x34, 0xfa, 0x89, 0xde, 0x84, 0xe4, 0x85, 0xd1, 0xed, 0xf3, 0x58, 0x9e,
	0xdf, 0x5a, 0x1d, 0xf3, 0x79, 0x28, 0xaf, 0x71, 0xa6, 0xed, 0xd8, 0x03, 0xa9, 0x70, 0x06, 0xea,
	0xcd, 0x61, 0xf2, 0x22, 0x34, 0xed, 0x26, 0xe4, 0x84, 0x92, 0xdc, 0x4d, 0xc8, 0x49, 0x25, 0xb5,
	0x9b, 0x90, 0x33, 0x0a, 0xec, 0x26, 0x64, 0x50, 0xe6, 0xd5, 0x7f, 0xc5, 0x20, 0x13, 0x0a, 0xd0,
	0x64, 0x64, 0x05, 0x84, 0xab, 0x62, 0xdf, 0x68, 0x3b, 0x0c, 0xa5, 0x18, 0x0b, 0x25, 0x95, 0x2a,
	0xe3, 0x5d, 0xa4, 0x7c, 0xfe, 0x80, 0x94, 0x87, 0x5d, 0x84, 0x6a, 0x3e, 0x3c, 0x33, 0x08, 0x0e,
	0x63, 0x6a, 0xfa, 0x42, 0xe3, 0x51, 0x17, 0xba, 0x0a, 0x29, 0x0f, 0x1b, 0x24, 0x2c, 0xa2, 0x62,
	0x85, 0xde, 0x05, 0x30, 0x1d, 0xdb, 0x37, 0x3a, 0x36, 0xf6, 0x48, 0x3e, 0xc9, 0x92, 0xee, 0xce,
	0xd8, 0x59, 0xab, 0xc1, 0xb6, 0x38, 0xf1, 0x08, 0x3f, 0x6a, 0x00, 0x98, 0x1e, 0xa6, 0xe9, 0xa0,
	0x1b, 0x7e, 0x3e, 0xc5, 0x3c, 0x55, 0x28, 0xf3, 0x6e, 0x5b, 0x0e, 0xba, 0x6d, 0xf9, 0x38, 0xe8,
	0xb6, 0x95, 0x85, 0xc1, 0x55, 0x29, 0x53, 0xe5, 0x12, 0x3b, 0xbe, 0x96, 0x31, 0x83, 0x4f, 0x74,
	0x1f, 0x52, 0xf8, 0x02, 0xdb, 0x3e, 0xc9, 0xa7, 0x99, 0x0d, 0x2b, 0x63, 0x36, 0x3c, 0x7e, 0x40,
	0xea, 0x74, 0x57, 0x13, 0x4c, 0xe8, 0x25, 0x58, 0xf0, 0x28, 0xa6, 0xe7, 0xeb, 0xa6, 0xd3, 0xb7,
	0x7d, 0x96, 0x83, 0x71, 0x2d, 0x2b, 0x88, 0x55, 0x4a, 0x53, 0x7f, 0x25, 0x81, 0x1c, 0x48, 0xa2,
	0x3c, 0xa4, 0x03, 0x07, 0x71, 0xd7, 0x07, 0x4b, 0xf4, 0x0e, 0xc0, 0x93, 0x8e, 0x47, 0x7c, 0x3d,
	0x2c, 0x92, 0xd7, 0x1e, 0x42, 0xcb, 0x30, 0x6e, 0xba, 0x46, 0xdf, 0x87, 0x0c, 0xab, 0x18, 0x4c,
	0x32, 0x7e, 0xa3, 0xa4, 0x4c, 0x99, 0xe9, 0x52, 0xfd, 0x59, 0x0c, 0x72, 0x13, 0x8e, 0x8d, 0x8c,
	0x8c, 0xf7, 0x20, 0x49, 0xef, 0x11, 0x8b, 0xc0, 0xd8, 0x98, 0x1d, 0x18, 0x63, 0x68, 0x58, 0xe3,
	0x62, 0xa3, 0xa7, 0x8e, 0x8f, 0x9f, 0x7a, 0x56, 0x40, 0xbc, 0xb8, 0x2b, 0x9d, 0xba, 0xa3, 0x74,
	0xc4, 0x1d, 0xfd, 0x5b, 0x02, 0x34, 0x51, 0xd6, 0x69, 0xe3, 0x7e, 0x34, 0xd1, 0xb8, 0x37, 0xaf,
	0xeb, 0x03, 0xb4, 0x73, 0x87, 0x8b, 0x89, 0x92, 0xfb, 0x8d, 0x7a, 0xdf, 0x4b, 0xb0, 0x80, 0x3d,
	0xcf, 0xf1, 0xc2, 0xd4, 0xe2, 0xae, 0xca, 0x32, 0xa2, 0xc8, 0x2c, 0x75, 0x1b, 0x72, 0x13, 0xca,
	0x69, 0xd3, 0x6f, 0x54, 0xc6, 0x9b, 0x7e, 0xa3, 0xc2, 0x9b, 0x7e, 0x16, 0xe4, 0x46, 0x45, 0xaf,
	0x6b, 0xda, 0x81, 0xa6, 0xc4, 0xd4, 0x02, 0x64, 0xc5, 0x2c, 0xe5, 0xd8, 0x4f, 0x3a, 0xed, 0xdd,
	0x84, 0x2c, 0x29, 0xb1, 0xdd, 0x84, 0x1c, 0x53, 0xe2, 0xea, 0x7a, 0xe0, 0x18, 0xbe, 0xc7, 0xeb,
	0xf7, 0x18, 0xc7, 0xaf, 0x33, 0x00, 0xa2, 0xdd, 0xd3, 0x19, 0x6c, 0xf7, 0x39, 0x46, 0x84, 0x3b,
	0xa3, 0x23, 0xc2, 0x97, 0x57, 0xa5, 0xac, 0xd5, 0xda, 0x0e, 0x85, 0x46, 0x46, 0x86, 0xb7, 0x26,
	0x2a, 0xd2, 0x73, 0x34, 0xb7, 0x1d, 0x58, 0x62, 0xb9, 0x70, 0x16, 0x38, 0x43, 0xb7, 0x09, 0xf7,
	0x6b, 0x65, 0xe5, 0xcb, 0xab, 0xd2, 0x92, 0xd5, 0xda, 0x1e, 0xdf, 0xd7, 0x72, 0x74, 0x1d, 0xfa,
	0x6e, 0x9f, 0x50, 0xad, 0x26, 0x3b, 0xac, 0x18, 0x4f, 0xa3, 0xb4, 0x72, 0x6f, 0x68, 0x82, 0x71,
	0x72, 0xf0, 0x4c, 0x7e, 0xe5, 0xc1, 0x33, 0x35, 0x3d, 0x78, 0xbe, 0x06, 0xb9, 0xc9, 0xc6, 0x97,
	0x66, 0x5c, 0x8b, 0xe6, 0xd7, 0x6d, 0x6f, 0x11, 0xc3, 0xac, 0x1c, 0x31, 0xcc, 0xa2, 0xa7, 0x50,
	0xa0, 0xe5, 0xd5, 0x73, 0xba, 0x51, 0x33, 0x51, 0x86, 0x95, 0xc6, 0xb7, 0x23, 0xbc, 0x42, 0x03,
	0x80, 0x95, 0x00, 0xcf, 0xe9, 0x46, 0x0f, 0x42, 0x6b, 0x66, 0xf4, 0x2e, 0xfa, 0xe9, 0x73, 0x8d,
	0x63, 0x8b, 0x4c, 0xf5, 0xf6, 0x2c, 0xd5, 0xdf, 0x7c, 0x12, 0xfb, 0x1f, 0xcc, 0x46, 0xd3, 0xad,
	0x71, 0x21, 0xaa, 0x35, 0x56, 0x20, 0xe7, 0x7a, 0xf8, 0xa2, 0xe3, 0xf4, 0x89, 0x38, 0x6f, 0x3e,
	0x77, 0x53, 0xd0, 0x2f, 0x06, 0x12, 0x22, 0xe3, 0xf7, 0x60, 0x79, 0x02, 0x83, 0xf7, 0x04, 0xe5,
	0xc6, 0x9e, 0x80, 0xc6, 0x91, 0xe8, 0x46, 0xa1, 0x05, 0x77, 0xae, 0xbb, 0xcb, 0xff, 0xaf, 0xb9,
	0x48, 0xfd, 0xad, 0x04, 0xb7, 0x79, 0xf5, 0x1a, 0xcb, 0x60, 0xf1, 0xda, 0x7d, 0x91, 0x55, 0xab,
	0x06, 0x0b, 0xbc, 0x2c, 0x04, 0x63, 0x30, 0xb7, 0xb1, 0x34, 0xb3, 0x8c, 0x70, 0xb3, 0xb4, 0xac,
	0x39, 0xb2, 0x52, 0xef, 0x40, 0x21, 0xca, 0x5c, 0xe2, 0x3a, 0x36, 0xc1, 0xea, 0xef, 0x24, 0xb8,
	0xc3, 0xb7, 0x0f, 0x3c, 0x1a, 0x72, 0x46, 0xb7, 0xfb, 0xe2, 0x9e, 0xef, 0x79, 0x48, 0x07, 0xe5,
	0x81, 0x3f, 0x30, 0x83, 0x25, 0x5a, 0x86, 0xa4, 0xef, 0x9c, 0x63, 0x5b, 0xb4, 0x71, 0xbe, 0xe0,
	0x2d, 0xd6, 0xc2, 0x6e, 0xd7, 0xb9, 0xd4, 0xb1, 0x6f, 0x5a, 0xac, 0x6e, 0xca, 0xb4, 0xc5, 0x72,
	0x62, 0xdd, 0x37, 0x2d, 0xf5, 0x21, 0xdc, 0x9d, 0x61, 0x30, 0x3f, 0x12, 0xcd, 0x13, 0xee, 0x2f,
	0x9d, 0x35, 0x66, 0xcc, 0xcd, 0x96, 0xb5, 0x05, 0x4e, 0x3d, 0xe2, 0x44, 0x75, 0x0b, 0x96, 0x43,
	0x8f, 0xd8, 0xd8, 0xa4, 0x8f, 0x5c, 0xd6, 0x77, 0x42, 0xd3, 0x62, 0x23, 0xa6, 0xf1, 0x46, 0xa5,
	0xde, 0x83, 0xf9, 0xd3, 0x3d, 0xa7, 0x1d, 0xa4, 0x1a, 0x82, 0x04, 0x2d, 0x30, 0x0c, 0x3f, 0xab,
	0xb1, 0x6f, 0xf5, 0x2f, 0x09, 0xb8, 0x55, 0xdd, 0x3a, 0xdd, 0x39, 0x6c, 0x1e, 0xf9, 0x1e, 0x36,
	0x7a, 0x81, 0x1f, 0xdf, 0x04, 0xf0, 0xf8, 0xa7, 0x1e, 0xfe, 0xa2, 0xc0, 0x86, 0x0d, 0xc1, 0xd0,
	0xac, 0x69, 0x19, 0xc1, 0xd0, 0xb4, 0xa2, 0x8d, 0x40, 0x15, 0x90, 0xf1, 0x33, 0x6c, 0xea, 0x1e,
	0x7e, 0x2a, 0xc6, 0xb3, 0x57, 0xe8, 0x55, 0x18, 0x6e, 0xa7, 0x1c, 0xfc, 0x84, 0x53, 0xae, 0x3f,
	0xc3, 0x66, 0xdf, 0xc7, 0x47, 0xa6, 0xd7, 0x71, 0x7d, 0x81, 0xdd, 0x98, 0xd3, 0xd2, 0x54, 0x50,
	0xc3, 0x4f, 0xd1, 0xbb, 0x90, 0x3a, 0xe3, 0x08, 0xbc, 0x29, 0xbd, 0x34, 0x85, 0xd0, 0x60, 0x59,
	0x54, 0x3d, 0xc3, 0xe6, 0xf9, 0x50, 0x3e, 0x79, 0xc6, 0xa4, 0x7f, 0x00, 0x60, 0x1a, 0xb6, 0x89,
	0xbb, 0x0c, 0x21, 0x19, 0x11, 0x8f, 0xa3, 0x67, 0xaf, 0x32, 0xd6, 0xc6, 0x9c, 0x96, 0xe1, 0x42,
	0x14, 0xe1, 0x21, 0x2c, 0x58, 0xb8, 0xd5, 0x6f, 0xeb, 0x5d, 0xa7, 0xcd, 0x40, 0x64, 0x06, 0xb2,
	0x3e, 0x65, 0x46, 0x8d, 0x72, 0xed, 0x39, 0xed, 0xa1, 0x0d, 0xf3, 0xd6, 0x90, 0x84, 0x9a, 0xb0,
	0xc8, 0x71, 0x5c, 0xc7, 0x22, 0x0c, 0x28, 0xc3, 0x80, 0xee, 0x45, 0x03, 0x1d, 0x3a, 0x16, 0x19,
	0x22, 0x65, 0xad, 0x11, 0x1a, 0xfa, 0x58, 0x82, 0x7c, 0x1b, 0xdb, 0xb4, 0xc3, 0x61, 0xdd, 0xf1,
	0x71, 0x57, 0x27, 0xcc, 0x7b, 0x0c, 0x15, 0x18, 0xea, 0x1b, 0x53, 0xa8, 0x8f, 0x84, 0xc0, 0xc1,
	0x31, 0xee, 0x8e, 0x39, 0xbb, 0x72, 0x7b, 0x70, 0x55, 0x5a, 0x89, 0xdc, 0x6e, 0xcc, 0x69, 0x2b,
	0x81, 0xa2, 0x03, 0x7f, 0x64, 0xa3, 0x92, 0x84, 0x78, 0x8f, 0xd0, 0x81, 0x29, 0xa5, 0xa4, 0x77,
	0x13, 0x72, 0x5a, 0x91, 0xd5, 0x65, 0x40, 0xd3, 0xbe, 0x54, 0xff, 0x90, 0x80, 0xe5, 0xd3, 0xad,
	0xea, 0x48, 0x78, 0x89, 0xa8, 0xff, 0x6a, 0xf1, 0x55, 0x87, 0x8c, 0x88, 0x24, 0xe2, 0x8a, 0xb2,
	0xf2, 0xea, 0x4d, 0xa1, 0xc4, 0x15, 0x35, 0xe6, 0x34, 0x99, 0xc7, 0x12, 0x71, 0xd1, 0xfb, 0x90,
	0x3e, 0x13, 0x20, 0x3c, 0x1e, 0x5f, 0xbe, 0x3e, 0x9a, 0x42, 0x88, 0xd4, 0x19, 0x07, 0x18, 0x0e,
	0x66, 0x3c, 0x1a, 0xd7, 0xa6, 0xe4, 0x79, 0x01, 0xa6, 0x22, 0x62, 0x30, 0x0b, 0x2f, 0x9e, 0x07,
	0x10, 0x71, 0xd9, 0x34, 0x33, 0xf3, 0xe2, 0x59, 0xb8, 0x84, 0x7a, 0xb3, 0xd6, 0x08, 0x0d, 0xed,
	0x41, 0x6e, 0x2c, 0x86, 0x88, 0x2b, 0xa2, 0x51, 0xbd, 0x2e, 0x88, 0x42, 0xb0, 0x05, 0x6b, 0x94,
	0x48, 0x27, 0x8f, 0xdb, 0x33, 0xc2, 0x88, 0xb8, 0x22, 0x3a, 0xbf, 0xfd, 0x5c, 0x71, 0xc4, 0x35,
	0x54, 0x0a, 0x83, 0xab, 0xd2, 0x6a, 0xf4, 0x7e, 0x63, 0x4e, 0x5b, 0x8d, 0x8a, 0x24, 0xe2, 0x0e,
	0x43, 0x89, 0x3f, 0xdc, 0x53, 0x4a, 0x9a, 0x16, 0x79, 0x38, 0xdd, 0xaa, 0x06, 0x65, 0xeb, 0xf5,
	0xc9, 0x92, 0x9e, 0x99, 0x59, 0xc1, 0x27, 0xe6, 0xd1, 0xd8, 0x8d, 0xf3, 0xe8, 0x5d, 0x00, 0x82,
	0x09, 0xad, 0xf1, 0x14, 0x9c, 0xbf, 0x43, 0x32, 0x82, 0xd2, 0xb4, 0xd0, 0xab, 0xcc, 0x38, 0x71,
	0xd9, 0xcb, 0x53, 0x73, 0xc4, 0x8e, 0x7d, 0xa9, 0x51, 0x06, 0x55, 0x07, 0xa8, 0x6e, 0x9d, 0x7e,
	0x0d, 0x83, 0x85, 0x82, 0xd8, 0x4d, 0x0a, 0x7e, 0x2f, 0x01, 0x54, 0x3d, 0xc7, 0xe6, 0x8e, 0x43,
	0xaf, 0x41, 0x6c, 0x76, 0x7b, 0x4b, 0x0d, 0xae, 0x4a, 0xb1, 0x66, 0x4d, 0x8b, 0x75, 0x2c, 0xfa,
	0xce, 0xe4, 0xb7, 0x1a, 0xfc, 0x20, 0x4d, 0x02, 0x80, 0x9c, 0xe9, 0x39, 0xb6, 0x8e, 0x9f, 0xb9,
	0x1e, 0x3f, 0xad, 0x68, 0x6d, 0x8b, 0x94, 0x5c, 0x0f, 0xa9, 0xb4, 0x27, 0xf2, 0xf6, 0x4c, 0xc4,
	0xf3, 0x2b, 0x58, 0xa2, 0x12, 0xcc, 0x3f, 0xf1, 0xf8, 0x8b, 0xed, 0x52, 0x27, 0xac, 0xb8, 0xc6,
	0x35, 0x08, 0x49, 0x47, 0xea, 0xf7, 0xe0, 0xee, 0x23, 0xec, 0x0f, 0xad, 0x26, 0x2c, 0xab, 0x48,
	0x3f, 0xec, 0x31, 0xac, 0x6b, 0xb8, 0x1d, 0x53, 0x0c, 0x38, 0x7c, 0xa1, 0xbe, 0x0b, 0xc5, 0x59,
	0x62, 0xa2, 0x76, 0x14, 0x40, 0x36, 0x05, 0x4d, 0x88, 0x86, 0x6b, 0xf5, 0x3e, 0xac, 0x8c, 0x4b,
	0x5f, 0xaf, 0xec, 0xcf, 0x12, 0xac, 0x4e, 0xf2, 0x0b, 0x2d, 0xbb, 0x90, 0xe6, 0xce, 0xa2, 0xaf,
	0x60, 0x3a, 0x7e, 0x7f, 0x67, 0xac, 0x71, 0x44, 0x4b, 0x95, 0xc5, 0x9a, 0x0f, 0xdd, 0x01, 0x40,
	0xe1, 0x08, 0xb2, 0xa3, 0x1b, 0x11, 0x83, 0xdd, 0xfd, 0xf1, 0xc1, 0x6e, 0x6d, 0xbc, 0x49, 0x85,
	0x8a, 0x46, 0x27, 0xbb, 0x63, 0xb8, 0x17, 0xfc, 0x86, 0x7e, 0xe0, 0xf1, 0x19, 0x63, 0x84, 0x51,
	0x1c, 0x7b, 0x33, 0x0c, 0x00, 0xe9, 0x7a, 0x60, 0xc1, 0xa6, 0xbe, 0x0c, 0xea, 0x75, 0xa8, 0x62,
	0x0e, 0x3b, 0x81, 0xb5, 0x1a, 0xee, 0xe2, 0x28, 0x8d, 0xdb, 0x90, 0x11, 0x85, 0xe4, 0x86, 0x09,
	0x8c, 0x8b, 0xd1, 0x74, 0xe0, 0xfc, 0x4d, 0x4b, 0x2d, 0x40, 0x7e, 0x1a, 0x56, 0xa8, 0xfc, 0x8f,
	0x04, 0xca, 0x90, 0x2c, 0x7e, 0x50, 0x3d, 0x00, 0xe8, 0xbb, 0x04, 0x7b, 0xbc, 0xf9, 0x71, 0x6d,
	0xe5, 0xc8, 0x7f, 0x33, 0xcc, 0x74, 0x11, 0xed, 0xf7, 0x1c, 0x83, 0x36, 0xd7, 0x3a, 0x80, 0xc5,
	0x2c, 0x60, 0x80, 0xb1, 0x61, 0x97, 0x08, 0x01, 0x67, 0x9c, 0x9b, 0xc2, 0x70, 0x49, 0x0a, 0x33,
	0xde, 0xde, 0xe2, 0x37, 0xb4, 0xb7, 0x3b, 0x90, 0x09, 0xff, 0x27, 0xc6, 0xd2, 0x2c, 0xae, 0x0d,
	0x09, 0xa2, 0x42, 0xbe, 0xf1, 0x27, 0x29, 0xf8, 0xb9, 0x42, 0xbc, 0x7a, 0x96, 0x60, 0xe1, 0xf4,
	0x03, 0x7d, 0xec, 0xff, 0x1b, 0x21, 0xa9, 0x51, 0xdf, 0xd9, 0x3b, 0x6e, 0xfc, 0x58, 0x91, 0xd0,
	0x2d, 0xc8, 0x05, 0x5c, 0x01, 0x31, 0x86, 0x56, 0x01, 0x71, 0x62, 0xad, 0x79, 0x54, 0x3d, 0xd8,
	0xdf, 0xaf, 0x57, 0x8f, 0xeb, 0x35, 0x25, 0x8e, 0x10, 0x2c, 0x0a, 0xe6, 0xc3, 0xda, 0xce, 0x71,
	0x73, 0xff, 0x91, 0x92, 0x18, 0x02, 0x0c, 0x19, 0x93, 0x68, 0x0d, 0x6e, 0x8d, 0x30, 0xd6, 0xc5,
	0xff, 0x51, 0x94, 0xd4, 0x10, 0xa1, 0x56, 0x7f, 0xa4, 0xed, 0xd4, 0xea, 0x35, 0x25, 0x5d, 0x79,
	0xef, 0x93, 0xcf, 0x8a, 0x73, 0x9f, 0x7e, 0x56, 0x9c, 0xfb, 0xe2, 0xb3, 0xa2, 0xf4, 0xf1, 0xa0,
	0x28, 0xfd, 0x66, 0x50, 0x94, 0xfe, 0x3a, 0x28, 0x4a, 0x9f, 0x0c, 0x8a, 0xd2, 0x3f, 0x06, 0x45,
	0xe9, 0x9f, 0x83, 0xe2, 0xdc, 0x17, 0x83, 0xa2, 0xf4, 0x8b, 0xcf, 0x8b, 0x73, 0x9f, 0x7c, 0x5e,
	0x9c, 0xfb, 0xf4, 0xf3, 0xe2, 0xdc, 0x07, 0x72, 0xe0, 0xf1, 0x56, 0x8a, 0xd5, 0xc3, 0xef, 0xfe,
	0x37, 0x00, 0x00, 0xff, 0xff, 0xee, 0x19, 0x61, 0x4d, 0xa9, 0x1c, 0x00, 0x00,
}

func (x VizierStatus) String() string {
	s, ok := VizierStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RegisterVizierAck_RegistrationStatus) String() string {
	s, ok := RegisterVizierAck_RegistrationStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VizierHeartbeatAck_HeartbeatStatus) String() string {
	s, ok := VizierHeartbeatAck_HeartbeatStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RegisterVizierRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterVizierRequest)
	if !ok {
		that2, ok := that.(RegisterVizierRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if this.JwtKey != that1.JwtKey {
		return false
	}
	if !this.ClusterInfo.Equal(that1.ClusterInfo) {
		return false
	}
	return true
}
func (this *VizierClusterInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierClusterInfo)
	if !ok {
		that2, ok := that.(VizierClusterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterUID != that1.ClusterUID {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.VizierVersion != that1.VizierVersion {
		return false
	}
	return true
}
func (this *RegisterVizierAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterVizierAck)
	if !ok {
		that2, ok := that.(RegisterVizierAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.VizierName != that1.VizierName {
		return false
	}
	return true
}
func (this *VizierHeartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierHeartbeat)
	if !ok {
		that2, ok := that.(VizierHeartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	if len(this.PodStatuses) != len(that1.PodStatuses) {
		return false
	}
	for i := range this.PodStatuses {
		if !this.PodStatuses[i].Equal(that1.PodStatuses[i]) {
			return false
		}
	}
	if len(this.UnhealthyDataPlanePodStatuses) != len(that1.UnhealthyDataPlanePodStatuses) {
		return false
	}
	for i := range this.UnhealthyDataPlanePodStatuses {
		if !this.UnhealthyDataPlanePodStatuses[i].Equal(that1.UnhealthyDataPlanePodStatuses[i]) {
			return false
		}
	}
	if this.PodStatusesLastUpdated != that1.PodStatusesLastUpdated {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.NumNodes != that1.NumNodes {
		return false
	}
	if this.NumInstrumentedNodes != that1.NumInstrumentedNodes {
		return false
	}
	if this.DisableAutoUpdate != that1.DisableAutoUpdate {
		return false
	}
	if this.StatusMessage != that1.StatusMessage {
		return false
	}
	if this.K8sClusterVersion != that1.K8sClusterVersion {
		return false
	}
	if this.OperatorVersion != that1.OperatorVersion {
		return false
	}
	return true
}
func (this *PodStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatus)
	if !ok {
		that2, ok := that.(PodStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.StatusMessage != that1.StatusMessage {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if len(this.Containers) != len(that1.Containers) {
		return false
	}
	for i := range this.Containers {
		if !this.Containers[i].Equal(that1.Containers[i]) {
			return false
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	if this.RestartCount != that1.RestartCount {
		return false
	}
	return true
}
func (this *K8SEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SEvent)
	if !ok {
		that2, ok := that.(K8SEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.FirstTime.Equal(that1.FirstTime) {
		return false
	}
	if !this.LastTime.Equal(that1.LastTime) {
		return false
	}
	return true
}
func (this *ContainerStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerStatus)
	if !ok {
		that2, ok := that.(ContainerStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.RestartCount != that1.RestartCount {
		return false
	}
	return true
}
func (this *VizierHeartbeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierHeartbeatAck)
	if !ok {
		that2, ok := that.(VizierHeartbeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *VizierConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierConfig)
	if !ok {
		that2, ok := that.(VizierConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VizierConfigUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierConfigUpdate)
	if !ok {
		that2, ok := that.(VizierConfigUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VizierInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierInfo)
	if !ok {
		that2, ok := that.(VizierInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LastHeartbeatNs != that1.LastHeartbeatNs {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if this.ClusterUID != that1.ClusterUID {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.ClusterVersion != that1.ClusterVersion {
		return false
	}
	if this.OperatorVersion != that1.OperatorVersion {
		return false
	}
	if this.VizierVersion != that1.VizierVersion {
		return false
	}
	if len(this.ControlPlanePodStatuses) != len(that1.ControlPlanePodStatuses) {
		return false
	}
	for i := range this.ControlPlanePodStatuses {
		if !this.ControlPlanePodStatuses[i].Equal(that1.ControlPlanePodStatuses[i]) {
			return false
		}
	}
	if len(this.UnhealthyDataPlanePodStatuses) != len(that1.UnhealthyDataPlanePodStatuses) {
		return false
	}
	for i := range this.UnhealthyDataPlanePodStatuses {
		if !this.UnhealthyDataPlanePodStatuses[i].Equal(that1.UnhealthyDataPlanePodStatuses[i]) {
			return false
		}
	}
	if this.NumNodes != that1.NumNodes {
		return false
	}
	if this.NumInstrumentedNodes != that1.NumInstrumentedNodes {
		return false
	}
	if this.StatusMessage != that1.StatusMessage {
		return false
	}
	if this.PreviousStatus != that1.PreviousStatus {
		return false
	}
	if !this.PreviousStatusTime.Equal(that1.PreviousStatusTime) {
		return false
	}
	return true
}
func (this *UpdateVizierConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateVizierConfigRequest)
	if !ok {
		that2, ok := that.(UpdateVizierConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if !this.ConfigUpdate.Equal(that1.ConfigUpdate) {
		return false
	}
	return true
}
func (this *UpdateVizierConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateVizierConfigResponse)
	if !ok {
		that2, ok := that.(UpdateVizierConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateOrInstallVizierRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrInstallVizierRequest)
	if !ok {
		that2, ok := that.(UpdateOrInstallVizierRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.RedeployEtcd != that1.RedeployEtcd {
		return false
	}
	return true
}
func (this *UpdateOrInstallVizierResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrInstallVizierResponse)
	if !ok {
		that2, ok := that.(UpdateOrInstallVizierResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UpdateStarted != that1.UpdateStarted {
		return false
	}
	return true
}
func (this *VizierConnectionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierConnectionInfo)
	if !ok {
		that2, ok := that.(VizierConnectionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *VLogMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VLogMessage)
	if !ok {
		that2, ok := that.(VLogMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_ExecReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_ExecReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_ExecReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecReq.Equal(that1.ExecReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_HcReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_HcReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_HcReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HcReq.Equal(that1.HcReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_CancelReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_CancelReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_CancelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelReq.Equal(that1.CancelReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_DebugLogReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_DebugLogReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_DebugLogReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DebugLogReq.Equal(that1.DebugLogReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_DebugPodsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_DebugPodsReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_DebugPodsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DebugPodsReq.Equal(that1.DebugPodsReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_GenerateOTelScriptReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_GenerateOTelScriptReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_GenerateOTelScriptReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GenerateOTelScriptReq.Equal(that1.GenerateOTelScriptReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamCancel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamCancel)
	if !ok {
		that2, ok := that.(C2VAPIStreamCancel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_ExecResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_ExecResp)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_ExecResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecResp.Equal(that1.ExecResp) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_HcResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_HcResp)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_HcResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HcResp.Equal(that1.HcResp) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_Status)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_DebugLogResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_DebugLogResp)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_DebugLogResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DebugLogResp.Equal(that1.DebugLogResp) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_DebugPodsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_DebugPodsResp)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_DebugPodsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DebugPodsResp.Equal(that1.DebugPodsResp) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_GenerateOTelScriptResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_GenerateOTelScriptResp)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_GenerateOTelScriptResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GenerateOTelScriptResp.Equal(that1.GenerateOTelScriptResp) {
		return false
	}
	return true
}
func (this *V2CMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CMessage)
	if !ok {
		that2, ok := that.(V2CMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VizierID != that1.VizierID {
		return false
	}
	if this.ClusterUID != that1.ClusterUID {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *C2VMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VMessage)
	if !ok {
		that2, ok := that.(C2VMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VizierID != that1.VizierID {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *CronScript) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CronScript)
	if !ok {
		that2, ok := that.(CronScript)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Script != that1.Script {
		return false
	}
	if this.CronExpression != that1.CronExpression {
		return false
	}
	if this.Configs != that1.Configs {
		return false
	}
	if this.FrequencyS != that1.FrequencyS {
		return false
	}
	return true
}
func (this *GetCronScriptsChecksumRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCronScriptsChecksumRequest)
	if !ok {
		that2, ok := that.(GetCronScriptsChecksumRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *GetCronScriptsChecksumResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCronScriptsChecksumResponse)
	if !ok {
		that2, ok := that.(GetCronScriptsChecksumResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Checksum != that1.Checksum {
		return false
	}
	return true
}
func (this *GetCronScriptsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCronScriptsRequest)
	if !ok {
		that2, ok := that.(GetCronScriptsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *GetCronScriptsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCronScriptsResponse)
	if !ok {
		that2, ok := that.(GetCronScriptsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Scripts) != len(that1.Scripts) {
		return false
	}
	for i := range this.Scripts {
		if !this.Scripts[i].Equal(that1.Scripts[i]) {
			return false
		}
	}
	return true
}
func (this *RegisterOrUpdateCronScriptRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterOrUpdateCronScriptRequest)
	if !ok {
		that2, ok := that.(RegisterOrUpdateCronScriptRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Script.Equal(that1.Script) {
		return false
	}
	return true
}
func (this *RegisterOrUpdateCronScriptResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterOrUpdateCronScriptResponse)
	if !ok {
		that2, ok := that.(RegisterOrUpdateCronScriptResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteCronScriptRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCronScriptRequest)
	if !ok {
		that2, ok := that.(DeleteCronScriptRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScriptID.Equal(that1.ScriptID) {
		return false
	}
	return true
}
func (this *DeleteCronScriptResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCronScriptResponse)
	if !ok {
		that2, ok := that.(DeleteCronScriptResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CronScriptUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CronScriptUpdate)
	if !ok {
		that2, ok := that.(CronScriptUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *CronScriptUpdate_UpsertReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CronScriptUpdate_UpsertReq)
	if !ok {
		that2, ok := that.(CronScriptUpdate_UpsertReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpsertReq.Equal(that1.UpsertReq) {
		return false
	}
	return true
}
func (this *CronScriptUpdate_DeleteReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CronScriptUpdate_DeleteReq)
	if !ok {
		that2, ok := that.(CronScriptUpdate_DeleteReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeleteReq.Equal(that1.DeleteReq) {
		return false
	}
	return true
}
func (this *RegisterVizierRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cvmsgspb.RegisterVizierRequest{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "JwtKey: "+fmt.Sprintf("%#v", this.JwtKey)+",\n")
	if this.ClusterInfo != nil {
		s = append(s, "ClusterInfo: "+fmt.Sprintf("%#v", this.ClusterInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierClusterInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cvmsgspb.VizierClusterInfo{")
	s = append(s, "ClusterUID: "+fmt.Sprintf("%#v", this.ClusterUID)+",\n")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "VizierVersion: "+fmt.Sprintf("%#v", this.VizierVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterVizierAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.RegisterVizierAck{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "VizierName: "+fmt.Sprintf("%#v", this.VizierName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierHeartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&cvmsgspb.VizierHeartbeat{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	keysForPodStatuses := make([]string, 0, len(this.PodStatuses))
	for k, _ := range this.PodStatuses {
		keysForPodStatuses = append(keysForPodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPodStatuses)
	mapStringForPodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForPodStatuses {
		mapStringForPodStatuses += fmt.Sprintf("%#v: %#v,", k, this.PodStatuses[k])
	}
	mapStringForPodStatuses += "}"
	if this.PodStatuses != nil {
		s = append(s, "PodStatuses: "+mapStringForPodStatuses+",\n")
	}
	keysForUnhealthyDataPlanePodStatuses := make([]string, 0, len(this.UnhealthyDataPlanePodStatuses))
	for k, _ := range this.UnhealthyDataPlanePodStatuses {
		keysForUnhealthyDataPlanePodStatuses = append(keysForUnhealthyDataPlanePodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUnhealthyDataPlanePodStatuses)
	mapStringForUnhealthyDataPlanePodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForUnhealthyDataPlanePodStatuses {
		mapStringForUnhealthyDataPlanePodStatuses += fmt.Sprintf("%#v: %#v,", k, this.UnhealthyDataPlanePodStatuses[k])
	}
	mapStringForUnhealthyDataPlanePodStatuses += "}"
	if this.UnhealthyDataPlanePodStatuses != nil {
		s = append(s, "UnhealthyDataPlanePodStatuses: "+mapStringForUnhealthyDataPlanePodStatuses+",\n")
	}
	s = append(s, "PodStatusesLastUpdated: "+fmt.Sprintf("%#v", this.PodStatusesLastUpdated)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "NumNodes: "+fmt.Sprintf("%#v", this.NumNodes)+",\n")
	s = append(s, "NumInstrumentedNodes: "+fmt.Sprintf("%#v", this.NumInstrumentedNodes)+",\n")
	s = append(s, "DisableAutoUpdate: "+fmt.Sprintf("%#v", this.DisableAutoUpdate)+",\n")
	s = append(s, "StatusMessage: "+fmt.Sprintf("%#v", this.StatusMessage)+",\n")
	s = append(s, "K8sClusterVersion: "+fmt.Sprintf("%#v", this.K8sClusterVersion)+",\n")
	s = append(s, "OperatorVersion: "+fmt.Sprintf("%#v", this.OperatorVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&cvmsgspb.PodStatus{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "StatusMessage: "+fmt.Sprintf("%#v", this.StatusMessage)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	if this.Containers != nil {
		s = append(s, "Containers: "+fmt.Sprintf("%#v", this.Containers)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "RestartCount: "+fmt.Sprintf("%#v", this.RestartCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *K8SEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cvmsgspb.K8SEvent{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.FirstTime != nil {
		s = append(s, "FirstTime: "+fmt.Sprintf("%#v", this.FirstTime)+",\n")
	}
	if this.LastTime != nil {
		s = append(s, "LastTime: "+fmt.Sprintf("%#v", this.LastTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContainerStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&cvmsgspb.ContainerStatus{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "RestartCount: "+fmt.Sprintf("%#v", this.RestartCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierHeartbeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.VizierHeartbeatAck{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cvmsgspb.VizierConfig{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierConfigUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cvmsgspb.VizierConfigUpdate{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&cvmsgspb.VizierInfo{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "LastHeartbeatNs: "+fmt.Sprintf("%#v", this.LastHeartbeatNs)+",\n")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "ClusterUID: "+fmt.Sprintf("%#v", this.ClusterUID)+",\n")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "ClusterVersion: "+fmt.Sprintf("%#v", this.ClusterVersion)+",\n")
	s = append(s, "OperatorVersion: "+fmt.Sprintf("%#v", this.OperatorVersion)+",\n")
	s = append(s, "VizierVersion: "+fmt.Sprintf("%#v", this.VizierVersion)+",\n")
	keysForControlPlanePodStatuses := make([]string, 0, len(this.ControlPlanePodStatuses))
	for k, _ := range this.ControlPlanePodStatuses {
		keysForControlPlanePodStatuses = append(keysForControlPlanePodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForControlPlanePodStatuses)
	mapStringForControlPlanePodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForControlPlanePodStatuses {
		mapStringForControlPlanePodStatuses += fmt.Sprintf("%#v: %#v,", k, this.ControlPlanePodStatuses[k])
	}
	mapStringForControlPlanePodStatuses += "}"
	if this.ControlPlanePodStatuses != nil {
		s = append(s, "ControlPlanePodStatuses: "+mapStringForControlPlanePodStatuses+",\n")
	}
	keysForUnhealthyDataPlanePodStatuses := make([]string, 0, len(this.UnhealthyDataPlanePodStatuses))
	for k, _ := range this.UnhealthyDataPlanePodStatuses {
		keysForUnhealthyDataPlanePodStatuses = append(keysForUnhealthyDataPlanePodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUnhealthyDataPlanePodStatuses)
	mapStringForUnhealthyDataPlanePodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForUnhealthyDataPlanePodStatuses {
		mapStringForUnhealthyDataPlanePodStatuses += fmt.Sprintf("%#v: %#v,", k, this.UnhealthyDataPlanePodStatuses[k])
	}
	mapStringForUnhealthyDataPlanePodStatuses += "}"
	if this.UnhealthyDataPlanePodStatuses != nil {
		s = append(s, "UnhealthyDataPlanePodStatuses: "+mapStringForUnhealthyDataPlanePodStatuses+",\n")
	}
	s = append(s, "NumNodes: "+fmt.Sprintf("%#v", this.NumNodes)+",\n")
	s = append(s, "NumInstrumentedNodes: "+fmt.Sprintf("%#v", this.NumInstrumentedNodes)+",\n")
	s = append(s, "StatusMessage: "+fmt.Sprintf("%#v", this.StatusMessage)+",\n")
	s = append(s, "PreviousStatus: "+fmt.Sprintf("%#v", this.PreviousStatus)+",\n")
	if this.PreviousStatusTime != nil {
		s = append(s, "PreviousStatusTime: "+fmt.Sprintf("%#v", this.PreviousStatusTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateVizierConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.UpdateVizierConfigRequest{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	if this.ConfigUpdate != nil {
		s = append(s, "ConfigUpdate: "+fmt.Sprintf("%#v", this.ConfigUpdate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateVizierConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cvmsgspb.UpdateVizierConfigResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOrInstallVizierRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.UpdateOrInstallVizierRequest{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "RedeployEtcd: "+fmt.Sprintf("%#v", this.RedeployEtcd)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOrInstallVizierResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.UpdateOrInstallVizierResponse{")
	s = append(s, "UpdateStarted: "+fmt.Sprintf("%#v", this.UpdateStarted)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierConnectionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.VizierConnectionInfo{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VLogMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.VLogMessage{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2VAPIStreamRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&cvmsgspb.C2VAPIStreamRequest{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2VAPIStreamRequest_ExecReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_ExecReq{` +
		`ExecReq:` + fmt.Sprintf("%#v", this.ExecReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamRequest_HcReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_HcReq{` +
		`HcReq:` + fmt.Sprintf("%#v", this.HcReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamRequest_CancelReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_CancelReq{` +
		`CancelReq:` + fmt.Sprintf("%#v", this.CancelReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamRequest_DebugLogReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_DebugLogReq{` +
		`DebugLogReq:` + fmt.Sprintf("%#v", this.DebugLogReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamRequest_DebugPodsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_DebugPodsReq{` +
		`DebugPodsReq:` + fmt.Sprintf("%#v", this.DebugPodsReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamRequest_GenerateOTelScriptReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_GenerateOTelScriptReq{` +
		`GenerateOTelScriptReq:` + fmt.Sprintf("%#v", this.GenerateOTelScriptReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamCancel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cvmsgspb.C2VAPIStreamCancel{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *V2CAPIStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&cvmsgspb.V2CAPIStreamResponse{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *V2CAPIStreamResponse_ExecResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_ExecResp{` +
		`ExecResp:` + fmt.Sprintf("%#v", this.ExecResp) + `}`}, ", ")
	return s
}
func (this *V2CAPIStreamResponse_HcResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_HcResp{` +
		`HcResp:` + fmt.Sprintf("%#v", this.HcResp) + `}`}, ", ")
	return s
}
func (this *V2CAPIStreamResponse_Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_Status{` +
		`Status:` + fmt.Sprintf("%#v", this.Status) + `}`}, ", ")
	return s
}
func (this *V2CAPIStreamResponse_DebugLogResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_DebugLogResp{` +
		`DebugLogResp:` + fmt.Sprintf("%#v", this.DebugLogResp) + `}`}, ", ")
	return s
}
func (this *V2CAPIStreamResponse_DebugPodsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_DebugPodsResp{` +
		`DebugPodsResp:` + fmt.Sprintf("%#v", this.DebugPodsResp) + `}`}, ", ")
	return s
}
func (this *V2CAPIStreamResponse_GenerateOTelScriptResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_GenerateOTelScriptResp{` +
		`GenerateOTelScriptResp:` + fmt.Sprintf("%#v", this.GenerateOTelScriptResp) + `}`}, ", ")
	return s
}
func (this *V2CMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.V2CMessage{")
	s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	s = append(s, "ClusterUID: "+fmt.Sprintf("%#v", this.ClusterUID)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2VMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.C2VMessage{")
	s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CronScript) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cvmsgspb.CronScript{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Script: "+fmt.Sprintf("%#v", this.Script)+",\n")
	s = append(s, "CronExpression: "+fmt.Sprintf("%#v", this.CronExpression)+",\n")
	s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	s = append(s, "FrequencyS: "+fmt.Sprintf("%#v", this.FrequencyS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCronScriptsChecksumRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.GetCronScriptsChecksumRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCronScriptsChecksumResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.GetCronScriptsChecksumResponse{")
	s = append(s, "Checksum: "+fmt.Sprintf("%#v", this.Checksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCronScriptsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.GetCronScriptsRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCronScriptsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.GetCronScriptsResponse{")
	keysForScripts := make([]string, 0, len(this.Scripts))
	for k, _ := range this.Scripts {
		keysForScripts = append(keysForScripts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScripts)
	mapStringForScripts := "map[string]*CronScript{"
	for _, k := range keysForScripts {
		mapStringForScripts += fmt.Sprintf("%#v: %#v,", k, this.Scripts[k])
	}
	mapStringForScripts += "}"
	if this.Scripts != nil {
		s = append(s, "Scripts: "+mapStringForScripts+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterOrUpdateCronScriptRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.RegisterOrUpdateCronScriptRequest{")
	if this.Script != nil {
		s = append(s, "Script: "+fmt.Sprintf("%#v", this.Script)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterOrUpdateCronScriptResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cvmsgspb.RegisterOrUpdateCronScriptResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCronScriptRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.DeleteCronScriptRequest{")
	if this.ScriptID != nil {
		s = append(s, "ScriptID: "+fmt.Sprintf("%#v", this.ScriptID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCronScriptResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cvmsgspb.DeleteCronScriptResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CronScriptUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.CronScriptUpdate{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CronScriptUpdate_UpsertReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.CronScriptUpdate_UpsertReq{` +
		`UpsertReq:` + fmt.Sprintf("%#v", this.UpsertReq) + `}`}, ", ")
	return s
}
func (this *CronScriptUpdate_DeleteReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.CronScriptUpdate_DeleteReq{` +
		`DeleteReq:` + fmt.Sprintf("%#v", this.DeleteReq) + `}`}, ", ")
	return s
}
func valueToGoStringCvmsgs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RegisterVizierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterVizierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterVizierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterInfo != nil {
		{
			size, err := m.ClusterInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.JwtKey) > 0 {
		i -= len(m.JwtKey)
		copy(dAtA[i:], m.JwtKey)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.JwtKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VizierClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VizierVersion) > 0 {
		i -= len(m.VizierVersion)
		copy(dAtA[i:], m.VizierVersion)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterUID) > 0 {
		i -= len(m.ClusterUID)
		copy(dAtA[i:], m.ClusterUID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterVizierAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterVizierAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterVizierAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VizierName) > 0 {
		i -= len(m.VizierName)
		copy(dAtA[i:], m.VizierName)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizierHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorVersion) > 0 {
		i -= len(m.OperatorVersion)
		copy(dAtA[i:], m.OperatorVersion)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.OperatorVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.K8sClusterVersion) > 0 {
		i -= len(m.K8sClusterVersion)
		copy(dAtA[i:], m.K8sClusterVersion)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.K8sClusterVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.UnhealthyDataPlanePodStatuses) > 0 {
		for k := range m.UnhealthyDataPlanePodStatuses {
			v := m.UnhealthyDataPlanePodStatuses[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCvmsgs(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCvmsgs(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCvmsgs(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x72
	}
	if m.DisableAutoUpdate {
		i--
		if m.DisableAutoUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.NumInstrumentedNodes != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.NumInstrumentedNodes))
		i--
		dAtA[i] = 0x60
	}
	if m.NumNodes != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.NumNodes))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.PodStatusesLastUpdated != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.PodStatusesLastUpdated))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PodStatuses) > 0 {
		for k := range m.PodStatuses {
			v := m.PodStatuses[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCvmsgs(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCvmsgs(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCvmsgs(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Time != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestartCount != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.RestartCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCvmsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Containers) > 0 {
		for iNdEx := len(m.Containers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Containers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCvmsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *K8SEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K8SEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastTime != nil {
		{
			size, err := m.LastTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FirstTime != nil {
		{
			size, err := m.FirstTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestartCount != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.RestartCount))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VizierHeartbeatAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierHeartbeatAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierHeartbeatAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x22
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Time != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizierConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VizierConfigUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VizierInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorVersion) > 0 {
		i -= len(m.OperatorVersion)
		copy(dAtA[i:], m.OperatorVersion)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.OperatorVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.PreviousStatusTime != nil {
		{
			size, err := m.PreviousStatusTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.PreviousStatus != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.PreviousStatus))
		i--
		dAtA[i] = 0x78
	}
	if len(m.UnhealthyDataPlanePodStatuses) > 0 {
		for k := range m.UnhealthyDataPlanePodStatuses {
			v := m.UnhealthyDataPlanePodStatuses[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCvmsgs(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCvmsgs(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCvmsgs(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x6a
	}
	if m.NumInstrumentedNodes != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.NumInstrumentedNodes))
		i--
		dAtA[i] = 0x60
	}
	if m.NumNodes != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.NumNodes))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ControlPlanePodStatuses) > 0 {
		for k := range m.ControlPlanePodStatuses {
			v := m.ControlPlanePodStatuses[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCvmsgs(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCvmsgs(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCvmsgs(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.VizierVersion) > 0 {
		i -= len(m.VizierVersion)
		copy(dAtA[i:], m.VizierVersion)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierVersion)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClusterVersion) > 0 {
		i -= len(m.ClusterVersion)
		copy(dAtA[i:], m.ClusterVersion)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterVersion)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterUID) > 0 {
		i -= len(m.ClusterUID)
		copy(dAtA[i:], m.ClusterUID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterUID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastHeartbeatNs != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.LastHeartbeatNs))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVizierConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVizierConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVizierConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigUpdate != nil {
		{
			size, err := m.ConfigUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVizierConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVizierConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVizierConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateOrInstallVizierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrInstallVizierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOrInstallVizierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedeployEtcd {
		i--
		if m.RedeployEtcd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOrInstallVizierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrInstallVizierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOrInstallVizierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateStarted {
		i--
		if m.UpdateStarted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizierConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierConnectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *VLogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VLogMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VLogMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2VAPIStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2VAPIStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2VAPIStreamRequest_ExecReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_ExecReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecReq != nil {
		{
			size, err := m.ExecReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamRequest_HcReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_HcReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HcReq != nil {
		{
			size, err := m.HcReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamRequest_CancelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_CancelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelReq != nil {
		{
			size, err := m.CancelReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamRequest_DebugLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_DebugLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DebugLogReq != nil {
		{
			size, err := m.DebugLogReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamRequest_DebugPodsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_DebugPodsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DebugPodsReq != nil {
		{
			size, err := m.DebugPodsReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamRequest_GenerateOTelScriptReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_GenerateOTelScriptReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GenerateOTelScriptReq != nil {
		{
			size, err := m.GenerateOTelScriptReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2VAPIStreamCancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamCancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *V2CAPIStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2CAPIStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *V2CAPIStreamResponse_ExecResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_ExecResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecResp != nil {
		{
			size, err := m.ExecResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *V2CAPIStreamResponse_HcResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_HcResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HcResp != nil {
		{
			size, err := m.HcResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *V2CAPIStreamResponse_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *V2CAPIStreamResponse_DebugLogResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_DebugLogResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DebugLogResp != nil {
		{
			size, err := m.DebugLogResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *V2CAPIStreamResponse_DebugPodsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_DebugPodsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DebugPodsResp != nil {
		{
			size, err := m.DebugPodsResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *V2CAPIStreamResponse_GenerateOTelScriptResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_GenerateOTelScriptResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GenerateOTelScriptResp != nil {
		{
			size, err := m.GenerateOTelScriptResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *V2CMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2CMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SessionId != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClusterUID) > 0 {
		i -= len(m.ClusterUID)
		copy(dAtA[i:], m.ClusterUID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VizierID) > 0 {
		i -= len(m.VizierID)
		copy(dAtA[i:], m.VizierID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2VMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2VMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VizierID) > 0 {
		i -= len(m.VizierID)
		copy(dAtA[i:], m.VizierID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CronScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyS != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.FrequencyS))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Configs) > 0 {
		i -= len(m.Configs)
		copy(dAtA[i:], m.Configs)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Configs)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CronExpression) > 0 {
		i -= len(m.CronExpression)
		copy(dAtA[i:], m.CronExpression)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.CronExpression)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Script) > 0 {
		i -= len(m.Script)
		copy(dAtA[i:], m.Script)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Script)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCronScriptsChecksumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCronScriptsChecksumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCronScriptsChecksumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCronScriptsChecksumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCronScriptsChecksumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCronScriptsChecksumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCronScriptsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCronScriptsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCronScriptsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCronScriptsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCronScriptsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCronScriptsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for k := range m.Scripts {
			v := m.Scripts[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCvmsgs(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCvmsgs(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCvmsgs(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOrUpdateCronScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOrUpdateCronScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOrUpdateCronScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Script != nil {
		{
			size, err := m.Script.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOrUpdateCronScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOrUpdateCronScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOrUpdateCronScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteCronScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCronScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCronScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScriptID != nil {
		{
			size, err := m.ScriptID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCronScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCronScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCronScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CronScriptUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronScriptUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronScriptUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CronScriptUpdate_UpsertReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronScriptUpdate_UpsertReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpsertReq != nil {
		{
			size, err := m.UpsertReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CronScriptUpdate_DeleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronScriptUpdate_DeleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteReq != nil {
		{
			size, err := m.DeleteReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintCvmsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovCvmsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterVizierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.JwtKey)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.ClusterInfo != nil {
		l = m.ClusterInfo.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VizierClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterUID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.VizierVersion)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *RegisterVizierAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCvmsgs(uint64(m.Status))
	}
	l = len(m.VizierName)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VizierHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovCvmsgs(uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovCvmsgs(uint64(m.SequenceNumber))
	}
	if len(m.PodStatuses) > 0 {
		for k, v := range m.PodStatuses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCvmsgs(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCvmsgs(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCvmsgs(uint64(mapEntrySize))
		}
	}
	if m.PodStatusesLastUpdated != 0 {
		n += 1 + sovCvmsgs(uint64(m.PodStatusesLastUpdated))
	}
	if m.Status != 0 {
		n += 1 + sovCvmsgs(uint64(m.Status))
	}
	if m.NumNodes != 0 {
		n += 1 + sovCvmsgs(uint64(m.NumNodes))
	}
	if m.NumInstrumentedNodes != 0 {
		n += 1 + sovCvmsgs(uint64(m.NumInstrumentedNodes))
	}
	if m.DisableAutoUpdate {
		n += 2
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if len(m.UnhealthyDataPlanePodStatuses) > 0 {
		for k, v := range m.UnhealthyDataPlanePodStatuses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCvmsgs(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCvmsgs(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCvmsgs(uint64(mapEntrySize))
		}
	}
	l = len(m.K8sClusterVersion)
	if l > 0 {
		n += 2 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.OperatorVersion)
	if l > 0 {
		n += 2 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *PodStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCvmsgs(uint64(m.Status))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovCvmsgs(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovCvmsgs(uint64(l))
		}
	}
	if m.RestartCount != 0 {
		n += 1 + sovCvmsgs(uint64(m.RestartCount))
	}
	return n
}

func (m *K8SEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.FirstTime != nil {
		l = m.FirstTime.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.LastTime != nil {
		l = m.LastTime.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *ContainerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovCvmsgs(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.RestartCount != 0 {
		n += 1 + sovCvmsgs(uint64(m.RestartCount))
	}
	return n
}

func (m *VizierHeartbeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCvmsgs(uint64(m.Status))
	}
	if m.Time != 0 {
		n += 1 + sovCvmsgs(uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovCvmsgs(uint64(m.SequenceNumber))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VizierConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VizierConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VizierInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCvmsgs(uint64(m.Status))
	}
	if m.LastHeartbeatNs != 0 {
		n += 1 + sovCvmsgs(uint64(m.LastHeartbeatNs))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.ClusterUID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.ClusterVersion)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.VizierVersion)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if len(m.ControlPlanePodStatuses) > 0 {
		for k, v := range m.ControlPlanePodStatuses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCvmsgs(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCvmsgs(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCvmsgs(uint64(mapEntrySize))
		}
	}
	if m.NumNodes != 0 {
		n += 1 + sovCvmsgs(uint64(m.NumNodes))
	}
	if m.NumInstrumentedNodes != 0 {
		n += 1 + sovCvmsgs(uint64(m.NumInstrumentedNodes))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if len(m.UnhealthyDataPlanePodStatuses) > 0 {
		for k, v := range m.UnhealthyDataPlanePodStatuses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCvmsgs(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCvmsgs(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCvmsgs(uint64(mapEntrySize))
		}
	}
	if m.PreviousStatus != 0 {
		n += 1 + sovCvmsgs(uint64(m.PreviousStatus))
	}
	if m.PreviousStatusTime != nil {
		l = m.PreviousStatusTime.Size()
		n += 2 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.OperatorVersion)
	if l > 0 {
		n += 2 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *UpdateVizierConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.ConfigUpdate != nil {
		l = m.ConfigUpdate.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *UpdateVizierConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateOrInstallVizierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.RedeployEtcd {
		n += 2
	}
	return n
}

func (m *UpdateOrInstallVizierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateStarted {
		n += 2
	}
	return n
}

func (m *VizierConnectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VLogMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *C2VAPIStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *C2VAPIStreamRequest_ExecReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecReq != nil {
		l = m.ExecReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamRequest_HcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HcReq != nil {
		l = m.HcReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamRequest_CancelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelReq != nil {
		l = m.CancelReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamRequest_DebugLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DebugLogReq != nil {
		l = m.DebugLogReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamRequest_DebugPodsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DebugPodsReq != nil {
		l = m.DebugPodsReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamRequest_GenerateOTelScriptReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenerateOTelScriptReq != nil {
		l = m.GenerateOTelScriptReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *V2CAPIStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *V2CAPIStreamResponse_ExecResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecResp != nil {
		l = m.ExecResp.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CAPIStreamResponse_HcResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HcResp != nil {
		l = m.HcResp.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CAPIStreamResponse_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CAPIStreamResponse_DebugLogResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DebugLogResp != nil {
		l = m.DebugLogResp.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CAPIStreamResponse_DebugPodsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DebugPodsResp != nil {
		l = m.DebugPodsResp.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CAPIStreamResponse_GenerateOTelScriptResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenerateOTelScriptResp != nil {
		l = m.GenerateOTelScriptResp.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VizierID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.ClusterUID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovCvmsgs(uint64(m.SessionId))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *C2VMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VizierID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *CronScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.CronExpression)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Configs)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.FrequencyS != 0 {
		n += 1 + sovCvmsgs(uint64(m.FrequencyS))
	}
	return n
}

func (m *GetCronScriptsChecksumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *GetCronScriptsChecksumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *GetCronScriptsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *GetCronScriptsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for k, v := range m.Scripts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCvmsgs(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCvmsgs(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCvmsgs(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RegisterOrUpdateCronScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Script != nil {
		l = m.Script.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *RegisterOrUpdateCronScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteCronScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScriptID != nil {
		l = m.ScriptID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *DeleteCronScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CronScriptUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovCvmsgs(uint64(m.Timestamp))
	}
	return n
}

func (m *CronScriptUpdate_UpsertReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpsertReq != nil {
		l = m.UpsertReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *CronScriptUpdate_DeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteReq != nil {
		l = m.DeleteReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func sovCvmsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCvmsgs(x uint64) (n int) {
	return sovCvmsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegisterVizierRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterVizierRequest{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "uuidpb.UUID", 1) + `,`,
		`JwtKey:` + fmt.Sprintf("%v", this.JwtKey) + `,`,
		`ClusterInfo:` + strings.Replace(this.ClusterInfo.String(), "VizierClusterInfo", "VizierClusterInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierClusterInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierClusterInfo{`,
		`ClusterUID:` + fmt.Sprintf("%v", this.ClusterUID) + `,`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`VizierVersion:` + fmt.Sprintf("%v", this.VizierVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterVizierAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterVizierAck{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`VizierName:` + fmt.Sprintf("%v", this.VizierName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierHeartbeat) String() string {
	if this == nil {
		return "nil"
	}
	keysForPodStatuses := make([]string, 0, len(this.PodStatuses))
	for k, _ := range this.PodStatuses {
		keysForPodStatuses = append(keysForPodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPodStatuses)
	mapStringForPodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForPodStatuses {
		mapStringForPodStatuses += fmt.Sprintf("%v: %v,", k, this.PodStatuses[k])
	}
	mapStringForPodStatuses += "}"
	keysForUnhealthyDataPlanePodStatuses := make([]string, 0, len(this.UnhealthyDataPlanePodStatuses))
	for k, _ := range this.UnhealthyDataPlanePodStatuses {
		keysForUnhealthyDataPlanePodStatuses = append(keysForUnhealthyDataPlanePodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUnhealthyDataPlanePodStatuses)
	mapStringForUnhealthyDataPlanePodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForUnhealthyDataPlanePodStatuses {
		mapStringForUnhealthyDataPlanePodStatuses += fmt.Sprintf("%v: %v,", k, this.UnhealthyDataPlanePodStatuses[k])
	}
	mapStringForUnhealthyDataPlanePodStatuses += "}"
	s := strings.Join([]string{`&VizierHeartbeat{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`PodStatuses:` + mapStringForPodStatuses + `,`,
		`PodStatusesLastUpdated:` + fmt.Sprintf("%v", this.PodStatusesLastUpdated) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`NumNodes:` + fmt.Sprintf("%v", this.NumNodes) + `,`,
		`NumInstrumentedNodes:` + fmt.Sprintf("%v", this.NumInstrumentedNodes) + `,`,
		`DisableAutoUpdate:` + fmt.Sprintf("%v", this.DisableAutoUpdate) + `,`,
		`StatusMessage:` + fmt.Sprintf("%v", this.StatusMessage) + `,`,
		`UnhealthyDataPlanePodStatuses:` + mapStringForUnhealthyDataPlanePodStatuses + `,`,
		`K8sClusterVersion:` + fmt.Sprintf("%v", this.K8sClusterVersion) + `,`,
		`OperatorVersion:` + fmt.Sprintf("%v", this.OperatorVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContainers := "[]*ContainerStatus{"
	for _, f := range this.Containers {
		repeatedStringForContainers += strings.Replace(f.String(), "ContainerStatus", "ContainerStatus", 1) + ","
	}
	repeatedStringForContainers += "}"
	repeatedStringForEvents := "[]*K8SEvent{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(fmt.Sprintf("%v", f), "K8SEvent", "K8SEvent", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&PodStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusMessage:` + fmt.Sprintf("%v", this.StatusMessage) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Containers:` + repeatedStringForContainers + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Events:` + repeatedStringForEvents + `,`,
		`RestartCount:` + fmt.Sprintf("%v", this.RestartCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SEvent{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`FirstTime:` + strings.Replace(fmt.Sprintf("%v", this.FirstTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`RestartCount:` + fmt.Sprintf("%v", this.RestartCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierHeartbeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierHeartbeatAck{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierConfig{`,
		`}`,
	}, "")
	return s
}
func (this *VizierConfigUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierConfigUpdate{`,
		`}`,
	}, "")
	return s
}
func (this *VizierInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForControlPlanePodStatuses := make([]string, 0, len(this.ControlPlanePodStatuses))
	for k, _ := range this.ControlPlanePodStatuses {
		keysForControlPlanePodStatuses = append(keysForControlPlanePodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForControlPlanePodStatuses)
	mapStringForControlPlanePodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForControlPlanePodStatuses {
		mapStringForControlPlanePodStatuses += fmt.Sprintf("%v: %v,", k, this.ControlPlanePodStatuses[k])
	}
	mapStringForControlPlanePodStatuses += "}"
	keysForUnhealthyDataPlanePodStatuses := make([]string, 0, len(this.UnhealthyDataPlanePodStatuses))
	for k, _ := range this.UnhealthyDataPlanePodStatuses {
		keysForUnhealthyDataPlanePodStatuses = append(keysForUnhealthyDataPlanePodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUnhealthyDataPlanePodStatuses)
	mapStringForUnhealthyDataPlanePodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForUnhealthyDataPlanePodStatuses {
		mapStringForUnhealthyDataPlanePodStatuses += fmt.Sprintf("%v: %v,", k, this.UnhealthyDataPlanePodStatuses[k])
	}
	mapStringForUnhealthyDataPlanePodStatuses += "}"
	s := strings.Join([]string{`&VizierInfo{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastHeartbeatNs:` + fmt.Sprintf("%v", this.LastHeartbeatNs) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "VizierConfig", "VizierConfig", 1) + `,`,
		`ClusterUID:` + fmt.Sprintf("%v", this.ClusterUID) + `,`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`ClusterVersion:` + fmt.Sprintf("%v", this.ClusterVersion) + `,`,
		`VizierVersion:` + fmt.Sprintf("%v", this.VizierVersion) + `,`,
		`ControlPlanePodStatuses:` + mapStringForControlPlanePodStatuses + `,`,
		`NumNodes:` + fmt.Sprintf("%v", this.NumNodes) + `,`,
		`NumInstrumentedNodes:` + fmt.Sprintf("%v", this.NumInstrumentedNodes) + `,`,
		`StatusMessage:` + fmt.Sprintf("%v", this.StatusMessage) + `,`,
		`UnhealthyDataPlanePodStatuses:` + mapStringForUnhealthyDataPlanePodStatuses + `,`,
		`PreviousStatus:` + fmt.Sprintf("%v", this.PreviousStatus) + `,`,
		`PreviousStatusTime:` + strings.Replace(fmt.Sprintf("%v", this.PreviousStatusTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`OperatorVersion:` + fmt.Sprintf("%v", this.OperatorVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateVizierConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateVizierConfigRequest{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "uuidpb.UUID", 1) + `,`,
		`ConfigUpdate:` + strings.Replace(this.ConfigUpdate.String(), "VizierConfigUpdate", "VizierConfigUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateVizierConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateVizierConfigResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOrInstallVizierRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOrInstallVizierRequest{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`RedeployEtcd:` + fmt.Sprintf("%v", this.RedeployEtcd) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOrInstallVizierResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOrInstallVizierResponse{`,
		`UpdateStarted:` + fmt.Sprintf("%v", this.UpdateStarted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierConnectionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierConnectionInfo{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VLogMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VLogMessage{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_ExecReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_ExecReq{`,
		`ExecReq:` + strings.Replace(fmt.Sprintf("%v", this.ExecReq), "ExecuteScriptRequest", "vizierpb.ExecuteScriptRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_HcReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_HcReq{`,
		`HcReq:` + strings.Replace(fmt.Sprintf("%v", this.HcReq), "HealthCheckRequest", "vizierpb.HealthCheckRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_CancelReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_CancelReq{`,
		`CancelReq:` + strings.Replace(fmt.Sprintf("%v", this.CancelReq), "C2VAPIStreamCancel", "C2VAPIStreamCancel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_DebugLogReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_DebugLogReq{`,
		`DebugLogReq:` + strings.Replace(fmt.Sprintf("%v", this.DebugLogReq), "DebugLogRequest", "vizierpb.DebugLogRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_DebugPodsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_DebugPodsReq{`,
		`DebugPodsReq:` + strings.Replace(fmt.Sprintf("%v", this.DebugPodsReq), "DebugPodsRequest", "vizierpb.DebugPodsRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_GenerateOTelScriptReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_GenerateOTelScriptReq{`,
		`GenerateOTelScriptReq:` + strings.Replace(fmt.Sprintf("%v", this.GenerateOTelScriptReq), "GenerateOTelScriptRequest", "vizierpb.GenerateOTelScriptRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamCancel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamCancel{`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_ExecResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_ExecResp{`,
		`ExecResp:` + strings.Replace(fmt.Sprintf("%v", this.ExecResp), "ExecuteScriptResponse", "vizierpb.ExecuteScriptResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_HcResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_HcResp{`,
		`HcResp:` + strings.Replace(fmt.Sprintf("%v", this.HcResp), "HealthCheckResponse", "vizierpb.HealthCheckResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_Status{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "vizierpb.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_DebugLogResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_DebugLogResp{`,
		`DebugLogResp:` + strings.Replace(fmt.Sprintf("%v", this.DebugLogResp), "DebugLogResponse", "vizierpb.DebugLogResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_DebugPodsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_DebugPodsResp{`,
		`DebugPodsResp:` + strings.Replace(fmt.Sprintf("%v", this.DebugPodsResp), "DebugPodsResponse", "vizierpb.DebugPodsResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_GenerateOTelScriptResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_GenerateOTelScriptResp{`,
		`GenerateOTelScriptResp:` + strings.Replace(fmt.Sprintf("%v", this.GenerateOTelScriptResp), "GenerateOTelScriptResponse", "vizierpb.GenerateOTelScriptResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CMessage{`,
		`VizierID:` + fmt.Sprintf("%v", this.VizierID) + `,`,
		`ClusterUID:` + fmt.Sprintf("%v", this.ClusterUID) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VMessage{`,
		`VizierID:` + fmt.Sprintf("%v", this.VizierID) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CronScript) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CronScript{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Script:` + fmt.Sprintf("%v", this.Script) + `,`,
		`CronExpression:` + fmt.Sprintf("%v", this.CronExpression) + `,`,
		`Configs:` + fmt.Sprintf("%v", this.Configs) + `,`,
		`FrequencyS:` + fmt.Sprintf("%v", this.FrequencyS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCronScriptsChecksumRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCronScriptsChecksumRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCronScriptsChecksumResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCronScriptsChecksumResponse{`,
		`Checksum:` + fmt.Sprintf("%v", this.Checksum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCronScriptsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCronScriptsRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCronScriptsResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForScripts := make([]string, 0, len(this.Scripts))
	for k, _ := range this.Scripts {
		keysForScripts = append(keysForScripts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScripts)
	mapStringForScripts := "map[string]*CronScript{"
	for _, k := range keysForScripts {
		mapStringForScripts += fmt.Sprintf("%v: %v,", k, this.Scripts[k])
	}
	mapStringForScripts += "}"
	s := strings.Join([]string{`&GetCronScriptsResponse{`,
		`Scripts:` + mapStringForScripts + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterOrUpdateCronScriptRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterOrUpdateCronScriptRequest{`,
		`Script:` + strings.Replace(this.Script.String(), "CronScript", "CronScript", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterOrUpdateCronScriptResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterOrUpdateCronScriptResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCronScriptRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCronScriptRequest{`,
		`ScriptID:` + strings.Replace(fmt.Sprintf("%v", this.ScriptID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCronScriptResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCronScriptResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CronScriptUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CronScriptUpdate{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CronScriptUpdate_UpsertReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CronScriptUpdate_UpsertReq{`,
		`UpsertReq:` + strings.Replace(fmt.Sprintf("%v", this.UpsertReq), "RegisterOrUpdateCronScriptRequest", "RegisterOrUpdateCronScriptRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CronScriptUpdate_DeleteReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CronScriptUpdate_DeleteReq{`,
		`DeleteReq:` + strings.Replace(fmt.Sprintf("%v", this.DeleteReq), "DeleteCronScriptRequest", "DeleteCronScriptRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCvmsgs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegisterVizierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterVizierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterVizierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &uuidpb.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterInfo == nil {
				m.ClusterInfo = &VizierClusterInfo{}
			}
			if err := m.ClusterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterVizierAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterVizierAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterVizierAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RegisterVizierAck_RegistrationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &uuidpb.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodStatuses == nil {
				m.PodStatuses = make(map[string]*PodStatus)
			}
			var mapkey string
			var mapvalue *PodStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCvmsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PodStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCvmsgs(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PodStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodStatusesLastUpdated", wireType)
			}
			m.PodStatusesLastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodStatusesLastUpdated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VizierStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNodes", wireType)
			}
			m.NumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInstrumentedNodes", wireType)
			}
			m.NumInstrumentedNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInstrumentedNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAutoUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableAutoUpdate = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyDataPlanePodStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnhealthyDataPlanePodStatuses == nil {
				m.UnhealthyDataPlanePodStatuses = make(map[string]*PodStatus)
			}
			var mapkey string
			var mapvalue *PodStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCvmsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PodStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCvmsgs(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UnhealthyDataPlanePodStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8sClusterVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8sClusterVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= metadatapb.PodPhase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &ContainerStatus{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &K8SEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartCount", wireType)
			}
			m.RestartCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestartCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *K8SEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: K8sEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: K8sEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstTime == nil {
				m.FirstTime = &types.Timestamp{}
			}
			if err := m.FirstTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTime == nil {
				m.LastTime = &types.Timestamp{}
			}
			if err := m.LastTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= metadatapb.ContainerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartCount", wireType)
			}
			m.RestartCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestartCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierHeartbeatAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierHeartbeatAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierHeartbeatAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VizierHeartbeatAck_HeartbeatStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierConfigUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierConfigUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierConfigUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &uuidpb.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VizierStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatNs", wireType)
			}
			m.LastHeartbeatNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &VizierConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlanePodStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControlPlanePodStatuses == nil {
				m.ControlPlanePodStatuses = make(map[string]*PodStatus)
			}
			var mapkey string
			var mapvalue *PodStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCvmsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PodStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCvmsgs(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ControlPlanePodStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNodes", wireType)
			}
			m.NumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInstrumentedNodes", wireType)
			}
			m.NumInstrumentedNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInstrumentedNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyDataPlanePodStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnhealthyDataPlanePodStatuses == nil {
				m.UnhealthyDataPlanePodStatuses = make(map[string]*PodStatus)
			}
			var mapkey string
			var mapvalue *PodStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCvmsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PodStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCvmsgs(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UnhealthyDataPlanePodStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStatus", wireType)
			}
			m.PreviousStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousStatus |= VizierStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStatusTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousStatusTime == nil {
				m.PreviousStatusTime = &types.Timestamp{}
			}
			if err := m.PreviousStatusTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVizierConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVizierConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVizierConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &uuidpb.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigUpdate == nil {
				m.ConfigUpdate = &VizierConfigUpdate{}
			}
			if err := m.ConfigUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVizierConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVizierConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVizierConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrInstallVizierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrInstallVizierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrInstallVizierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &uuidpb.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeployEtcd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedeployEtcd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrInstallVizierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrInstallVizierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrInstallVizierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStarted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateStarted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VLogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VLogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VLogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2VAPIStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2VAPIStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2VAPIStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.ExecuteScriptRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_ExecReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HcReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.HealthCheckRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_HcReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &C2VAPIStreamCancel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_CancelReq{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugLogReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.DebugLogRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_DebugLogReq{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugPodsReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.DebugPodsRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_DebugPodsReq{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerateOTelScriptReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.GenerateOTelScriptRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_GenerateOTelScriptReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2VAPIStreamCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2VAPIStreamCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2VAPIStreamCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2CAPIStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V2CAPIStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V2CAPIStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.ExecuteScriptResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_ExecResp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HcResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.HealthCheckResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_HcResp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.Status{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_Status{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugLogResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.DebugLogResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_DebugLogResp{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugPodsResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.DebugPodsResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_DebugPodsResp{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerateOTelScriptResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.GenerateOTelScriptResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_GenerateOTelScriptResp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2CMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V2CMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V2CMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2VMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2VMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2VMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronExpression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronExpression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyS", wireType)
			}
			m.FrequencyS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCronScriptsChecksumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCronScriptsChecksumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCronScriptsChecksumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCronScriptsChecksumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCronScriptsChecksumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCronScriptsChecksumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCronScriptsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCronScriptsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCronScriptsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCronScriptsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCronScriptsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCronScriptsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scripts == nil {
				m.Scripts = make(map[string]*CronScript)
			}
			var mapkey string
			var mapvalue *CronScript
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCvmsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCvmsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCvmsgs
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CronScript{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCvmsgs(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCvmsgs
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Scripts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOrUpdateCronScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOrUpdateCronScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOrUpdateCronScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Script == nil {
				m.Script = &CronScript{}
			}
			if err := m.Script.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOrUpdateCronScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOrUpdateCronScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOrUpdateCronScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCronScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCronScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCronScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptID == nil {
				m.ScriptID = &uuidpb.UUID{}
			}
			if err := m.ScriptID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCronScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCronScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCronScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronScriptUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronScriptUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronScriptUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpsertReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterOrUpdateCronScriptRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &CronScriptUpdate_UpsertReq{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteCronScriptRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &CronScriptUpdate_DeleteReq{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCvmsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCvmsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCvmsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCvmsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCvmsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCvmsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCvmsgs = fmt.Errorf("proto: unexpected end of group")
)
