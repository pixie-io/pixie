# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

'''Pod Overview

Overview of a specific Pod monitored by Pixie with its high level application metrics
(latency, error-rate & rps) and resource usage (cpu, writes, reads).

'''

import px


bytes_per_mb = 1024.0 * 1024.0
# Window size for computing timeseries
window_s = 10
# Flag to filter out requests that come from an unresolvable IP.
filter_unresolved_inbound = True
# Flag to filter out health checks from the data.
filter_health_checks = True
# Flag to filter out ready checks from the data.
filter_ready_checks = True


def containers(start_time: str, pod: px.Pod):
    ''' A list of containers in `pod`.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['pod'] == pod]
    df.name = df.ctx['container_name']
    df.id = df.ctx['container_id']
    df = df.groupby(['name', 'id']).agg()
    df.status = px.container_id_to_status(df.id)
    return df


def processes(start_time: str, pod: px.Pod):
    ''' A list of processes in `pod`.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['pod'] == pod]
    df.cmd = df.ctx['cmdline']
    df.pid = df.ctx['pid']
    df = df.groupby(['pid', 'cmd', 'upid']).agg()
    return df


def resource_timeseries(start_time: str, pod: px.Pod):
    ''' Compute the resource usage as a timeseries for `pod`.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['pod'] == pod]
    df.timestamp = px.bin(df.time_, px.seconds(window_s))
    df.container = df.ctx['container_name']

    # Convert bytes to MB.
    df.vsize_mb = df.vsize_bytes / bytes_per_mb
    df.rss_mb = df.rss_bytes / bytes_per_mb
    df.read_mb = df.read_bytes / bytes_per_mb
    df.write_mb = df.write_bytes / bytes_per_mb
    df.rchar_mb = df.rchar_bytes / bytes_per_mb
    df.wchar_mb = df.wchar_bytes / bytes_per_mb

    # Convert nanoseconds to milliseconds.
    df.cpu_utime_ms = df.cpu_utime_ns / 1.0E6
    df.cpu_ktime_ms = df.cpu_ktime_ns / 1.0E6

    # First calculate CPU usage by process (UPID) in each k8s_object
    # over all windows.
    df = df.groupby(['upid', 'container', 'timestamp']).agg(
        rss_mb=('rss_mb', px.mean),
        vsize_mb=('vsize_mb', px.mean),
        # The fields below are counters, so we take the min and the max to subtract them.
        cpu_utime_ms_max=('cpu_utime_ms', px.max),
        cpu_utime_ms_min=('cpu_utime_ms', px.min),
        cpu_ktime_ms_max=('cpu_ktime_ms', px.max),
        cpu_ktime_ms_min=('cpu_ktime_ms', px.min),
        read_mb_max=('read_mb', px.max),
        read_mb_min=('read_mb', px.min),
        write_mb_max=('write_mb', px.max),
        write_mb_min=('write_mb', px.min),
        rchar_mb_max=('rchar_mb', px.max),
        rchar_mb_min=('rchar_mb', px.min),
        wchar_mb_max=('wchar_mb', px.max),
        wchar_mb_min=('wchar_mb', px.min),
    )

    # Next calculate cpu usage and memory stats per window.
    df.cpu_utime_ms = df.cpu_utime_ms_max - df.cpu_utime_ms_min
    df.cpu_ktime_ms = df.cpu_ktime_ms_max - df.cpu_ktime_ms_min
    df.read_mb = df.read_mb_max - df.read_mb_min
    df.write_mb = df.write_mb_max - df.write_mb_min
    df.rchar_mb = df.rchar_mb_max - df.rchar_mb_min
    df.wchar_mb = df.wchar_mb_max - df.wchar_mb_min

    # Then aggregate process individual process metrics.
    df = df.groupby(['container', 'timestamp']).agg(
        cpu_ktime_ms=('cpu_ktime_ms', px.sum),
        cpu_utime_ms=('cpu_utime_ms', px.sum),
        read_mb=('read_mb', px.sum),
        write_mb=('write_mb', px.sum),
        rchar_mb=('rchar_mb', px.sum),
        wchar_mb=('wchar_mb', px.sum),
        rss_mb=('rss_mb', px.sum),
        vsize_mb=('vsize_mb', px.sum),
    )

    # Convert window_s into the same units as cpu time.
    window_size_ms = window_s * 1.0E3
    # Finally, calculate total (kernel + user time)  percentage used over window.
    df.cpu_pct = (df.cpu_ktime_ms + df.cpu_utime_ms) / window_size_ms * 100
    df['time_'] = df['timestamp']
    return df.drop('timestamp')


def network_timeseries(start_time: str, pod: px.Pod):
    ''' Gets the network stats (transmitted/received traffic) for the input node.

    Args:
    @start: Starting time of the data to examine.
    @node: The full name of the node to filter on.
    '''
    df = px.DataFrame(table='network_stats', start_time=start_time)
    df = df[px.pod_id_to_pod_name(df.pod_id) == pod]
    df.timestamp = px.bin(df.time_, px.seconds(window_s))

    df.rx_mb = df.rx_bytes / bytes_per_mb
    df.tx_mb = df.tx_bytes / bytes_per_mb

    # First calculate network usage by node over all windows.
    # Data is sharded by Pod in network_stats.
    df = df.groupby(['timestamp', 'pod_id']).agg(
        rx_mb_end=('rx_mb', px.max),
        rx_mb_start=('rx_mb', px.min),
        tx_mb_end=('tx_mb', px.max),
        tx_mb_start=('tx_mb', px.min),
        tx_errors_end=('tx_errors', px.max),
        tx_errors_start=('tx_errors', px.min),
        rx_errors_end=('rx_errors', px.max),
        rx_errors_start=('rx_errors', px.min),
        tx_drops_end=('tx_drops', px.max),
        tx_drops_start=('tx_drops', px.min),
        rx_drops_end=('rx_drops', px.max),
        rx_drops_start=('rx_drops', px.min),
    )

    # Calculate the network statistics rate over the window.
    # We subtract the counter value at the beginning ('_start')
    # from the value at the end ('_end').
    df.rx_mb_per_s = (df.rx_mb_end - df.rx_mb_start) / window_s
    df.tx_mb_per_s = (df.tx_mb_end - df.tx_mb_start) / window_s
    df.rx_drops_per_s = (df.rx_drops_end - df.rx_drops_start) / window_s
    df.tx_drops_per_s = (df.tx_drops_end - df.tx_drops_start) / window_s
    df.rx_errors_per_s = (df.rx_errors_end - df.rx_errors_start) / window_s
    df.tx_errors_per_s = (df.tx_errors_end - df.tx_errors_start) / window_s

    # Add up the network values per node.
    df = df.groupby(['timestamp']).agg(
        rx_mb_per_s=('rx_mb_per_s', px.sum),
        tx_mb_per_s=('tx_mb_per_s', px.sum),
        rx_drop_per_s=('rx_drops_per_s', px.sum),
        tx_drops_per_s=('tx_drops_per_s', px.sum),
        rx_errors_per_s=('rx_errors_per_s', px.sum),
        tx_errors_per_s=('tx_errors_per_s', px.sum),
    )
    df['time_'] = df['timestamp']
    return df


def inbound_latency_timeseries(start_time: str, pod: px.Pod):
    ''' Compute the latency as a timeseries for requests received by `pod`.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = let_helper(start_time)
    df = df[df.pod == pod]

    df = df.groupby(['timestamp']).agg(
        latency_quantiles=('latency_ms', px.quantiles)
    )

    # Format the result of LET aggregates into proper scalar formats and
    # time series.
    df.latency_p50 = px.pluck_float64(df.latency_quantiles, 'p50')
    df.latency_p90 = px.pluck_float64(df.latency_quantiles, 'p90')
    df.latency_p99 = px.pluck_float64(df.latency_quantiles, 'p99')
    df.time_ = df.timestamp
    return df[['time_', 'latency_p50', 'latency_p90', 'latency_p99']]


def inbound_request_timeseries_by_container(start_time: str, pod: px.Pod):
    ''' Compute the request statistics as a timeseries for requests received
        by `pod` by container.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = let_helper(start_time)
    df = df[df.pod == pod]
    df.container = df.ctx['container']

    df = df.groupby(['timestamp', 'container']).agg(
        error_rate_per_window=('failure', px.mean),
        throughput_total=('latency_ms', px.count)
    )

    # Format the result of LET aggregates into proper scalar formats and
    # time series.
    window_size = window_s * 1.0
    df.requests_per_s = df.throughput_total / window_size
    df.errors_per_s = df.error_rate_per_window * df.requests_per_s
    df.error_rate_pct = df.error_rate_per_window * 100
    df.time_ = df.timestamp

    return df[['time_', 'container', 'requests_per_s', 'errors_per_s', 'error_rate_pct']]


def inbound_let_summary(start_time: str, pod: px.Pod):
    ''' Gets a summary of requests inbound to `pod`.

    Args:
    @start: Starting time of the data to examine.
    @pod: The pod to filter on.
    '''
    df = let_summary_helper(start_time)
    df = df[df.responder == pod]
    return df.drop('responder')


def outbound_let_summary(start_time: str, pod: px.Pod):
    ''' Gets a summary of requests outbound from `pod`.

    Args:
    @start: Starting time of the data to examine.
    @pod: The pod to filter on.
    '''
    df = let_summary_helper(start_time)
    df = df[df.requestor == pod]
    return df.drop(['requestor', 'remote_addr'])


def let_summary_helper(start_time: str):
    ''' Gets a summary of request statistics. This is a helper function, filtering by
        pod is done elsewhere.

    Args:
    @start: Starting time of the data to examine.
    '''
    df = let_helper(start_time)

    quantiles_agg = df.groupby(['pod', 'remote_addr']).agg(
        latency_ms=('latency_ms', px.quantiles),
        total_request_count=('latency_ms', px.count)
    )

    quantiles_table = quantiles_agg[['pod', 'remote_addr', 'latency_ms',
                                     'total_request_count']]

    range_agg = df.groupby(['pod', 'remote_addr', 'timestamp']).agg(
        requests_per_window=('time_', px.count),
        error_rate=('failure', px.mean)
    )

    rps_table = range_agg.groupby(['pod', 'remote_addr']).agg(
        requests_per_window=('requests_per_window', px.mean),
        error_rate=('error_rate', px.mean)
    )

    joined_table = quantiles_table.merge(rps_table,
                                         how='inner',
                                         left_on=['pod', 'remote_addr'],
                                         right_on=['pod', 'remote_addr'],
                                         suffixes=['', '_x'])

    joined_table.error_rate_pct = 100 * joined_table.error_rate
    joined_table.requests_per_s = joined_table.requests_per_window / (1.0 * window_s)

    joined_table.responder = df.pod
    joined_table.requestor = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))

    return joined_table[['responder', 'requestor', 'remote_addr', 'latency_ms',
                         'error_rate_pct', 'requests_per_s']]


def let_helper(start_time: str):
    ''' Compute the initial part of the let for requests.
        Filtering to inbound/outbound traffic by pod is done by the calling function.

    Args:
    @start_time: The timestamp of data to start at.

    '''
    df = px.DataFrame(table='http_events', start_time=start_time)
    df.pod = df.ctx['pod']
    df.latency_ms = df.http_resp_latency_ns / 1.0E6
    df = df[df['latency_ms'] < 10000.0]
    df.timestamp = px.bin(df.time_, px.seconds(window_s))

    df.resp_size = px.length(df.http_resp_body)
    df.failure = df.http_resp_status >= 400
    filter_out_conds = ((df.http_req_path != '/health' or not filter_health_checks) and (
        df.http_req_path != '/readyz' or not filter_ready_checks)) and (
        df['remote_addr'] != '-' or not filter_unresolved_inbound)

    df = df[filter_out_conds]
    return df
