# Finds services that have traffic to and from a list of IP addresses.
# Calculates bandwidth in bytes per second (BPS).

import px

window_size_seconds = 10

df = px.DataFrame('conn_stats')

# Add IPs of the remote endpoint to filter.
expr = df.remote_addr == '10.4.1.1'
expr = expr or df.remote_addr == '10.4.1.2'

# Filter connections with the remote IP addresses.
df = df[expr]

# Insert the service name.
df.service = df.ctx['service']

# Put data items into a 10 seconds time windows, then use the difference of max & min,
# as the transferred bytes in the time window.
df.timestamp = px.bin(df.time_, px.seconds(window_size_seconds))
df = df.groupby(['timestamp', 'remote_addr', 'upid', 'service']).agg(
    bytes_sent_max=('bytes_sent', px.max),
    bytes_sent_min=('bytes_sent', px.min),
    bytes_recv_max=('bytes_recv', px.max),
    bytes_recv_min=('bytes_recv', px.min),
)

df.bps_sent = (df.bytes_sent_max - df.bytes_sent_min) / window_size_seconds
df.bpf_recv = (df.bytes_recv_max - df.bytes_recv_min) / window_size_seconds

# Drop intermediate data columns.
df = df.drop(['bytes_sent_max', 'bytes_sent_min', 'bytes_recv_max', 'bytes_recv_min'])

px.display(df)
