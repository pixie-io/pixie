# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

''' DNS Overview Map
Shows summary DNS requests in the cluster, with some latency information.
'''

import px


# kube-dns.kube-system.svc.cluster.local -> kube-dns.kube-system
def format_nslookup_name(df):
    df.idx1 = px.find(df.to_entity, '.svc.cluster')
    leftovers = df[df.idx1 < 0]
    df = df[df.idx1 >= 0]
    df.to_entity = px.Service(px.substring(df.to_entity, 0, df.idx1))
    return df.append(leftovers)


# kube-system/kube-dns-asjdkfhds-32nej -> kube-dns.kube-system
def format_service_name_as_dns(df):
    no_service = df[df.service == '']
    df = df[df.service != '']
    df.idx = px.find(df.service, '/')
    df.service_stripped = px.substring(df.service, df.idx + 1, px.length(df.service))
    df.from_entity = px.Service(df.service_stripped + '.' + df.namespace)
    return df.drop(['service_stripped', 'idx']).append(no_service)


def dns_flow_graph(start: str, from_entity_filter: str, to_entity_filter: str):
    df = px.DataFrame('dns_events', start_time=start)

    # Client-side tracing only.
    df = df[df.trace_role == 1]
    df = df.drop(['trace_role'])

    # Add context.
    df.pod = df.ctx['pod']
    df.service = df.ctx['service']
    df.namespace = df.ctx['namespace']
    df = df.drop(['upid'])

    # Create table in drawer.
    px.debug(df, "dns_events")

    # Filter nodes for graph.
    df = df[not px.contains(df.pod, "pl")]
    df = df[not df.pod == ""]
    df = df[not df.remote_addr == "-"]

    # Specify from and to entities.
    df.from_entity = df.pod
    df.to_entity = px.Service(px.nslookup(df.remote_addr))

    # Reformat to_entity and from_entity for consistency between pods and services.
    df = format_nslookup_name(df)
    df = format_service_name_as_dns(df)

    # Aggregate the connections.
    df = df.groupby(['from_entity', 'pod', 'to_entity']).agg(
        latency_avg=('latency', px.mean),
        latency_max=('latency', px.max),
        count=('latency', px.count)
    )

    # Filter out entities as specified by the user.
    df = df[px.contains(df.from_entity, from_entity_filter)]
    df = df[px.contains(df.to_entity, to_entity_filter)]

    return df
