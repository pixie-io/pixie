# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

''' Service Edge LET stats

This live view calculates LET between two Services.

Notes:
* Setting requesting_svc or responding_svc does not exclusively match
  at the moment.
  IE: if you have two svcs 'a' and 'a-db', setting `svc_name = 'a'`
  will still match `a-db`
'''
import px

# ----------------------------------------------------------------
# Visualization Variables - No need to edit for basic configuration.
# ----------------------------------------------------------------
# K8s object is the abstraction to group on.
# Options are ['pod', 'service'].
k8s_object = 'service'
ns_per_ms = 1000 * 1000
ns_per_s = 1000 * ns_per_ms
# Window size to use on time_ column for bucketing.
window_ns = px.DurationNanos(10 * ns_per_s)
# Flag to filter out requests that come from an unresolvable IP.
filter_unresolved_inbound = True
# Flag to filter out health checks from the data.
filter_health_checks = True
# Flag to filter out ready checks from the data.
filter_ready_checks = True
# Flag to filter out non_k8s_traffic from the data.
filter_non_k8s_traffic = True
# The name of the incoming traffic column in the edge graphs.
src_col = 'requestor'
# The name of the outgoing traffic column in the edge graphs.
dest_col = 'responder'
# Column naem used to split data into separate time series.
# k8s_object column is renamed to this and is used in
# visualization spec.
split_series_name = 'k8s'
###############################################################


# ----------------------------------------------------------------
# Visualization functions:
#
# These functions are formatted and ready for use in
# the visualization speciciation, vis.json.
# ----------------------------------------------------------------
def svc_edge_let(start: str, requesting_svc: px.Service,
                 responding_svc: px.Service):
    """ Returns the LET time-series for each edge that matches the filter.

    For each edge in the svc graph that matches the filter, we calculate the latency,
    error rate, and throughput as a time-series.

    A matching edge will start at a svc that matches @requesting_svc
    and end at a svc that matches @responding_svc

    Args:
    @start: The timestamp of data to start at.
    @requesting_svc: the partial/full-name of the svc(s)
        that originate requests. (start of the edge).
    @responding_svc: the partial/full-name of the svc(s)
        to receive requests. (end of the edge).

    Returns: DataFrame of the LET stats for edges in the svc graph.
    """
    df = make_http_table(start)

    # Calculate LET of svc(s) (k8s_object) over the time window ('timestamp')
    # after filtering for matching svcs.
    matching_df = df[px.contains(df[k8s_object], responding_svc)]
    let_df = let_per_edge(matching_df)
    # Filter the DataFrame to only those svcs that match the requesting svc.
    let_df = let_df[px.contains(let_df[src_col], requesting_svc)]
    let_df[dest_col] = let_df[k8s_object]
    let_df = let_df['time_', src_col, split_series_name, dest_col, 'latency_p50',
                    'latency_p90', 'latency_p99', 'error_rate',
                    'request_throughput', 'bytes_throughput']
    return let_df


def summary_edge_let(start: str, requesting_svc: px.Service,
                     responding_svc: px.Service):
    """ Returns the summary of LET statistics for matching edges.


    For each edge in the svc graph that matches the filter, we calculate the latency,
    error rate, and throughput as an avg over the examined
    data window.

    A matching edge will start at a svc that matches @requesting_svc
    and end at a svc that matches @responding_svc

    Args:
    @start: The timestamp of data to start at.
    @requesting_svc: the partial/full-name of the svc(s)
        that originate requests. (start of the edge).
    @responding_svc: the partial/full-name of the svc(s)
        to receive requests. (end of the edge).

    Returns: DataFrame of the LET stats for edges in the svc graph.
    """
    df = svc_edge_let(start, requesting_svc, responding_svc)
    return summarize_LET(df, [src_col, dest_col])


# ----------------------------------------------------------------
# Utility functions:
#
# These are shared functions. We plan to support imports in v0.3,
# which will allow these functions to be shared across multiple
# scripts.
# ----------------------------------------------------------------
def let_per_edge(df: px.DataFrame):
    """ Calculates the LET per edge of the svc graph.

    Args:
    @start: The timestamp of data to start at.

    Returns: DataFrame of HTTP events with formatted columns.
    """
    # Calculate LET for each svc edge in the svc graph over each time window.
    # Each edge starts at a requester ('remote_addr') and ends at a
    # responder (k8s_object).
    edge_let_df = calc_http_LET(df, ['remote_addr', k8s_object, 'timestamp'])
    # Convert 'remote_addr' IP into a svc name.
    edge_let_df = ip_to_svc_name(edge_let_df, 'remote_addr', src_col)
    # Rename k8s_object to dest_col.
    edge_let_df[dest_col] = edge_let_df[k8s_object]
    # Format the LET DataFrame columns.
    edge_let_df[split_series_name] = edge_let_df[k8s_object]
    return edge_let_df


def make_http_table(start: str):
    """ Makes the HTTP table given the passed in start.

    The data necessary to compute HTTP level svc information is located in the
    http_events table. We filter and aggregate data from this table to compute the
    required metrics.

    Args:
    @start: The timestamp of data to start at.

    Returns: DataFrame of HTTP events with formatted columns.
    """
    # The data necessary to compute HTTP level svc information is located in the
    # http_events table. We filter and aggregate data from this table to compute the
    # required metrics.
    df = px.DataFrame(table='http_events', start_time=start)
    df = format_http_table(df, filter_health_checks,
                           filter_ready_checks, filter_unresolved_inbound)
    return df


def format_events_table(df, latency_col):
    """ Format data and add semantic columns in event tables

    Unifies latency column to 'latency', adds a binned
    timestamp field to aggregate on, and adds the svc
    (k8s_object) as a semantic column.

    Works on "mysql_events" and "http_events"

    Args:
    @df: the input events table
    @latency_col: the name of the latency column in @df.

    Returns: formatted events DataFrame
    """
    df.latency = df[latency_col]

    df.timestamp = px.bin(df.time_, window_ns)
    df[k8s_object] = df.ctx[k8s_object]
    df = df[df[k8s_object] != '']
    return df


def format_http_table(df, filter_health_checks, filter_ready_checks,
                      filter_unresolved_inbound):
    """ Formats HTTP events tables

    Runs events table universal formatting, adds a response_size,
    creates a failure field marking which requests receive an error
    status code, and optionally filters out system monitoring requests
    and partial data points.

    Args:
    @df: the input http_events table.
    @filter_health_checks: flag to filter health checks.
    @filter_ready_checks: flag to filter health checks.
    @filter_unresolved_inbound: flag to filter unresolved inbound
        requests.

    Returns: formatted HTTP events DataFrame.
    """
    df = format_events_table(df, 'latency')
    df.resp_size = px.length(df.resp_body)
    df.failure = df.resp_status >= 400
    filter_out_conds = ((df.req_path != '/health' or not filter_health_checks) and (
        df.req_path != '/readyz' or not filter_ready_checks)) and (
        df['remote_addr'] != '-' or not filter_unresolved_inbound)

    df = df[filter_out_conds]
    return df


def format_LET_aggs(df):
    """ Converts the result of LET windowed aggregates into expected metrics.

    Converts the result of aggregates on windows into well-formatted metrics that
    can be visualized. Latency quantile values need to be extracted from the
    quantiles struct, and then error_rate, request_throughput, and bytes_throughput are calculated as
    a function of window size.


    This function represents logic shared by LET calculators for MySQL and
    HTTP events.

    Args:
    @df: the input events table grouped into windows with aggregated
        columns 'throughput_total', 'error_rate_per_window', and 'request_throughput'

    Returns: DataFrame with formatted LET metrics.
    """
    df.latency_p50 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p50')))
    df.latency_p90 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p90')))
    df.latency_p99 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p99')))
    df['time_'] = df['timestamp']
    df.request_throughput = df.throughput_total / window_ns
    df.bytes_throughput = df.bytes_total / window_ns
    df.error_rate = df.error_rate_per_window * df.request_throughput / px.DurationNanos(1)

    return df


def calc_http_LET(df, groups):
    """ Calculates Latency, Error Rate, and Throughput on HTTP events.

    Calculates latency, error rate, and throughput aggregated over
    @groups. Throughput is represented by two values: request_throughput, and bytes_throughput.

    Args:
    @df: the input http_events table.
    @groups: the list of columns to group on. 'timestamp' must be a a group
        or this will fail.

    Returns: The LET DataFrame.
    """
    # Aggregate values over the window.
    df = df.groupby(groups).agg(
        latency_quantiles=('latency', px.quantiles),
        error_rate_per_window=('failure', px.mean),
        throughput_total=('latency', px.count),
        bytes_total=('resp_size', px.sum)
    )
    df.bytes_total = px.Bytes(df.bytes_total)

    # Format the result of LET aggregates into proper scalar formats and
    # time series.
    df = format_LET_aggs(df)
    return df


def ip_to_pod_name(df, ip_col, pod_col_name):
    """ Map IP to pod name.

    Maps IP values stored in @ip_col into pod names to store into
    @pod_col_name.

    Args:
    @df: the input dataframe.
    @ip_col: the IP column to map from.
    @pod_col_name: the column name to assign the new pod values.

    Returns: DataFrame with the pod_col added.
    """
    pod_id = 'pod_id'
    df[pod_id] = px.ip_to_pod_id(df[ip_col])
    df[pod_col_name] = px.pod_id_to_pod_name(df[pod_id])
    return df.drop(pod_id)


def ip_to_svc_name(df, ip_col, svc_col_name):
    """ Map IP to svc name.

    Maps IP values stored in @ip_col into svc names to store into
    @svc_col_name.

    Args:
    @df: the input dataframe.
    @ip_col: the IP column to map from.
    @svc_col_name: the column name to assign the new svc values.

    Returns: DataFrame with the svc_col added.
    """
    pod_id = 'pod_id'
    df[pod_id] = px.ip_to_pod_id(df[ip_col])
    df[svc_col_name] = px.pod_id_to_service_name(df[pod_id])
    return df.drop(pod_id)


def summarize_LET(let_df, groups):
    """ Aggregate LET values across all windows.

    Args:
    @let_df: the DataFrame with LET values.
    @groups: the columns to group over.

    Returns: The summary DF.
    """

    df = let_df.groupby(groups).agg(
        request_throughput=('request_throughput', px.mean),
        bytes_throughput=('bytes_throughput', px.mean),
        error_rate=('error_rate', px.mean),
    )
    return df
