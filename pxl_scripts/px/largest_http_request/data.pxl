# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

import px

###############################################################
# Script filters the largest response from the filter you pass in.
###############################################################
# Pods/services are formatted as <namespace>/<name>.
# If you want to match a namespace, only keep the namespace portion
match_name = ''
k8s_object = 'pod'

# Visualization Variables - Dont change unless you know what you are doing
filter_dash = True
filter_health = True
filter_readyz = True
filter_empty_k8s = True
resp_size = 'resp_size_bytes'
ip = 'remote_addr'
###############################################################


def get_max_elm(df, column):
    ''' Returns a df where only the row with the max element in `column`'''
    max_value_df = df.agg(__max_size=(column, px.max))
    return df.merge(max_value_df, how='inner', left_on=[column], right_on=['__max_size'],
                    suffixes=['', '_x']).drop('__max_size')


df = px.DataFrame(table='http_events', start_time='-2m')

df[resp_size] = px.Bytes(px.length(df.resp_body))
df[k8s_object] = df.ctx[k8s_object]
filter_pods = px.contains(df[k8s_object], match_name)
filter_out_conds = ((df.req_path != '/health' or not filter_health) and (
    df.req_path != '/readyz' or not filter_readyz)) and (
    df[ip] != '-' or not filter_dash)
filt_df = df[(filter_pods and filter_out_conds)]

max_size_df = get_max_elm(filt_df, resp_size)
px.display(max_size_df[[
    k8s_object,
    resp_size,
    'resp_body',
    'req_path']].head(5), 'requests_of_max_size')
qa = max_size_df.groupby(
    [k8s_object, 'req_path', resp_size]).agg(num_requests=(resp_size, px.count))
px.display(qa, 'number of reqs')
