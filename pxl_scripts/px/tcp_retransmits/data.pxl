# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

import pxtrace
import px

# Adapted from https://github.com/iovisor/bpftrace/blob/master/tools/tcpretrans.bt
program = """
// tcpretrans.bt Trace or count TCP retransmits
//               For Linux, uses bpftrace and eBPF.
//
// Copyright (c) 2018 Dale Hamel.
// Licensed under the Apache License, Version 2.0 (the "License")

#include <linux/socket.h>
#include <net/sock.h>

BEGIN
{
  // See include/net/tcp_states.h:
  @tcp_states[1] = \"ESTABLISHED\";
  @tcp_states[2] = \"SYN_SENT\";
  @tcp_states[3] = \"SYN_RECV\";
  @tcp_states[4] = \"FIN_WAIT1\";
  @tcp_states[5] = \"FIN_WAIT2\";
  @tcp_states[6] = \"TIME_WAIT\";
  @tcp_states[7] = \"CLOSE\";
  @tcp_states[8] = \"CLOSE_WAIT\";
  @tcp_states[9] = \"LAST_ACK\";
  @tcp_states[10] = \"LISTEN\";
  @tcp_states[11] = \"CLOSING\";
  @tcp_states[12] = \"NEW_SYN_RECV\";
}

kprobe:tcp_retransmit_skb
{
  $sk = (struct sock *)arg0;
  $inet_family = $sk->__sk_common.skc_family;
  $AF_INET = (uint16) 2;
  $AF_INET6 = (uint16) 10;
  if ($inet_family == $AF_INET || $inet_family == $AF_INET6) {
    // initialize variable type:
    $daddr = ntop(0);
    $saddr = ntop(0);
    if ($inet_family == $AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;
    // Destination port is big endian, it must be flipped
    $dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);
    $state = $sk->__sk_common.skc_state;
    $statestr = @tcp_states[$state];
    printf(\"time:%llu pid:%u pid_start_time:%llu src_ip:%s src_port:%d dst_ip:%s dst_port:%d state:%s\",
      nsecs,
      pid,
      ((struct task_struct*)curtask)->group_leader->start_time / 10000000,
      $saddr,
      $lport,
      $daddr,
      $dport,
      $statestr);
  }
}

END
{
  clear(@tcp_states);
}
"""


def demo_func():
    name = 'tcp_retransmits'
    pxtrace.UpsertTracepoint(name,
                             name,
                             program,
                             pxtrace.kprobe(),
                             "10m")
    # Rename columns
    df = px.DataFrame(table=name,
                      select=['time', 'src_ip', 'src_port', 'dst_ip', 'dst_port', 'state'])

    # Convert IPs to domain names.
    df.resolved_src = px.pod_id_to_pod_name(px.ip_to_pod_id(df.src_ip))
    df.resolved_dest = px.pod_id_to_pod_name(px.ip_to_pod_id(df.dst_ip))
    df.ns_src = px.nslookup(df.src_ip)
    df.ns_dst = px.nslookup(df.dst_ip)
    df.src = df.resolved_src
    df.dst = px.Service(df.ns_dst)

    # Count retransmits.
    df = df.groupby(['src', 'dst']).agg(retransmits=('ns_src', px.count))

    # Filter for a particular service, if desired.
    df = df[px.contains(df['dst'], '')]

    # Set a threshold to display, if desired.
    df = df[df['retransmits'] > 0]

    return df
