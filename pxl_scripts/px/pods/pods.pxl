# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

'''Pods Overview

List of Pods monitored by Pixie in a given Namespace with their high level application metrics
(latency, error-rate & rps) and resource usage (cpu, writes, reads).

'''

import px


ns_per_ms = 1000 * 1000
ns_per_s = 1000 * ns_per_ms
# Window size to use on time_ column for bucketing.
window_ns = px.DurationNanos(10 * ns_per_s)
# Flag to filter out requests that come from an unresolvable IP.
filter_unresolved_inbound = True
# Flag to filter out health checks from the data.
filter_health_checks = True
# Flag to filter out ready checks from the data.
filter_ready_checks = True


def pods(start_time: str, namespace: px.Namespace):
    ''' A list of pods in `namespace`.

    Args:
    @start_time: The timestamp of data to start at.
    @namespace: The name of the namespace to filter on.

    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['namespace'] == namespace]
    df.pod = df.ctx['pod_name']
    df.container = df.ctx['container_name']
    df.service = df.ctx['service']
    df = df.groupby(['service', 'pod', 'container']).agg()
    df = df.groupby(['service', 'pod']).agg(containers=('container', px.count))
    df.start_time = px.pod_name_to_start_time(df.pod)
    df.status = px.pod_name_to_status(df.pod)
    return df[['pod', 'service', 'start_time', 'containers', 'status']]


def resource_timeseries(start_time: str, namespace: px.Namespace):
    ''' Compute the resource usage as a timeseries for pods in `namespace`.

    Args:
    @start_time: The timestamp of data to start at.
    @namespace: The name of the namespace to filter on.

    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['namespace'] == namespace]
    df.pod = df.ctx['pod_name']
    df.timestamp = px.bin(df.time_, window_ns)

    # First calculate CPU usage by process (UPID) in each k8s_object
    # over all windows.
    df = df.groupby(['upid', 'pod', 'timestamp']).agg(
        rss=('rss_bytes', px.mean),
        vsize=('vsize_bytes', px.mean),
        # The fields below are counters, so we take the min and the max to subtract them.
        cpu_utime_ns_max=('cpu_utime_ns', px.max),
        cpu_utime_ns_min=('cpu_utime_ns', px.min),
        cpu_ktime_ns_max=('cpu_ktime_ns', px.max),
        cpu_ktime_ns_min=('cpu_ktime_ns', px.min),
        read_bytes_max=('read_bytes', px.max),
        read_bytes_min=('read_bytes', px.min),
        write_bytes_max=('write_bytes', px.max),
        write_bytes_min=('write_bytes', px.min),
        rchar_bytes_max=('rchar_bytes', px.max),
        rchar_bytes_min=('rchar_bytes', px.min),
        wchar_bytes_max=('wchar_bytes', px.max),
        wchar_bytes_min=('wchar_bytes', px.min),
    )

    # Next calculate cpu usage and memory stats per window.
    df.cpu_utime_ns = df.cpu_utime_ns_max - df.cpu_utime_ns_min
    df.cpu_ktime_ns = df.cpu_ktime_ns_max - df.cpu_ktime_ns_min
    df.actual_disk_read_throughput = (df.read_bytes_max - df.read_bytes_min) / window_ns
    df.actual_disk_write_throughput = (df.write_bytes_max - df.write_bytes_min) / window_ns
    df.total_disk_read_throughput = (df.rchar_bytes_max - df.rchar_bytes_min) / window_ns
    df.total_disk_write_throughput = (df.wchar_bytes_max - df.wchar_bytes_min) / window_ns

    # Then aggregate process individual process metrics.
    df = df.groupby(['pod', 'timestamp']).agg(
        cpu_ktime_ns=('cpu_ktime_ns', px.sum),
        cpu_utime_ns=('cpu_utime_ns', px.sum),
        actual_disk_read_throughput=('actual_disk_read_throughput', px.sum),
        actual_disk_write_throughput=('actual_disk_write_throughput', px.sum),
        total_disk_read_throughput=('total_disk_read_throughput', px.sum),
        total_disk_write_throughput=('total_disk_write_throughput', px.sum),
        rss=('rss', px.sum),
        vsize=('vsize', px.sum),
    )

    # Finally, calculate total (kernel + user time)  percentage used over window.
    df.cpu_usage = px.Percent((df.cpu_ktime_ns + df.cpu_utime_ns) / window_ns)
    df['time_'] = df['timestamp']
    return df.drop(['cpu_ktime_ns', 'cpu_utime_ns', 'timestamp'])


def inbound_let_timeseries(start_time: str, namespace: px.Namespace):
    ''' Compute the let as a timeseries for requests received by pods in `namespace`.

    Args:
    @start_time: The timestamp of data to start at.
    @namespace: The name of the namespace to filter on.

    '''
    df = inbound_let_helper(start_time, namespace)

    df = df.groupby(['pod', 'timestamp']).agg(
        latency_quantiles=('latency', px.quantiles),
        error_rate_per_window=('failure', px.mean),
        throughput_total=('latency', px.count),
        bytes_total=('resp_size', px.sum)
    )

    # Format the result of LET aggregates into proper scalar formats and
    # time series.
    df.latency_p50 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p50')))
    df.latency_p90 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p90')))
    df.latency_p99 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p99')))
    df.request_throughput = df.throughput_total / window_ns
    df.error_rate = px.Percent(df.error_rate_per_window)
    df.bytes_per_ns = df.bytes_total / window_ns
    df.time_ = df.timestamp

    return df[['time_', 'pod', 'latency_p50', 'latency_p90', 'latency_p99',
               'request_throughput', 'error_rate', 'bytes_per_ns']]


def inbound_let_summary(start_time: str, namespace: px.Namespace):
    ''' Gets a summary of request statistics for pods in `namespace`.

    Args:
    @start: Starting time of the data to examine.
    @namespace: The namespace to filter on.
    '''
    df = inbound_let_helper(start_time, namespace)

    quantiles_agg = df.groupby(['pod', 'remote_addr']).agg(
        latency=('latency', px.quantiles),
        total_request_count=('latency', px.count)
    )
    quantiles_table = quantiles_agg[['pod', 'remote_addr', 'latency',
                                     'total_request_count']]

    range_agg = df.groupby(['pod', 'remote_addr', 'timestamp']).agg(
        requests_per_window=('time_', px.count),
        error_rate=('failure', px.mean)
    )

    rps_table = range_agg.groupby(['pod', 'remote_addr']).agg(
        requests_per_window=('requests_per_window', px.mean),
        error_rate=('error_rate', px.mean)
    )

    joined_table = quantiles_table.merge(rps_table,
                                         how='inner',
                                         left_on=['pod', 'remote_addr'],
                                         right_on=['pod', 'remote_addr'],
                                         suffixes=['', '_x'])

    joined_table.error_rate = px.Percent(joined_table.error_rate)
    joined_table.request_throughput = joined_table.requests_per_window / window_ns

    joined_table.responder = df.pod
    joined_table.requestor = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))

    return joined_table[['responder', 'requestor', 'latency', 'error_rate',
                         'request_throughput']]


def inbound_let_helper(start_time: str, namespace: px.Namespace):
    ''' Compute the initial part of the let for requests received or sent by pods in `namespace`.

    Args:
    @start_time: The timestamp of data to start at.
    @namespace: The name of the namespace to filter on.

    '''
    df = px.DataFrame(table='http_events', start_time=start_time)
    df = df[df.ctx['namespace'] == namespace]
    df.pod = df.ctx['pod']
    df = df[df.pod != '']
    df.latency = df.latency

    df.timestamp = px.bin(df.time_, window_ns)

    df.resp_size = px.Bytes(px.length(df.resp_body))
    df.failure = df.resp_status >= 400
    filter_out_conds = ((df.req_path != '/health' or not filter_health_checks) and (
        df.req_path != '/readyz' or not filter_ready_checks)) and (
        df['remote_addr'] != '-' or not filter_unresolved_inbound)

    df = df[filter_out_conds]
    return df
