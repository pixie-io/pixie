---
name: trivy-images
on:
  push:
    branches:
    - main
    - ddelnano/scan-pixie-deps-with-trivy
  schedule:
  - cron: "37 19 * * *"
permissions:
  contents: read
jobs:
  get-dev-image:
    uses: ./.github/workflows/get_image.yaml
    with:
      image-base-name: "dev_image_with_extras"
  generate-sarif:
    strategy:
      fail-fast: false
      matrix:
        artifact: [cloud, operator, vizier]
    runs-on: oracle-8cpu-32gb-x86-64
    needs: get-dev-image
    container:
      image: ${{ needs.get-dev-image.outputs.image-with-tag }}
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
    - name: Add pwd to git safe dir
      run: git config --global --add safe.directory `pwd`
    - name: Use github bazel config
      uses: ./.github/actions/bazelrc
      with:
        download_toplevel: 'true'
        BB_API_KEY: ${{ secrets.BB_IO_API_KEY }}
    - name: Build images
      run: |
        ./scripts/bazel_ignore_codes.sh build \
        --//k8s:image_version=nightly --config=x86_64_sysroot \
        //k8s/${{ matrix.artifact }}:image_bundle.tar //k8s/${{ matrix.artifact }}:list_image_bundle
    - name: Load Images
      run: |
        docker load -i bazel-bin/k8s/${{ matrix.artifact }}/image_bundle.tar
    - name: Scan Images
      # yamllint disable rule:line-length
      run: |
        mkdir -p sarif/${{ matrix.artifact }}
        ./bazel-bin/k8s/${{ matrix.artifact }}/list_image_bundle | xargs -I{} sh -c 'trivy image {} --format=sarif --output=sarif/${{ matrix.artifact }}/$(basename {} | cut -d":" -f1).sarif'

        # TODO(ddelnano): Remove this check once the operator dependency images are supported. This requires rendering helm templates
        # and requires some additional work.
        if [ "${{ matrix.artifact }}" = "operator" ]; then
          echo "Skipping operator image scan for now."
          exit 0
        fi

        echo "Found non bazel images for ${{ matrix.artifact }}."
        ./scripts/bazel_ignore_codes.sh build \
          //k8s/${{ matrix.artifact }}:${{ matrix.artifact }}_image_list

        # Ignore images whose basename is "/${{ matrix.artifact }}" to avoid scanning the bazel built images (e.g. /vizier-, /cloud-)
        cat ./bazel-bin/k8s/${{ matrix.artifact }}/${{ matrix.artifact }}_image_list.txt | grep -v "\/${{ matrix.artifact }}" | xargs -I{} sh -c 'trivy image {} --format=sarif --output=sarif/${{ matrix.artifact }}/$(basename {} | cut -d":" -f1).sarif'
      # yamllint enable rule:line-length
    - run: |
        for f in "sarif/${{ matrix.artifact }}/"*; do
          jq '.runs[].tool.driver.name = "trivy-images"' < "$f" > tmp
          mv tmp "$f"
        done
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sarif-${{ matrix.artifact }}
        path: sarif/
        retention-days: 1

  collect-sarifs:
    # GitHub Actions matrix job outputs cannot be directly used as job outputs
    # because matrix jobs create multiple output values (one per matrix combination).
    # We need a separate job to collect all SARIF files from all artifacts
    # and create a single unified matrix for the upload job.
    needs: generate-sarif
    runs-on: oracle-8cpu-32gb-x86-64
    outputs:
      matrix: ${{ steps.combine-sarifs.outputs.matrix }}
      has-sarifs: ${{ steps.combine-sarifs.outputs.has-sarifs }}
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: sarif-*
        merge-multiple: true
    - id: combine-sarifs
      run: |
        # Debug: Show what was downloaded
        echo "Current directory structure"
        ls -la
        echo "Looking for sarif directory"
        ls -la sarif/ || echo "No sarif directory found"
        echo "All .sarif files"
        find . -name "*.sarif" -type f || echo "No SARIF files found anywhere"

        # With merge-multiple: true, all artifacts are in the same directory
        # Find all SARIF files regardless of subdirectory structure
        all_files=()
        while IFS= read -r -d '' file; do
          echo "Found file: $file"
          all_files+=("$file")
        done < <(find . -name "*.sarif" -type f -print0)

        echo "Total files found: ${#all_files[@]}"

        if [ ${#all_files[@]} -eq 0 ]; then
          echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          echo "has-sarifs=false" >> $GITHUB_OUTPUT
        else
          matrix_json=$(printf '%s\n' "${all_files[@]}" | jq -R -s '
            split("\n") | map(select(length > 0)) | {
              include: map({
                file: .,
                category: ("trivy-images-" + (split("/")[1]) + "-" + (split("/")[-1] | split(".")[0])),
                artifact: ("sarif-" + (split("/")[1]))
              })
            }' | jq -c '.')

          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
          echo "has-sarifs=true" >> $GITHUB_OUTPUT
        fi

  upload-sarif:
    needs: collect-sarifs
    if: needs.collect-sarifs.outputs.has-sarifs == 'true'
    strategy:
      matrix: ${{ fromJson(needs.collect-sarifs.outputs.matrix) }}
    runs-on: oracle-8cpu-32gb-x86-64
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact }}
    - uses: github/codeql-action/upload-sarif@1b549b9259bda1cb5ddde3b41741a82a2d15a841  # v3.28.13
      with:
        sarif_file: ${{ matrix.file }}
        category: ${{ matrix.category }}
