---
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-envoy-config
data:
  # This envoy.yaml is almost an exact copy of cloud/base/proxy_envoy.yaml, minus
  # the alpn_protocols in common_tls_context. This is because GCP health check only
  # supports alpn h2, making the alpn field is required in our prod cloud instances.
  # plc-dev makes a direct call to Envoy, since the proxy is not behind a GCLB.
  # Unfortunately, the browser does not support HTTP2, so plc-dev cannot
  # make a direct call to Envoy with alpn h2 enabled. This requires us to remove
  # alpn h2 in only dev's proxy_envoy.
  envoy.yaml: >
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address: { address: 0.0.0.0, port_value: 56004 }
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              access_log:
              - name: envoy.file_access_log
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/dev/stdout"
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/px.api"
                    route:
                      cluster: api_service
                      timeout: 3600s
                  - match:
                      prefix: "/healthz"
                    route:
                      cluster: api_service
                  cors:
                    allow_origin_string_match:
                    - suffix: "dev.withpixie.dev"
                    allow_methods: GET, PUT, DELETE, POST, OPTIONS
                    allow_headers: >
                      keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,
                      x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,
                      x-grpc-web,authorization,grpc-timeout,grpc-status,grpc-message
                    max_age: "1728000"
                    expose_headers: grpc-status,grpc-message,grpc-timeout
                    allow_credentials: true
              http_filters:
              - name: envoy.filters.http.grpc_web
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
              - name: envoy.filters.http.cors
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                alpn_protocols: "h2,http/1.1"
                tls_certificates:
                  - certificate_chain:
                      filename: "/certs/tls.crt"
                    private_key:
                      filename: "/certs/tls.key"
      clusters:
      - name: api_service
        connect_timeout: 0.25s
        type: logical_dns
        http2_protocol_options: {}
        lb_policy: round_robin
        load_assignment:
          cluster_name: api_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: api-service
                    port_value: 51200
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificates:
                - certificate_chain:
                    filename: "/service-certs/client.crt"
                  private_key:
                    filename: "/service-certs/client.key"
