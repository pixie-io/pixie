# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")

package(default_visibility = ["//visibility:public"])

config_setting(
    name = "disable_tcmalloc",
    values = {"define": "tcmalloc=disabled"},
)

config_setting(
    name = "debug_tcmalloc",
    values = {"define": "tcmalloc=debug"},
)

config_setting(
    name = "coverage_enabled",
    values = {"define": "PL_COVERAGE=true"},
)

config_setting(
    name = "clang_build",
    flag_values = {
        "//bazel/cc_toolchains:compiler": "clang",
    },
)

config_setting(
    name = "gcc_build",
    flag_values = {
        "//bazel/cc_toolchains:compiler": "gcc",
    },
)

bool_flag(
    name = "enable_libcpp",
    build_setting_default = False,
)

config_setting(
    name = "use_libcpp",
    flag_values = {
        "//bazel:enable_libcpp": "True",
    },
)

config_setting(
    name = "use_libstdcpp",
    flag_values = {
        "//bazel:enable_libcpp": "False",
    },
)

config_setting(
    name = "debug_build",
    values = {"compilation_mode": "dbg"},
)

config_setting(
    name = "stamped",
    values = {"stamp": "true"},
)

string_flag(
    name = "sanitizer",
    build_setting_default = "none",
    values = [
        "none",
        "asan",
        "tsan",
        "msan",
    ],
)

config_setting(
    name = "sanitizer_none",
    flag_values = {
        "//bazel:sanitizer": "none",
    },
)

config_setting(
    name = "sanitizer_asan",
    flag_values = {
        "//bazel:sanitizer": "asan",
    },
)

config_setting(
    name = "sanitizer_msan",
    flag_values = {
        "//bazel:sanitizer": "msan",
    },
)

config_setting(
    name = "sanitizer_tsan",
    flag_values = {
        "//bazel:sanitizer": "tsan",
    },
)

platform(
    name = "remote_exec_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    exec_properties = {
        "OSFamily": "Linux",
        "Pool": "202305312341",
    },
)

# Jenkins uses `bazel query` to find the reverse dependencies of a changed file.
# Without this, that query on pl_build_system.bzl will fail, in the case of changing its content.
exports_files(["pl_build_system.bzl"])
